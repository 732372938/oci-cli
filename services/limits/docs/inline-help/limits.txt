CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'limits' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits --help
Usage: oci limits [OPTIONS] COMMAND [ARGS]...

  CLI that interact with the resource limits of a specific resource type

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  definition             The metadata specific to a resource limit...
  quota                  Quotas are applied on top of the service...
  resource-availability  The availability of a given resource limit,...
  service                A specific OCI service supported by resource...
  value                  The value of a specific resource limit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits definition --help
Usage: oci limits definition [OPTIONS] COMMAND [ARGS]...

  The metadata specific to a resource limit definition.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Includes a list of resource limits that are...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits definition list --help
Usage: oci limits definition list [OPTIONS]

  Includes a list of resource limits that are currently supported. If the
  'areQuotasSupported' property is true, you can create quota policies on top
  of this limit at the compartment level.

Options:
  -c, --compartment-id TEXT     The OCID of the parent compartment (remember
                                that the tenancy is simply the root
                                compartment). [required]
  --service-name TEXT           The target service name.
  --name TEXT                   Optional field, filter for a specific resource
                                limit.
  --sort-by [name|description]  The field to sort by.
  --sort-order [ASC|DESC]       The sort order to use, either 'asc' or 'desc'.
                                By default it will be ascending.
  --limit INTEGER               The maximum number of items to return in a
                                paginated "List" call.
  --page TEXT                   The value of the `opc-next-page` response header
                                from the previous "List" call.
  --all                         Fetches all pages of results. If you provide
                                this option, then you cannot provide the --limit
                                option.
  --page-size INTEGER           When fetching results, the number of results to
                                fetch per call. Only valid when used with --all
                                or --limit, and ignored otherwise.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file using the file://path-to/file
                                syntax.
                                
                                The --generate-full-command-json-input
                                option can be used to generate a sample json
                                file to be used with this command option. The
                                key names are pre-populated and match the
                                command option names (converted to camelCase
                                format, e.g. compartment-id --> compartmentId),
                                while the values of the keys need to be
                                populated by the user before using the sample
                                file as an input to this command. For any
                                command option that accepts multiple values, the
                                value of the key can be a JSON array.
                                
                                Options
                                can still be provided on the command line. If an
                                option exists in both the JSON document and the
                                command line then the command line specified
                                value will be used.
                                
                                For examples on usage of
                                this option, please see our "using CLI with
                                advanced JSON options" link: https://docs.cloud.
                                oracle.com/iaas/Content/API/SDKDocs/cliusing.htm
                                #AdvancedJSONOptions
  -?, -h, --help                For detailed help on any of these individual
                                commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota --help
Usage: oci limits quota [OPTIONS] COMMAND [ARGS]...

  Quotas are applied on top of the service limits and inherited through the
  nested compartment hierarchy. They allow compartment admins to limit
  resource consumption and set boundaries around acceptable resource use. The
  word "quota" is used by people in different ways:   * An individual
  statement written in the declarative language   * A collection of statements
  in a single, named "quota" object (which has an Oracle Cloud ID (OCID)
  assigned to it)   * The overall body of quotas your organization uses to
  control access to resources

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Creates a new quota with the details...
  delete  Deletes the quota corresponding to the given...
  get     Gets the quota for the OCID specified.
  list    Lists all quotas on resources from the given...
  update  Updates the quota corresponding to given OCID...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota create --help
Usage: oci limits quota create [OPTIONS]

  Creates a new quota with the details supplied.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment containing the
                                  resource this quota applies to. [required]
  --description TEXT              The description you assign to the quota.
                                  [required]
  --name TEXT                     The name you assign to the quota during
                                  creation. The name must be unique across all
                                  quotas in the tenancy and cannot be changed.
                                  [required]
  --statements COMPLEX TYPE       An array of quota statements written in the
                                  declarative quota statement language.
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
                                  [required]
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACTIVE]       This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota delete --help
Usage: oci limits quota delete [OPTIONS]

  Deletes the quota corresponding to the given OCID.

Options:
  --quota-id TEXT                 The OCID of the quota. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE]       This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota get --help
Usage: oci limits quota get [OPTIONS]

  Gets the quota for the OCID specified.

Options:
  --quota-id TEXT   The OCID of the quota. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota list --help
Usage: oci limits quota list [OPTIONS]

  Lists all quotas on resources from the given compartment

Options:
  -c, --compartment-id TEXT     The OCID of the parent compartment (remember
                                that the tenancy is simply the root
                                compartment). [required]
  --page TEXT                   The value of the `opc-next-page` response header
                                from the previous "List" call.
  --limit INTEGER               The maximum number of items to return in a
                                paginated "List" call.
  --name TEXT                   name
  --lifecycle-state [ACTIVE]    Filters returned quotas based on whether the
                                given state.
  --sort-order [ASC|DESC]       The sort order to use, either 'asc' or 'desc'.
                                By default it will be ascending.
  --sort-by [NAME|TIMECREATED]  The field to sort by. Only one sort order may be
                                provided. Time created is default ordered as
                                descending. Display name is default ordered as
                                ascending.
  --all                         Fetches all pages of results. If you provide
                                this option, then you cannot provide the --limit
                                option.
  --page-size INTEGER           When fetching results, the number of results to
                                fetch per call. Only valid when used with --all
                                or --limit, and ignored otherwise.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file using the file://path-to/file
                                syntax.
                                
                                The --generate-full-command-json-input
                                option can be used to generate a sample json
                                file to be used with this command option. The
                                key names are pre-populated and match the
                                command option names (converted to camelCase
                                format, e.g. compartment-id --> compartmentId),
                                while the values of the keys need to be
                                populated by the user before using the sample
                                file as an input to this command. For any
                                command option that accepts multiple values, the
                                value of the key can be a JSON array.
                                
                                Options
                                can still be provided on the command line. If an
                                option exists in both the JSON document and the
                                command line then the command line specified
                                value will be used.
                                
                                For examples on usage of
                                this option, please see our "using CLI with
                                advanced JSON options" link: https://docs.cloud.
                                oracle.com/iaas/Content/API/SDKDocs/cliusing.htm
                                #AdvancedJSONOptions
  -?, -h, --help                For detailed help on any of these individual
                                commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits quota update --help
Usage: oci limits quota update [OPTIONS]

  Updates the quota corresponding to given OCID with the details supplied.

Options:
  --quota-id TEXT                 The OCID of the quota. [required]
  --description TEXT              The description you assign to the quota.
  --statements COMPLEX TYPE       An array of quota statements written in the
                                  declarative quota statement language.
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE]       This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits resource-availability --help
Usage: oci limits resource-availability [OPTIONS] COMMAND [ARGS]...

  The availability of a given resource limit, based on the usage, tenant
  service limits and quotas set for the tenancy. Note: We cannot guarantee
  this data for all the limits. In those cases, these fields will be empty.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get  For a given compartmentId, resource limit...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits resource-availability get --help
Usage: oci limits resource-availability get [OPTIONS]

  For a given compartmentId, resource limit name, and scope, returns the
  following:   - the number of available resources associated with the given
  limit   - the usage in the selected compartment for the given limit   Note:
  not all resource limits support this API. If the value is not available, the
  API will return 404.

Options:
  --service-name TEXT         The service name of the target quota. [required]
  --limit-name TEXT           The limit name for which to fetch the data.
                              [required]
  -c, --compartment-id TEXT   The OCID of the compartment for which data is
                              being fetched. [required]
  --availability-domain TEXT  This field is mandatory if the scopeType of the
                              target resource limit is AD. Otherwise, this field
                              should be omitted. If the above requirements are
                              not met, the API will return a 400 -
                              InvalidParameter response.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits service --help
Usage: oci limits service [OPTIONS] COMMAND [ARGS]...

  A specific OCI service supported by resource limits.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Returns the list of supported services.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits service list --help
Usage: oci limits service list [OPTIONS]

  Returns the list of supported services. This will include the programmatic
  service name, along with the friendly service name.

Options:
  -c, --compartment-id TEXT     The OCID of the parent compartment (remember
                                that the tenancy is simply the root
                                compartment). [required]
  --sort-by [name|description]  The field to sort by.
  --sort-order [ASC|DESC]       The sort order to use, either 'asc' or 'desc'.
                                By default it will be ascending.
  --limit INTEGER               The maximum number of items to return in a
                                paginated "List" call.
  --page TEXT                   The value of the `opc-next-page` response header
                                from the previous "List" call.
  --all                         Fetches all pages of results. If you provide
                                this option, then you cannot provide the --limit
                                option.
  --page-size INTEGER           When fetching results, the number of results to
                                fetch per call. Only valid when used with --all
                                or --limit, and ignored otherwise.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file using the file://path-to/file
                                syntax.
                                
                                The --generate-full-command-json-input
                                option can be used to generate a sample json
                                file to be used with this command option. The
                                key names are pre-populated and match the
                                command option names (converted to camelCase
                                format, e.g. compartment-id --> compartmentId),
                                while the values of the keys need to be
                                populated by the user before using the sample
                                file as an input to this command. For any
                                command option that accepts multiple values, the
                                value of the key can be a JSON array.
                                
                                Options
                                can still be provided on the command line. If an
                                option exists in both the JSON document and the
                                command line then the command line specified
                                value will be used.
                                
                                For examples on usage of
                                this option, please see our "using CLI with
                                advanced JSON options" link: https://docs.cloud.
                                oracle.com/iaas/Content/API/SDKDocs/cliusing.htm
                                #AdvancedJSONOptions
  -?, -h, --help                For detailed help on any of these individual
                                commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits value --help
Usage: oci limits value [OPTIONS] COMMAND [ARGS]...

  The value of a specific resource limit.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Includes a full list of resource limits...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci limits value list --help
Usage: oci limits value list [OPTIONS]

  Includes a full list of resource limits belonging to a given service.

Options:
  -c, --compartment-id TEXT       The OCID of the parent compartment (remember
                                  that the tenancy is simply the root
                                  compartment). [required]
  --service-name TEXT             The target service name [required]
  --scope-type [GLOBAL|REGION|AD]
                                  Filter entries by scope type.
  --availability-domain TEXT      Filter entries by availability domain. This
                                  implies that only AD-specific values will be
                                  returned.
  --name TEXT                     Optional field, can be used to see a specific
                                  resource limit value.
  --sort-by [name]                The field to sort by. We will be implicitly
                                  sorting by availabilityDomain, as a second
                                  level field, if available.
  --sort-order [ASC|DESC]         The sort order to use, either 'asc' or 'desc'.
                                  By default it will be ascending.
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated "List" call.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous "List" call.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

