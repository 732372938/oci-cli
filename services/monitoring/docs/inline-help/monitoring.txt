CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'monitoring' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring [OPTIONS] COMMAND [ARGS]...

  Use the Monitoring CLI to manage metric queries and alarms for assessing the
  health, capacity, and performance of your cloud resources. Endpoints vary by
  operation. For PostMetric, use the `telemetry-ingestion` endpoints; for all
  other operations, use the `telemetry` endpoints. For information about
  monitoring, see [Monitoring Overview].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  alarm                     The properties that define an alarm.
  alarm-history-collection  The configuration details for retrieving...
  alarm-status              A summary of properties for the specified...
  metric                    The properties that define a metric.
  metric-data               The set of aggregated data returned for a...
  suppression               The configuration details for suppressing an...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm [OPTIONS] COMMAND [ARGS]...

  The properties that define an alarm. For information about alarms, see
  [Alarms Overview].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

  For information about endpoints and signing API requests, see [About the
  API]. For information about available SDKs and tools, see [SDKS and Other
  Tools].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  change-compartment  Moves an alarm into a different compartment...
  create              Creates a new alarm in the specified...
  delete              Deletes the specified alarm.
  get                 Gets the specified alarm.
  list                Lists the alarms for the specified...
  update              Updates the specified alarm.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm change-compartment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm change-compartment [OPTIONS]

  Moves an alarm into a different compartment within the same tenancy.

  For information about moving resources between compartments, see [Moving
  Resources Between Compartments].

Options:
  --alarm-id TEXT            The [OCID] of an alarm. [required]
  -c, --compartment-id TEXT  The [OCID] of the compartment to move the alarm to.
                             [required]
  --if-match TEXT            For optimistic concurrency control. In the PUT or
                             DELETE call for a resource, set the `if-match`
                             parameter to the value of the etag from a previous
                             GET or POST response for that resource.  The
                             resource will be updated or deleted only if the
                             etag you provide matches the resource's current
                             etag value.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm create [OPTIONS]

  Creates a new alarm in the specified compartment.

Options:
  --display-name TEXT             A user-friendly name for the alarm. It does
                                  not have to be unique, and it's changeable.
                                  Avoid entering confidential information.
                                  
                                  This
                                  name is sent as the title for notifications
                                  related to this alarm.
                                  
                                  Example: `High CPU
                                  Utilization` [required]
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  alarm. [required]
  --metric-compartment-id TEXT    The [OCID] of the compartment containing the
                                  metric being evaluated by the alarm.
                                  [required]
  --namespace TEXT                The source service or application emitting the
                                  metric that is evaluated by the alarm.
                                  Example: `oci_computeagent` [required]
  --severity TEXT                 The perceived type of response required when
                                  the alarm is in the "FIRING" state.
                                  
                                  Example:
                                  `CRITICAL` [required]
  --destinations COMPLEX TYPE     A list of destinations to which the
                                  notifications for this alarm will be
                                  delivered. Each destination is represented by
                                  an [OCID] related to the supported destination
                                  service. For example, a destination using the
                                  Notifications service is represented by a
                                  topic OCID. Supported destination services:
                                  Notifications Service. Limit: One destination
                                  per supported destination service.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
                                  [required]
  --is-enabled BOOLEAN            Whether the alarm is enabled.
                                  
                                  Example: `true`
                                  [required]
  --metric-compartment-id-in-subtree BOOLEAN
                                  When true, the alarm evaluates metrics from
                                  all compartments and subcompartments. The
                                  parameter can only be set to true when
                                  metricCompartmentId is the tenancy OCID (the
                                  tenancy is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, the
                                  alarm evaluates metrics from only the
                                  compartment specified in metricCompartmentId.
                                  Default is false.
                                  
                                  Example: `true`
  --resource-group TEXT           Resource group that you want to use as a
                                  filter. The alarm retrieves metric data
                                  associated with the specified resource group
                                  only. Only one resource group can be applied
                                  per metric. A valid resourceGroup value starts
                                  with an alphabetical character and includes
                                  only alphanumeric characters, periods (.),
                                  underscores (_), hyphens (-), and dollar signs
                                  ($). Avoid entering confidential information.
                                  Example: `frontend-fleet`
  --resolution TEXT               The time between calculated aggregation
                                  windows for the alarm. Supported value: `1m`
  --pending-duration TEXT         The period of time that the condition defined
                                  in the alarm must persist before the alarm
                                  state changes from "OK" to "FIRING". For
                                  example, a value of 5 minutes means that the
                                  alarm must persist in breaching the condition
                                  for five minutes before the alarm updates its
                                  state to "FIRING".
                                  
                                  The duration is specified
                                  as a string in ISO 8601 format (`PT10M` for
                                  ten minutes or `PT1H` for one hour). Minimum:
                                  PT1M. Maximum: PT1H. Default: PT1M.
                                  
                                  Under the
                                  default value of PT1M, the first evaluation
                                  that breaches the alarm updates the state to
                                  "FIRING".
                                  
                                  The alarm updates its status to
                                  "OK" when the breaching condition has been
                                  clear for the most recent minute.
                                  
                                  Example:
                                  `PT5M`
  --body TEXT                     The human-readable content of the notification
                                  delivered. Oracle recommends providing
                                  guidance to operators for resolving the alarm
                                  condition. Consider adding links to standard
                                  runbook practices. Avoid entering confidential
                                  information.
                                  
                                  Example: `High CPU usage alert.
                                  Follow runbook instructions for resolution.`
  --repeat-notification-duration TEXT
                                  The frequency at which notifications are re-
                                  submitted, if the alarm keeps firing without
                                  interruption. Format defined by ISO 8601. For
                                  example, `PT4H` indicates four hours. Minimum:
                                  PT1M. Maximum: P30D.
                                  
                                  Default value: null
                                  (notifications are not re-submitted).
                                  Example: `PT2H`
  --suppression COMPLEX TYPE      The configuration details for suppressing an
                                  alarm.
                                  This is a complex type whose value must
                                  be valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --freeform-tags COMPLEX TYPE    Simple key-value pair that is applied without
                                  any predefined name, type or scope. Exists for
                                  cross-compatibility only. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Usage of predefined tag keys. These predefined
                                  keys are scoped to namespaces. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --query-text TEXT               The Monitoring Query Language (MQL) expression
                                  to evaluate for the alarm. The Alarms feature
                                  of the Monitoring service interprets results
                                  for each returned time series as Boolean
                                  values, where zero represents false and a non-
                                  zero value represents true. A true value means
                                  that the trigger rule condition has been met.
                                  The query must specify a metric, statistic,
                                  interval, and trigger rule (threshold or
                                  absence). Supported values for interval:
                                  `1m`-`60m` (also `1h`). You can optionally
                                  specify dimensions and grouping functions.
                                  Supported grouping functions: `grouping()`,
                                  `groupBy()`. For details about Monitoring
                                  Query Language (MQL), see [Monitoring Query
                                  Language (MQL) Reference]. For available
                                  dimensions, review the metric definition for
                                  the supported service. See [Supported
                                  Services].
                                  
                                  Example of threshold alarm:
                                  -----
                                  
                                      CpuUtilization[1m]{availabilityDoma
                                  in="cumS:PHX-AD-1"}.groupBy(availabilityDomain
                                  ).percentile(0.9) > 85
                                  
                                    -----
                                  
                                  Example of
                                  absence alarm:
                                  
                                    -----
                                  
                                      CpuUtilization[1m
                                  ]{availabilityDomain="cumS:PHX-AD-1"}.absent()
                                  ----- [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm delete [OPTIONS]

  Deletes the specified alarm. For important limits information, see [Limits
  on Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  --alarm-id TEXT                 The [OCID] of an alarm. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm get [OPTIONS]

  Gets the specified alarm. For important limits information, see [Limits on
  Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  --alarm-id TEXT   The [OCID] of an alarm. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm list [OPTIONS]

  Lists the alarms for the specified compartment. For important limits
  information, see [Limits on Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  resources monitored by the metric that you are
                                  searching for. Use tenancyId to search in the
                                  root compartment.
                                  
                                  Example:
                                  `ocid1.compartment.oc1..exampleuniqueID`
                                  [required]
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Default: 1000
                                  
                                  Example: 500
  --display-name TEXT             A filter to return only resources that match
                                  the given display name exactly. Use this
                                  filter to list an alarm by name.
                                  Alternatively, when you know the alarm OCID,
                                  use the GetAlarm operation.
  --lifecycle-state [ACTIVE|DELETING|DELETED]
                                  A filter to return only alarms that match the
                                  given lifecycle state exactly. When not
                                  specified, only alarms in the ACTIVE lifecycle
                                  state are listed.
  --sort-by [displayName|severity]
                                  The field to use when sorting returned alarm
                                  definitions. Only one sorting level is
                                  provided.
                                  
                                  Example: `severity`
  --sort-order [ASC|DESC]         The sort order to use when sorting returned
                                  alarm definitions. Ascending (ASC) or
                                  descending (DESC).
                                  
                                  Example: `ASC`
  --compartment-id-in-subtree BOOLEAN
                                  When true, returns resources from all
                                  compartments and subcompartments. The
                                  parameter can only be set to true when
                                  compartmentId is the tenancy OCID (the tenancy
                                  is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, returns
                                  resources from only the compartment specified
                                  in compartmentId. Default is false.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm update [OPTIONS]

  Updates the specified alarm.

Options:
  --alarm-id TEXT                 The [OCID] of an alarm. [required]
  --display-name TEXT             A user-friendly name for the alarm. It does
                                  not have to be unique, and it's changeable.
                                  Avoid entering confidential information.
                                  
                                  This
                                  name is sent as the title for notifications
                                  related to this alarm.
                                  
                                  Example: `High CPU
                                  Utilization`
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  alarm.
  --metric-compartment-id TEXT    The [OCID] of the compartment containing the
                                  metric being evaluated by the alarm.
  --metric-compartment-id-in-subtree BOOLEAN
                                  When true, the alarm evaluates metrics from
                                  all compartments and subcompartments. The
                                  parameter can only be set to true when
                                  metricCompartmentId is the tenancy OCID (the
                                  tenancy is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, the
                                  alarm evaluates metrics from only the
                                  compartment specified in metricCompartmentId.
                                  Default is false.
                                  
                                  Example: `true`
  --namespace TEXT                The source service or application emitting the
                                  metric that is evaluated by the alarm.
                                  Example: `oci_computeagent`
  --resource-group TEXT           Resource group that you want to use as a
                                  filter. The alarm retrieves metric data
                                  associated with the specified resource group
                                  only. Only one resource group can be applied
                                  per metric. A valid resourceGroup value starts
                                  with an alphabetical character and includes
                                  only alphanumeric characters, periods (.),
                                  underscores (_), hyphens (-), and dollar signs
                                  ($). Avoid entering confidential information.
                                  Example: `frontend-fleet`
  --resolution TEXT               The time between calculated aggregation
                                  windows for the alarm. Supported value: `1m`
  --pending-duration TEXT         The period of time that the condition defined
                                  in the alarm must persist before the alarm
                                  state changes from "OK" to "FIRING". For
                                  example, a value of 5 minutes means that the
                                  alarm must persist in breaching the condition
                                  for five minutes before the alarm updates its
                                  state to "FIRING".
                                  
                                  The duration is specified
                                  as a string in ISO 8601 format (`PT10M` for
                                  ten minutes or `PT1H` for one hour). Minimum:
                                  PT1M. Maximum: PT1H. Default: PT1M.
                                  
                                  Under the
                                  default value of PT1M, the first evaluation
                                  that breaches the alarm updates the state to
                                  "FIRING".
                                  
                                  The alarm updates its status to
                                  "OK" when the breaching condition has been
                                  clear for the most recent minute.
                                  
                                  Example:
                                  `PT5M`
  --severity TEXT                 The perceived severity of the alarm with
                                  regard to the affected system.
                                  
                                  Example:
                                  `CRITICAL`
  --body TEXT                     The human-readable content of the notification
                                  delivered. Oracle recommends providing
                                  guidance to operators for resolving the alarm
                                  condition. Consider adding links to standard
                                  runbook practices. Avoid entering confidential
                                  information.
                                  
                                  Example: `High CPU usage alert.
                                  Follow runbook instructions for resolution.`
  --destinations COMPLEX TYPE     A list of destinations to which the
                                  notifications for this alarm will be
                                  delivered. Each destination is represented by
                                  an [OCID] related to the supported destination
                                  service. For example, a destination using the
                                  Notifications service is represented by a
                                  topic OCID. Supported destination services:
                                  Notifications Service. Limit: One destination
                                  per supported destination service.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --repeat-notification-duration TEXT
                                  The frequency at which notifications are re-
                                  submitted, if the alarm keeps firing without
                                  interruption. Format defined by ISO 8601. For
                                  example, `PT4H` indicates four hours. Minimum:
                                  PT1M. Maximum: P30D.
                                  
                                  Default value: null
                                  (notifications are not re-submitted).
                                  Example: `PT2H`
  --suppression COMPLEX TYPE      The configuration details for suppressing an
                                  alarm.
                                  This is a complex type whose value must
                                  be valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --is-enabled BOOLEAN            Whether the alarm is enabled.
                                  
                                  Example: `true`
  --freeform-tags COMPLEX TYPE    Simple key-value pair that is applied without
                                  any predefined name, type or scope. Exists for
                                  cross-compatibility only. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Usage of predefined tag keys. These predefined
                                  keys are scoped to namespaces. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --query-text TEXT               The Monitoring Query Language (MQL) expression
                                  to evaluate for the alarm. The Alarms feature
                                  of the Monitoring service interprets results
                                  for each returned time series as Boolean
                                  values, where zero represents false and a non-
                                  zero value represents true. A true value means
                                  that the trigger rule condition has been met.
                                  The query must specify a metric, statistic,
                                  interval, and trigger rule (threshold or
                                  absence). Supported values for interval:
                                  `1m`-`60m` (also `1h`). You can optionally
                                  specify dimensions and grouping functions.
                                  Supported grouping functions: `grouping()`,
                                  `groupBy()`. For details about Monitoring
                                  Query Language (MQL), see [Monitoring Query
                                  Language (MQL) Reference]. For available
                                  dimensions, review the metric definition for
                                  the supported service. See [Supported
                                  Services].
                                  
                                  Example of threshold alarm:
                                  -----
                                  
                                      CpuUtilization[1m]{availabilityDoma
                                  in="cumS:PHX-AD-1"}.groupBy(availabilityDomain
                                  ).percentile(0.9) > 85
                                  
                                    -----
                                  
                                  Example of
                                  absence alarm:
                                  
                                    -----
                                  
                                      CpuUtilization[1m
                                  ]{availabilityDomain="cumS:PHX-AD-1"}.absent()
                                  -----
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm-history-collection --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm-history-collection [OPTIONS] COMMAND [ARGS]...

  The configuration details for retrieving alarm history.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get-alarm-history  Get the history of the specified alarm.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm-history-collection get-alarm-history --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm-history-collection get-alarm-history 
           [OPTIONS]

  Get the history of the specified alarm. For important limits information,
  see [Limits on Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  --alarm-id TEXT                 The [OCID] of an alarm. [required]
  --alarm-historytype [STATE_HISTORY|STATE_TRANSITION_HISTORY]
                                  The type of history entries to retrieve. State
                                  history (STATE_HISTORY) or state transition
                                  history (STATE_TRANSITION_HISTORY). If not
                                  specified, entries of both types are
                                  retrieved.
                                  
                                  Example: `STATE_HISTORY`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Default: 1000
                                  
                                  Example: 500
  --timestamp-greater-than-or-equal-to DATETIME
                                  A filter to return only alarm history entries
                                  with timestamps occurring on or after the
                                  specified date and time. Format defined by
                                  RFC3339.
                                  
                                  Example: `2019-01-01T01:00:00.789Z`
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --timestamp-less-than DATETIME  A filter to return only alarm history entries
                                  with timestamps occurring before the specified
                                  date and time. Format defined by RFC3339.
                                  Example: `2019-01-02T01:00:00.789Z`
                                  
                                  The
                                  following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm-status --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm-status [OPTIONS] COMMAND [ARGS]...

  A summary of properties for the specified alarm and its current evaluation
  status. For information about alarms, see [Alarms Overview].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

  For information about endpoints and signing API requests, see [About the
  API]. For information about available SDKs and tools, see [SDKS and Other
  Tools].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list-alarms-status  List the status of each alarm in the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring alarm-status list-alarms-status --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring alarm-status list-alarms-status [OPTIONS]

  List the status of each alarm in the specified compartment. For important
  limits information, see [Limits on Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  resources monitored by the metric that you are
                                  searching for. Use tenancyId to search in the
                                  root compartment.
                                  
                                  Example:
                                  `ocid1.compartment.oc1..exampleuniqueID`
                                  [required]
  --compartment-id-in-subtree BOOLEAN
                                  When true, returns resources from all
                                  compartments and subcompartments. The
                                  parameter can only be set to true when
                                  compartmentId is the tenancy OCID (the tenancy
                                  is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, returns
                                  resources from only the compartment specified
                                  in compartmentId. Default is false.
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Default: 1000
                                  
                                  Example: 500
  --display-name TEXT             A filter to return only resources that match
                                  the given display name exactly. Use this
                                  filter to list an alarm by name.
                                  Alternatively, when you know the alarm OCID,
                                  use the GetAlarm operation.
  --sort-by [displayName|severity]
                                  The field to use when sorting returned alarm
                                  definitions. Only one sorting level is
                                  provided.
                                  
                                  Example: `severity`
  --sort-order [ASC|DESC]         The sort order to use when sorting returned
                                  alarm definitions. Ascending (ASC) or
                                  descending (DESC).
                                  
                                  Example: `ASC`
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring metric --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring metric [OPTIONS] COMMAND [ARGS]...

  The properties that define a metric. For information about metrics, see
  [Metrics Overview].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Returns metric definitions that match the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring metric list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring metric list [OPTIONS]

  Returns metric definitions that match the criteria specified in the request.
  Compartment OCID required. For information about metrics, see [Metrics
  Overview]. For important limits information, see [Limits on Monitoring].

  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  resources monitored by the metric that you are
                                  searching for. Use tenancyId to search in the
                                  root compartment.
                                  
                                  Example:
                                  `ocid1.compartment.oc1..exampleuniqueID`
                                  [required]
  --name TEXT                     The metric name to use when searching for
                                  metric definitions.
                                  
                                  Example: `CpuUtilization`
  --namespace TEXT                The source service or application to use when
                                  searching for metric definitions.
                                  
                                  Example:
                                  `oci_computeagent`
  --resource-group TEXT           Resource group that you want to use as a
                                  filter. The specified resource group must
                                  exist in the definition of the posted metric.
                                  Only one resource group can be applied per
                                  metric. A valid resourceGroup value starts
                                  with an alphabetical character and includes
                                  only alphanumeric characters, periods (.),
                                  underscores (_), hyphens (-), and dollar signs
                                  ($). Avoid entering confidential information.
                                  Example: `frontend-fleet`
  --dimension-filters COMPLEX TYPE
                                  Qualifiers that you want to use when searching
                                  for metric definitions. Available dimensions
                                  vary by metric namespace. Each dimension takes
                                  the form of a key-value pair.
                                  
                                  Example: {
                                  "resourceId":
                                  "<var>&lt;instance_OCID&gt;</var>" }
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --group-by COMPLEX TYPE         Group metrics by these fields in the response.
                                  For example, to list all metric namespaces
                                  available           in a compartment, groupBy
                                  the "namespace" field. Supported fields:
                                  namespace, name, resourceGroup.
                                  
                                  Example -
                                  group by namespace: `[ "namespace" ]`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --sort-by [NAMESPACE|NAME|RESOURCEGROUP]
                                  The field to use when sorting returned metric
                                  definitions. Only one sorting level is
                                  provided.
                                  
                                  Example: `NAMESPACE`
  --sort-order [ASC|DESC]         The sort order to use when sorting returned
                                  metric definitions. Ascending (ASC) or
                                  descending (DESC).
                                  
                                  Example: `ASC`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Default: 1000
                                  
                                  Example: 500
  --compartment-id-in-subtree BOOLEAN
                                  When true, returns resources from all
                                  compartments and subcompartments. The
                                  parameter can only be set to true when
                                  compartmentId is the tenancy OCID (the tenancy
                                  is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, returns
                                  resources from only the compartment specified
                                  in compartmentId. Default is false.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring metric-data --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring metric-data [OPTIONS] COMMAND [ARGS]...

  The set of aggregated data returned for a metric. For information about
  metrics, see [Metrics Overview].

  Limits information for returned data follows.

  * Data points: 100,000. * Metric streams* within data points: 2,000. * Time
  range returned for 1-hour resolution: 90 days. * Time range returned for
  5-minute resolution: 30 days. * Time range returned for any other
  resolution: 7 days.

  *A metric stream is an individual set of aggregated data for a metric,
  typically specific to a single resource. Metric streams cannot be aggregated
  across metric groups. A metric group is the combination of a given metric,
  metric namespace, and tenancy for the purpose of determining limits. For
  more information about metric-related concepts, see [Monitoring Concepts].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  post                    Publishes raw metric data points to the...
  summarize-metrics-data  Returns aggregated data that match the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring metric-data post --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring metric-data post [OPTIONS]

  Publishes raw metric data points to the Monitoring service. For more
  information about publishing metrics, see [Publishing Custom Metrics]. For
  important limits information, see [Limits on Monitoring].

  Per-call limits information follows.

  * Dimensions per metric group*. Maximum: 20. Minimum: 1. * Unique metric
  streams*. Maximum: 50. * Transactions Per Second (TPS) per-tenancy limit for
  this operation: 50.

  *A metric group is the combination of a given metric, metric namespace, and
  tenancy for the purpose of determining limits. A dimension is a qualifier
  provided in a metric definition. A metric stream is an individual set of
  aggregated data for a metric, typically specific to a resource. For more
  information about metric-related concepts, see [Monitoring Concepts].

  The endpoints for this operation differ from other Monitoring operations.
  Replace the string `telemetry` with `telemetry-ingestion` in the endpoint,
  as in the following example:

  https://telemetry-ingestion.eu-frankfurt-1.oraclecloud.com

Options:
  --metric-data COMPLEX TYPE      A metric object containing raw metric data
                                  points to be posted to the Monitoring service.
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --batch-atomicity [ATOMIC|NON_ATOMIC]
                                  Batch atomicity behavior. Requires either
                                  partial or full pass of input validation for
                                  metric objects in PostMetricData requests. The
                                  default value of NON_ATOMIC requires a partial
                                  pass: at least one metric object in the
                                  request must pass input validation, and any
                                  objects that failed validation are identified
                                  in the returned summary, along with their
                                  error messages. A value of ATOMIC requires a
                                  full pass: all metric objects in the request
                                  must pass input validation.
                                  
                                  Example:
                                  `NON_ATOMIC`
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring metric-data summarize-metrics-data --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring metric-data summarize-metrics-data [OPTIONS]

  Returns aggregated data that match the criteria specified in the request.
  Compartment OCID required. For information on metric queries, see [Building
  Metric Queries].

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment containing the
                                  resources monitored by the metric that you are
                                  searching for. Use tenancyId to search in the
                                  root compartment.
                                  
                                  Example:
                                  `ocid1.compartment.oc1..exampleuniqueID`
                                  [required]
  --namespace TEXT                The source service or application to use when
                                  searching for metric data points to aggregate.
                                  Example: `oci_computeagent` [required]
  --resource-group TEXT           Resource group that you want to use as a
                                  filter. The specified resource group must
                                  exist in the definition of the posted metric.
                                  Only one resource group can be applied per
                                  metric. A valid resourceGroup value starts
                                  with an alphabetical character and includes
                                  only alphanumeric characters, periods (.),
                                  underscores (_), hyphens (-), and dollar signs
                                  ($). Avoid entering confidential information.
                                  Example: `frontend-fleet`
  --start-time DATETIME           The beginning of the time range to use when
                                  searching for metric data points. Format is
                                  defined by RFC3339. The response includes
                                  metric data points for the startTime. Default
                                  value: the timestamp 3 hours before the call
                                  was sent.
                                  
                                  Example: `2019-02-01T01:02:29.600Z`
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --end-time DATETIME             The end of the time range to use when
                                  searching for metric data points. Format is
                                  defined by RFC3339. The response excludes
                                  metric data points for the endTime. Default
                                  value: the timestamp representing when the
                                  call was sent.
                                  
                                  Example:
                                  `2019-02-01T02:02:29.600Z`
                                  
                                  The following
                                  datetime formats are supported:
                                  
                                  UTC with
                                  milliseconds
                                  ***********************
                                  Format:
                                  YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --resolution TEXT               The time between calculated aggregation
                                  windows. Use with the query interval to vary
                                  the frequency at which aggregated data points
                                  are returned. For example, use a query
                                  interval of 5 minutes with a resolution of 1
                                  minute to retrieve five-minute aggregations at
                                  a one-minute frequency. The resolution must be
                                  equal or less than the interval in the query.
                                  The default resolution is 1m (one minute).
                                  Supported values: `1m`-`60m` (also `1h`).
                                  Example: `5m`
  --compartment-id-in-subtree BOOLEAN
                                  When true, returns resources from all
                                  compartments and subcompartments. The
                                  parameter can only be set to true when
                                  compartmentId is the tenancy OCID (the tenancy
                                  is the root compartment). A true value
                                  requires the user to have tenancy-level
                                  permissions. If this requirement is not met,
                                  then the call is rejected. When false, returns
                                  resources from only the compartment specified
                                  in compartmentId. Default is false.
  --query-text TEXT               The Monitoring Query Language (MQL) expression
                                  to use when searching for metric data points
                                  to aggregate. The query must specify a metric,
                                  statistic, and interval. Supported values for
                                  interval: `1m`-`60m` (also `1h`). You can
                                  optionally specify dimensions and grouping
                                  functions. Supported grouping functions:
                                  `grouping()`, `groupBy()`. For details about
                                  Monitoring Query Language (MQL), see
                                  [Monitoring Query Language (MQL) Reference].
                                  For available dimensions, review the metric
                                  definition for the supported service. See
                                  [Supported Services].
                                  
                                  Example:
                                  `CpuUtilization[1m].sum()` [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring suppression --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring suppression [OPTIONS] COMMAND [ARGS]...

  The configuration details for suppressing an alarm. For information about
  alarms, see [Alarms Overview].

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  remove  Removes any existing suppression for the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci monitoring suppression remove --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci monitoring suppression remove [OPTIONS]

  Removes any existing suppression for the specified alarm. For important
  limits information, see [Limits on Monitoring].

  This call is subject to a Monitoring limit that applies to the total number
  of requests across all alarm operations. Monitoring might throttle this call
  to reject an otherwise valid request when the total rate of alarm operations
  exceeds 10 requests, or transactions, per second (TPS) for a given tenancy.

Options:
  --alarm-id TEXT   The [OCID] of an alarm. [required]
  --if-match TEXT   For optimistic concurrency control. In the PUT or DELETE
                    call for a resource, set the `if-match` parameter to the
                    value of the etag from a previous GET or POST response for
                    that resource.  The resource will be updated or deleted only
                    if the etag you provide matches the resource's current etag
                    value.
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

