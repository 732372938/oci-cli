CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'oda' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda --help
Usage: oci oda [OPTIONS] COMMAND [ARGS]...

  CLI to create and maintain Oracle Digital Assistant service instances.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  instance                Description of `OdaServiceInstance` object.
  work-request            The description of work request, including...
  work-request-error      Description of the unexpected error that...
  work-request-log-entry  A log message from the execution of a work...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance --help
Usage: oci oda instance [OPTIONS] COMMAND [ARGS]...

  Description of `OdaServiceInstance` object.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  change-compartment  Moves an Digital Assistant instance into a...
  create              Starts an asynchronous job to create a...
  delete              Starts an asynchronous job to delete the...
  get                 Gets the specified Digital Assistant...
  list                Returns a page of Digital Assistant instances...
  update              Updates the specified Digital Assistant...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance change-compartment --help
Usage: oci oda instance change-compartment [OPTIONS]

  Moves an Digital Assistant instance into a different compartment. When
  provided, If-Match is checked against ETag values of the resource.

Options:
  --oda-instance-id TEXT          Unique Digital Assistant instance identifier.
                                  [required]
  -c, --compartment-id TEXT       Identifier of the compartment into which the
                                  Digital Assistant instance should be moved.
                                  [required]
  --if-match TEXT                 For optimistic concurrency control in a PUT or
                                  DELETE call for a Digital Assistant instance,
                                  set the `if-match` query parameter to the
                                  value of the `ETAG` header from a previous GET
                                  or POST response for that instance. The
                                  service updates or deletes the instance only
                                  if the etag that you provide matches the
                                  instance's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|SUCCEEDED|FAILED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. Multiple states can
                                  be specified, returning on the first state.
                                  For example, --wait-for-state SUCCEEDED
                                  --wait-for-state FAILED would return on
                                  whichever lifecycle state is reached first. If
                                  timeout is reached, a return code of 2 is
                                  returned. For any other error, a return code
                                  of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance create --help
Usage: oci oda instance create [OPTIONS]

  Starts an asynchronous job to create a Digital Assistant instance.

  To monitor the status of the job, take the `opc-work-request-id` response
  header value and use it to call `GET /workRequests/{workRequestID}`.

Options:
  -c, --compartment-id TEXT       Identifier of the compartment. [required]
  --shape-name [DEVELOPMENT|PRODUCTION]
                                  Shape or size of the instance. [required]
  --display-name TEXT             User-friendly name for the instance. Avoid
                                  entering confidential information. You can
                                  change this value anytime.
  --description TEXT              Description of the Digital Assistant instance.
  --freeform-tags COMPLEX TYPE    Simple key-value pair that is applied without
                                  any predefined name, type or scope. Exists for
                                  cross-compatibility only. Example: `{"bar-
                                  key": "value"}`
                                  This is a complex type whose
                                  value must be valid JSON. The value can be
                                  provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Usage of predefined tag keys. These predefined
                                  keys are scoped to namespaces. Example:
                                  `{"foo-namespace": {"bar-key": "value"}}`
                                  This
                                  is a complex type whose value must be valid
                                  JSON. The value can be provided as a string on
                                  the command line or passed in as a file using
                                  the file://path/to/file syntax.
                                  
                                  The
                                  --generate-param-json-input option can be used
                                  to generate an example of the JSON which must
                                  be provided. We recommend storing this example
                                  in a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACCEPTED|IN_PROGRESS|SUCCEEDED|FAILED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. Multiple states can
                                  be specified, returning on the first state.
                                  For example, --wait-for-state SUCCEEDED
                                  --wait-for-state FAILED would return on
                                  whichever lifecycle state is reached first. If
                                  timeout is reached, a return code of 2 is
                                  returned. For any other error, a return code
                                  of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance delete --help
Usage: oci oda instance delete [OPTIONS]

  Starts an asynchronous job to delete the specified Digital Assistant
  instance. To monitor the status of the job, take the `opc-work-request-id`
  response header value and use it to call `GET
  /workRequests/{workRequestID}`.

Options:
  --oda-instance-id TEXT          Unique Digital Assistant instance identifier.
                                  [required]
  --if-match TEXT                 For optimistic concurrency control in a PUT or
                                  DELETE call for a Digital Assistant instance,
                                  set the `if-match` query parameter to the
                                  value of the `ETAG` header from a previous GET
                                  or POST response for that instance. The
                                  service updates or deletes the instance only
                                  if the etag that you provide matches the
                                  instance's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|SUCCEEDED|FAILED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. Multiple states can
                                  be specified, returning on the first state.
                                  For example, --wait-for-state SUCCEEDED
                                  --wait-for-state FAILED would return on
                                  whichever lifecycle state is reached first. If
                                  timeout is reached, a return code of 2 is
                                  returned. For any other error, a return code
                                  of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance get --help
Usage: oci oda instance get [OPTIONS]

  Gets the specified Digital Assistant instance.

Options:
  --oda-instance-id TEXT  Unique Digital Assistant instance identifier.
                          [required]
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance list --help
Usage: oci oda instance list [OPTIONS]

  Returns a page of Digital Assistant instances that belong to the specified
  compartment.

  If the `opc-next-page` header appears in the response, then there are more
  items to retrieve. To get the next page in the subsequent GET request,
  include the header's value as the `page` query parameter.

Options:
  -c, --compartment-id TEXT       List the Digital Assistant instances that
                                  belong to this compartment. [required]
  --display-name TEXT             List only the information for the Digital
                                  Assistant instance with this user-friendly
                                  name. These names don't have to be unique and
                                  may change.
                                  
                                  Example: `My new resource`
  --lifecycle-state [CREATING|UPDATING|ACTIVE|INACTIVE|DELETING|DELETED|FAILED]
                                  List only the Digital Assistant instances that
                                  are in this lifecycle state.
  --limit INTEGER                 The maximum number of items to return per
                                  page.
  --page TEXT                     The page at which to start retrieving results.
                                  You get this value from the `opc-next-page`
                                  header in a previous list request. To retireve
                                  the first page, omit this query parameter.
                                  Example: `MToxMA==`
  --sort-order [ASC|DESC]         Sort the results in this order, use either
                                  `ASC` (ascending) or `DESC` (descending).
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  Sort on this field. You can specify one sort
                                  order only. The default sort field is
                                  `TIMECREATED`.
                                  
                                  The default sort order for
                                  `TIMECREATED` is descending, and the default
                                  sort order for `DISPLAYNAME` is ascending.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda instance update --help
Usage: oci oda instance update [OPTIONS]

  Updates the specified Digital Assistant instance with the information in the
  request body.

Options:
  --oda-instance-id TEXT          Unique Digital Assistant instance identifier.
                                  [required]
  --display-name TEXT             User-friendly name for the Digital Assistant
                                  instance.
  --description TEXT              Description of the Digital Assistant instance.
  --freeform-tags COMPLEX TYPE    Simple key-value pair that is applied without
                                  any predefined name, type or scope. Exists for
                                  cross-compatibility only. Example: `{"bar-
                                  key": "value"}`
                                  This is a complex type whose
                                  value must be valid JSON. The value can be
                                  provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Usage of predefined tag keys. These predefined
                                  keys are scoped to namespaces. Example:
                                  `{"foo-namespace": {"bar-key": "value"}}`
                                  This
                                  is a complex type whose value must be valid
                                  JSON. The value can be provided as a string on
                                  the command line or passed in as a file using
                                  the file://path/to/file syntax.
                                  
                                  The
                                  --generate-param-json-input option can be used
                                  to generate an example of the JSON which must
                                  be provided. We recommend storing this example
                                  in a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control in a PUT or
                                  DELETE call for a Digital Assistant instance,
                                  set the `if-match` query parameter to the
                                  value of the `ETAG` header from a previous GET
                                  or POST response for that instance. The
                                  service updates or deletes the instance only
                                  if the etag that you provide matches the
                                  instance's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|UPDATING|ACTIVE|INACTIVE|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request --help
Usage: oci oda work-request [OPTIONS] COMMAND [ARGS]...

  The description of work request, including its status.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get   Gets information about the work request with...
  list  Returns a page of work requests for the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request get --help
Usage: oci oda work-request get [OPTIONS]

  Gets information about the work request with the specified ID, including its
  status.

  You can use this operation to monitor the status of jobs that you requested
  to create, delete, and update instances.

Options:
  --work-request-id TEXT  The identifier of the asynchronous work request.
                          [required]
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request list --help
Usage: oci oda work-request list [OPTIONS]

  Returns a page of work requests for the specified compartment.

  If the `opc-next-page` header appears in the response, then there are more
  items to retrieve. To get the next page in the subsequent GET request,
  include the header's value as the `page` query parameter.

Options:
  -c, --compartment-id TEXT       List the Digital Assistant instances that
                                  belong to this compartment. [required]
  --oda-instance-id TEXT          List only the information for this Digital
                                  Assistant instance.
  --page TEXT                     The page at which to start retrieving results.
                                  You get this value from the `opc-next-page`
                                  header in a previous list request. To retireve
                                  the first page, omit this query parameter.
                                  Example: `MToxMA==`
  --limit INTEGER                 The maximum number of items to return per
                                  page.
  --sort-by [OPERATION_TYPE|STATUS|TIME_ACCEPTED|TIME_STARTED|TIME_FINISHED]
                                  The field to sort by. You can specify only one
                                  sort order. If no value is specified, then the
                                  default is `TIME_ACCEPTED`.
                                  
                                  The default sort
                                  order for the time fields is descending. The
                                  default order for `DISPLAYNAME` and `STATUS`
                                  is ascending.default: TIME_ACCEPTED
  --sort-order [ASC|DESC]         Sort the results in this order, use either
                                  `ASC` (ascending) or `DESC` (descending).
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request-error --help
Usage: oci oda work-request-error [OPTIONS] COMMAND [ARGS]...

  Description of the unexpected error that prevented completion of the
  request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Returns a page of errors for the specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request-error list --help
Usage: oci oda work-request-error list [OPTIONS]

  Returns a page of errors for the specified work request.

  If the `opc-next-page` header appears in the response, then there are more
  items to retrieve. To get the next page in the subsequent GET request,
  include the header's value as the `page` query parameter.

Options:
  --work-request-id TEXT      The identifier of the asynchronous work request.
                              [required]
  --page TEXT                 The page at which to start retrieving results.
                              You get this value from the `opc-next-page` header
                              in a previous list request. To retireve the first
                              page, omit this query parameter.
                              
                              Example:
                              `MToxMA==`
  --limit INTEGER             The maximum number of items to return per page.
  --sort-by [CODE|TIMESTAMP]  The field to sort by. You can specify only one
                              sort order. If no value is specified, then the
                              default is `TIMESTAMP`.
                              
                              The default sort order
                              for both `TIMESTAMP` and `CODE` is ascending.
  --sort-order [ASC|DESC]     Sort the results in this order, use either `ASC`
                              (ascending) or `DESC` (descending).
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request-log-entry --help
Usage: oci oda work-request-log-entry [OPTIONS] COMMAND [ARGS]...

  A log message from the execution of a work request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Returns a page of of log messages for a given...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci oda work-request-log-entry list --help
Usage: oci oda work-request-log-entry list [OPTIONS]

  Returns a page of of log messages for a given work request.

  If the `opc-next-page` header appears in the response, then there are more
  items to retrieve. To get the next page in the subsequent GET request,
  include the header's value as the `page` query parameter.

Options:
  --work-request-id TEXT         The identifier of the asynchronous work
                                 request. [required]
  --page TEXT                    The page at which to start retrieving results.
                                 You get this value from the `opc-next-page`
                                 header in a previous list request. To retireve
                                 the first page, omit this query parameter.
                                 Example: `MToxMA==`
  --limit INTEGER                The maximum number of items to return per page.
  --sort-by [MESSAGE|TIMESTAMP]  The field to sort by. You can specify only one
                                 sort order. If no value is specified, then the
                                 default is `TIMESTAMP`.
                                 
                                 The default sort order
                                 for both `TIMESTAMP` and `MESSAGE` is
                                 ascending.
  --sort-order [ASC|DESC]        Sort the results in this order, use either
                                 `ASC` (ascending) or `DESC` (descending).
  --all                          Fetches all pages of results. If you provide
                                 this option, then you cannot provide the
                                 --limit option.
  --page-size INTEGER            When fetching results, the number of results to
                                 fetch per call. Only valid when used with --all
                                 or --limit, and ignored otherwise.
  --from-json TEXT               Provide input to this command as a JSON
                                 document from a file using the file://path-
                                 to/file syntax.
                                 
                                 The --generate-full-command-
                                 json-input option can be used to generate a
                                 sample json file to be used with this command
                                 option. The key names are pre-populated and
                                 match the command option names (converted to
                                 camelCase format, e.g. compartment-id -->
                                 compartmentId), while the values of the keys
                                 need to be populated by the user before using
                                 the sample file as an input to this command.
                                 For any command option that accepts multiple
                                 values, the value of the key can be a JSON
                                 array.
                                 
                                 Options can still be provided on the
                                 command line. If an option exists in both the
                                 JSON document and the command line then the
                                 command line specified value will be used.
                                 
                                 For
                                 examples on usage of this option, please see
                                 our "using CLI with advanced JSON options"
                                 link: https://docs.cloud.oracle.com/iaas/Conten
                                 t/API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help                 For detailed help on any of these individual
                                 commands, enter <command> --help.

