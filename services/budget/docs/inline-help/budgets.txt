CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'budgets' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets [OPTIONS] COMMAND [ARGS]...

  Use the Budgets CLI to manage budgets and budget alerts.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  alert-rule  The alert rule.
  budget      A budget.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule [OPTIONS] COMMAND [ARGS]...

  The alert rule.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Creates a new Alert Rule.
  delete  Deletes a specified Alert Rule resource.
  get     Gets an Alert Rule for a specified Budget.
  list    Returns a list of Alert Rules for a specified...
  update  Update an Alert Rule for the budget...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule create [OPTIONS]

  Creates a new Alert Rule.

Options:
  --budget-id TEXT                The unique Budget OCID [required]
  --type [ACTUAL|FORECAST]        Type of alert. Valid values are ACTUAL (the
                                  alert will trigger based on actual usage) or
                                  FORECAST (the alert will trigger based on
                                  predicted usage). [required]
  --threshold FLOAT               The threshold for triggering the alert
                                  expressed as a whole number or decimal value.
                                  If thresholdType is ABSOLUTE, threshold can
                                  have at most 12 digits before the decimal
                                  point and up to 2 digits after the decimal
                                  point. If thresholdType is PERCENTAGE, the
                                  maximum value is 10000 and can have up to 2
                                  digits after the decimal point. [required]
  --threshold-type [PERCENTAGE|ABSOLUTE]
                                  The type of threshold. [required]
  --recipients TEXT               The audience that will received the alert when
                                  it triggers. [required]
  --display-name TEXT             The name of the alert rule.
  --description TEXT              The description of the alert rule.
  --message TEXT                  The message to be sent to the recipients when
                                  alert rule is triggered.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACTIVE|INACTIVE]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule delete [OPTIONS]

  Deletes a specified Alert Rule resource.

Options:
  --budget-id TEXT      The unique Budget OCID [required]
  --alert-rule-id TEXT  The unique Alert Rule OCID [required]
  --if-match TEXT       For optimistic concurrency control. In the PUT or DELETE
                        call for a resource, set the `if-match` parameter to the
                        value of the etag from a previous GET or POST response
                        for that resource. The resource will be updated or
                        deleted only if the etag you provide matches the
                        resource's current etag value.
  --force               Perform deletion without prompting for confirmation.
  --from-json TEXT      Provide input to this command as a JSON document from a
                        file using the file://path-to/file syntax.
                        
                        The
                        --generate-full-command-json-input option can be used to
                        generate a sample json file to be used with this command
                        option. The key names are pre-populated and match the
                        command option names (converted to camelCase format,
                        e.g. compartment-id --> compartmentId), while the values
                        of the keys need to be populated by the user before
                        using the sample file as an input to this command. For
                        any command option that accepts multiple values, the
                        value of the key can be a JSON array.
                        
                        Options can still
                        be provided on the command line. If an option exists in
                        both the JSON document and the command line then the
                        command line specified value will be used.
                        
                        For examples
                        on usage of this option, please see our "using CLI with
                        advanced JSON options" link: https://docs.cloud.oracle.c
                        om/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOpt
                        ions
  -?, -h, --help        For detailed help on any of these individual commands,
                        enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule get [OPTIONS]

  Gets an Alert Rule for a specified Budget.

Options:
  --budget-id TEXT      The unique Budget OCID [required]
  --alert-rule-id TEXT  The unique Alert Rule OCID [required]
  --from-json TEXT      Provide input to this command as a JSON document from a
                        file using the file://path-to/file syntax.
                        
                        The
                        --generate-full-command-json-input option can be used to
                        generate a sample json file to be used with this command
                        option. The key names are pre-populated and match the
                        command option names (converted to camelCase format,
                        e.g. compartment-id --> compartmentId), while the values
                        of the keys need to be populated by the user before
                        using the sample file as an input to this command. For
                        any command option that accepts multiple values, the
                        value of the key can be a JSON array.
                        
                        Options can still
                        be provided on the command line. If an option exists in
                        both the JSON document and the command line then the
                        command line specified value will be used.
                        
                        For examples
                        on usage of this option, please see our "using CLI with
                        advanced JSON options" link: https://docs.cloud.oracle.c
                        om/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOpt
                        ions
  -?, -h, --help        For detailed help on any of these individual commands,
                        enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule list [OPTIONS]

  Returns a list of Alert Rules for a specified Budget.

Options:
  --budget-id TEXT         The unique Budget OCID [required]
  --limit INTEGER          The maximum number of items to return.
  --page TEXT              The page token representing the page at which to
                           start retrieving results. This is usually retrieved
                           from a previous list call.
  --sort-order [ASC|DESC]  The sort order to use, either 'asc' or 'desc'.
  --sort-by TEXT           The field to sort by. If not specified, the default
                           is timeCreated. The default sort order for
                           timeCreated is DESC. The default sort order for
                           displayName is ASC in alphanumeric order.
  --lifecycle-state TEXT   The current state of the resource to filter by.
  --display-name TEXT      A user-friendly name. Does not have to be unique, and
                           it's changeable.
                           
                           Example: `My new resource`
  --all                    Fetches all pages of results. If you provide this
                           option, then you cannot provide the --limit option.
  --page-size INTEGER      When fetching results, the number of results to fetch
                           per call. Only valid when used with --all or --limit,
                           and ignored otherwise.
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets alert-rule update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets alert-rule update [OPTIONS]

  Update an Alert Rule for the budget identified by the OCID.

Options:
  --budget-id TEXT                The unique Budget OCID [required]
  --alert-rule-id TEXT            The unique Alert Rule OCID [required]
  --display-name TEXT             The name of the alert rule.
  --type [ACTUAL|FORECAST]        Type of alert. Valid values are ACTUAL (the
                                  alert will trigger based on actual usage) or
                                  FORECAST (the alert will trigger based on
                                  predicted usage).
  --threshold FLOAT               The threshold for triggering the alert
                                  expressed as a whole number or decimal value.
                                  If thresholdType is ABSOLUTE, threshold can
                                  have at most 12 digits before the decimal
                                  point and up to 2 digits after the decimal
                                  point. If thresholdType is PERCENTAGE, the
                                  maximum value is 10000 and can have up to 2
                                  digits after the decimal point.
  --threshold-type [PERCENTAGE|ABSOLUTE]
                                  The type of threshold.
  --recipients TEXT               The audience that will received the alert when
                                  it triggers.
  --description TEXT              The description of the alert rule
  --message TEXT                  The message to be delivered to the recipients
                                  when alert is triggered
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource. The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|INACTIVE]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget [OPTIONS] COMMAND [ARGS]...

  A budget.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Creates a new Budget.
  delete  Deletes a specified Budget resource
  get     Gets a Budget by identifier
  list    Gets a list of Budgets in a compartment.
  update  Update a Budget identified by the OCID

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget create [OPTIONS]

  Creates a new Budget.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment [required]
  --amount FLOAT                  The amount of the budget expressed as a whole
                                  number in the currency of the customer's rate
                                  card. [required]
  --reset-period [MONTHLY]        The reset period for the budget. [required]
  --target-compartment-id TEXT    This is DEPRECTAED. Set the target compartment
                                  id in targets instead.
  --display-name TEXT             The displayName of the budget.
  --description TEXT              The description of the budget.
  --target-type [COMPARTMENT|TAG]
                                  The type of target on which the budget is
                                  applied.
  --targets COMPLEX TYPE          The list of targets on which the budget is
                                  applied.   If targetType is "COMPARTMENT",
                                  targets contains list of compartment OCIDs.
                                  If targetType is "TAG", targets contains list
                                  of tag identifiers in the form of
                                  "{tagNamespace}.{tagKey}.{tagValue}".
                                  Curerntly, the array should contain EXACT ONE
                                  item.
                                  This is a complex type whose value must
                                  be valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACTIVE|INACTIVE]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget delete [OPTIONS]

  Deletes a specified Budget resource

Options:
  --budget-id TEXT                The unique Budget OCID [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource. The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|INACTIVE]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget get [OPTIONS]

  Gets a Budget by identifier

Options:
  --budget-id TEXT  The unique Budget OCID [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget list [OPTIONS]

  Gets a list of Budgets in a compartment.

  By default, ListBudgets returns budgets of 'COMPARTMENT' target type and the
  budget records with only ONE target compartment OCID.

  To list ALL budgets, set the targetType query parameter to ALL. Example:
  'targetType=ALL'

  Additional targetTypes would be available in future releases. Clients should
  ignore new targetType or upgrade to latest version of client SDK to handle
  new targetType.

Options:
  -c, --compartment-id TEXT       The ID of the compartment in which to list
                                  resources. [required]
  --limit INTEGER                 The maximum number of items to return.
  --page TEXT                     The page token representing the page at which
                                  to start retrieving results. This is usually
                                  retrieved from a previous list call.
  --sort-order [ASC|DESC]         The sort order to use, either 'asc' or 'desc'.
  --sort-by TEXT                  The field to sort by. If not specified, the
                                  default is timeCreated. The default sort order
                                  for timeCreated is DESC. The default sort
                                  order for displayName is ASC in alphanumeric
                                  order.
  --lifecycle-state TEXT          The current state of the resource to filter
                                  by.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable.
                                  
                                  Example: `My new
                                  resource`
  --target-type [ALL|COMPARTMENT|TAG]
                                  The type of target to filter by.   * ALL -
                                  List all budgets   * COMPARTMENT - List all
                                  budgets with targetType == "COMPARTMENT"   *
                                  TAG - List all budgets with targetType ==
                                  "TAG"
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci budgets budget update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci budgets budget update [OPTIONS]

  Update a Budget identified by the OCID

Options:
  --budget-id TEXT                The unique Budget OCID [required]
  --display-name TEXT             The displayName of the budget.
  --description TEXT              The description of the budget.
  --amount FLOAT                  The amount of the budget expressed as a whole
                                  number in the currency of the customer's rate
                                  card.
  --reset-period [MONTHLY]        The reset period for the budget.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource. The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|INACTIVE]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

