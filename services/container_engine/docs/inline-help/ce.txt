CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'ce' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce --help
Usage: oci ce [OPTIONS] COMMAND [ARGS]...

  CLI for the Container Engine for Kubernetes service. Use this CLI to build,
  deploy, and manage cloud-native applications. For more information, see
  [Overview of Container Engine for
  Kubernetes](/iaas/Content/ContEng/Concepts/contengoverview.htm).

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  cluster                 A Kubernetes cluster.
  cluster-options         Options for creating or updating clusters.
  node-pool               A pool of compute nodes attached to a...
  node-pool-options       Options for creating or updating node pools.
  work-request            An asynchronous work request.
  work-request-error      Errors related to a specific work request.
  work-request-log-entry  Log entries related to a specific work...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster --help
Usage: oci ce cluster [OPTIONS] COMMAND [ARGS]...

  A Kubernetes cluster. Avoid entering confidential information.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create             Create a new cluster.
  create-kubeconfig  Create the Kubeconfig YAML for a cluster.
  delete             Delete a cluster.
  generate-token     Generate an ExecCredential based token for...
  get                Get the details of a cluster.
  list               List all the cluster objects in a...
  update             Update the details of a cluster.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster create --help
Usage: oci ce cluster create [OPTIONS]

  Create a new cluster.

Options:
  --name TEXT                     The name of the cluster. Avoid entering
                                  confidential information. [required]
  -c, --compartment-id TEXT       The OCID of the compartment in which to create
                                  the cluster. [required]
  --vcn-id TEXT                   The OCID of the virtual cloud network (VCN) in
                                  which to create the cluster. [required]
  --kubernetes-version TEXT       The version of Kubernetes to install into the
                                  cluster masters. [required]
  --kms-key-id TEXT               The OCID of the KMS Key to be used as the
                                  master encryption key for Kubernetes Secret
                                  encryption.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --service-lb-subnet-ids COMPLEX TYPE
                                  The two subnets configured to host load
                                  balancers in a Kubernetes cluster.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --dashboard-enabled BOOLEAN     Select if you want to use the Kubernetes
                                  Dashboard to deploy and troubleshoot
                                  containerized applications, and to manage
                                  Kubernetes resources. Default value is true.
  --tiller-enabled BOOLEAN        Select if you want Tiller (the server portion
                                  of Helm) to run in the Kubernetes cluster.
                                  Default value is true.
  --pods-cidr TEXT                The available group of network addresses that
                                  can be allocated to pods running in the
                                  cluster, expressed as a single, contiguous
                                  IPv4 CIDR block. For example, 10.244.0.0/16.
  --services-cidr TEXT            The available group of network addresses that
                                  can be exposed as Kubernetes services
                                  (ClusterIPs), expressed as a single,
                                  contiguous IPv4 CIDR block. For example,
                                  10.96.0.0/16.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster create-kubeconfig --help
Usage: oci ce cluster create-kubeconfig [OPTIONS]

  Create the Kubeconfig YAML for a cluster.

Options:
  --cluster-id TEXT              The OCID of the cluster. [required]
  --expiration INTEGER           The desired expiration, in seconds, to use for
                                 the kubeconfig token. Important Note,
                                 expiration field is only honored for token
                                 version 1.0.0
  --file PATH                    The name of the file that will be updated with
                                 response data, or '-' to write to STDOUT.
                                 [default: ~/.kube/config]
  --token-version [1.0.0|2.0.0]  The version of the kubeconfig token. Supported
                                 values 1.0.0 and 2.0.0
  --overwrite                    Overwrites the contents of kubeconfig file
                                 specified using --file option or kubeconfig
                                 file at default location if --file is not used.
  --from-json TEXT               Provide input to this command as a JSON
                                 document from a file using the file://path-
                                 to/file syntax.
                                 
                                 The --generate-full-command-
                                 json-input option can be used to generate a
                                 sample json file to be used with this command
                                 option. The key names are pre-populated and
                                 match the command option names (converted to
                                 camelCase format, e.g. compartment-id -->
                                 compartmentId), while the values of the keys
                                 need to be populated by the user before using
                                 the sample file as an input to this command.
                                 For any command option that accepts multiple
                                 values, the value of the key can be a JSON
                                 array.
                                 
                                 Options can still be provided on the
                                 command line. If an option exists in both the
                                 JSON document and the command line then the
                                 command line specified value will be used.
                                 
                                 For
                                 examples on usage of this option, please see
                                 our "using CLI with advanced JSON options"
                                 link: https://docs.cloud.oracle.com/iaas/Conten
                                 t/API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help                 For detailed help on any of these individual
                                 commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster delete --help
Usage: oci ce cluster delete [OPTIONS]

  Delete a cluster.

Options:
  --cluster-id TEXT               The OCID of the cluster. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster generate-token --help
Usage: oci ce cluster generate-token [OPTIONS]

  Generate an ExecCredential based token for Kubernetes SDK/CLI
  authentication.

Options:
  --cluster-id TEXT  The OCID of the cluster. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster get --help
Usage: oci ce cluster get [OPTIONS]

  Get the details of a cluster.

Options:
  --cluster-id TEXT  The OCID of the cluster. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster list --help
Usage: oci ce cluster list [OPTIONS]

  List all the cluster objects in a compartment.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --lifecycle-state [CREATING|ACTIVE|FAILED|DELETING|DELETED|UPDATING]
                                  A cluster lifecycle state to filter on. Can
                                  have multiple parameters of this name.
  --name TEXT                     The name to filter on.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. 1 is the minimum, 1000
                                  is the maximum. For important details about
                                  how pagination works, see [List Pagination].
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-order [ASC|DESC]         The optional order in which to sort the
                                  results.
  --sort-by [ID|NAME|TIME_CREATED]
                                  The optional field to sort the results by.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster update --help
Usage: oci ce cluster update [OPTIONS]

  Update the details of a cluster.

Options:
  --cluster-id TEXT               The OCID of the cluster. [required]
  --name TEXT                     The new name for the cluster. Avoid entering
                                  confidential information.
  --kubernetes-version TEXT       The version of Kubernetes to which the cluster
                                  masters should be upgraded.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster-options --help
Usage: oci ce cluster-options [OPTIONS] COMMAND [ARGS]...

  Options for creating or updating clusters.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get  Get options available for clusters.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce cluster-options get --help
Usage: oci ce cluster-options get [OPTIONS]

  Get options available for clusters.

Options:
  --cluster-option-id TEXT  The id of the option set to retrieve. Only "all" is
                            supported. [required]
  --from-json TEXT          Provide input to this command as a JSON document
                            from a file using the file://path-to/file syntax.
                            The --generate-full-command-json-input option can be
                            used to generate a sample json file to be used with
                            this command option. The key names are pre-populated
                            and match the command option names (converted to
                            camelCase format, e.g. compartment-id -->
                            compartmentId), while the values of the keys need to
                            be populated by the user before using the sample
                            file as an input to this command. For any command
                            option that accepts multiple values, the value of
                            the key can be a JSON array.
                            
                            Options can still be
                            provided on the command line. If an option exists in
                            both the JSON document and the command line then the
                            command line specified value will be used.
                            
                            For
                            examples on usage of this option, please see our
                            "using CLI with advanced JSON options" link: https:/
                            /docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cliu
                            sing.htm#AdvancedJSONOptions
  -?, -h, --help            For detailed help on any of these individual
                            commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool --help
Usage: oci ce node-pool [OPTIONS] COMMAND [ARGS]...

  A pool of compute nodes attached to a cluster. Avoid entering confidential
  information.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Create a new node pool.
  delete  Delete a node pool.
  get     Get the details of a node pool.
  list    List all the node pools in a compartment, and...
  update  Update a node pool.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool create --help
Usage: oci ce node-pool create [OPTIONS]

  Create a new node pool.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment in which the node
                                  pool exists. [required]
  --cluster-id TEXT               The OCID of the cluster to which this node
                                  pool is attached. [required]
  --name TEXT                     The name of the node pool. Avoid entering
                                  confidential information. [required]
  --kubernetes-version TEXT       The version of Kubernetes to install on the
                                  nodes in the node pool. [required]
  --node-image-name TEXT          The name of the image running on the nodes in
                                  the node pool. [required]
  --node-shape TEXT               The name of the node shape of the nodes in the
                                  node pool. [required]
  --node-metadata COMPLEX TYPE    A list of key/value pairs to add to each
                                  underlying OCI instance in the node pool.
                                  This
                                  is a complex type whose value must be valid
                                  JSON. The value can be provided as a string on
                                  the command line or passed in as a file using
                                  the file://path/to/file syntax.
                                  
                                  The
                                  --generate-param-json-input option can be used
                                  to generate an example of the JSON which must
                                  be provided. We recommend storing this example
                                  in a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --initial-node-labels COMPLEX TYPE
                                  A list of key/value pairs to add to nodes
                                  after they join the Kubernetes cluster.
                                  
                                  This
                                  option is a JSON list with items of type
                                  KeyValue.  For documentation on KeyValue
                                  please see our API reference: https://docs.clo
                                  ud.oracle.com/api/#/en/containerengine/2018022
                                  2/datatypes/KeyValue.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --ssh-public-key TEXT           The SSH public key to add to each node in the
                                  node pool.
  --quantity-per-subnet INTEGER   Optional, default to 1. The number of nodes to
                                  create in each subnet specified in subnetIds
                                  property. When used, subnetIds is required.
                                  This property is deprecated, use
                                  nodeConfigDetails instead.
  --subnet-ids COMPLEX TYPE       The OCIDs of the subnets in which to place
                                  nodes for this node pool. When used,
                                  quantityPerSubnet can be provided. This
                                  property is deprecated, use nodeConfigDetails.
                                  Exactly one of the subnetIds or
                                  nodeConfigDetails properties must be
                                  specified.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --size INTEGER                  The number of nodes spread across placement
                                  configurations.
  --placement-configs COMPLEX TYPE
                                  The placement configurations that determine
                                  where the nodes will be placed.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool delete --help
Usage: oci ce node-pool delete [OPTIONS]

  Delete a node pool.

Options:
  --node-pool-id TEXT             The OCID of the node pool. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool get --help
Usage: oci ce node-pool get [OPTIONS]

  Get the details of a node pool.

Options:
  --node-pool-id TEXT  The OCID of the node pool. [required]
  --from-json TEXT     Provide input to this command as a JSON document from a
                       file using the file://path-to/file syntax.
                       
                       The
                       --generate-full-command-json-input option can be used to
                       generate a sample json file to be used with this command
                       option. The key names are pre-populated and match the
                       command option names (converted to camelCase format, e.g.
                       compartment-id --> compartmentId), while the values of
                       the keys need to be populated by the user before using
                       the sample file as an input to this command. For any
                       command option that accepts multiple values, the value of
                       the key can be a JSON array.
                       
                       Options can still be
                       provided on the command line. If an option exists in both
                       the JSON document and the command line then the command
                       line specified value will be used.
                       
                       For examples on usage
                       of this option, please see our "using CLI with advanced
                       JSON options" link: https://docs.cloud.oracle.com/iaas/Co
                       ntent/API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help       For detailed help on any of these individual commands,
                       enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool list --help
Usage: oci ce node-pool list [OPTIONS]

  List all the node pools in a compartment, and optionally filter by cluster.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --cluster-id TEXT               The OCID of the cluster.
  --name TEXT                     The name to filter on.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. 1 is the minimum, 1000
                                  is the maximum. For important details about
                                  how pagination works, see [List Pagination].
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-order [ASC|DESC]         The optional order in which to sort the
                                  results.
  --sort-by [ID|NAME|TIME_CREATED]
                                  The optional field to sort the results by.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool update --help
Usage: oci ce node-pool update [OPTIONS]

  Update a node pool.

Options:
  --node-pool-id TEXT             The OCID of the node pool. [required]
  --name TEXT                     The new name for the cluster. Avoid entering
                                  confidential information.
  --kubernetes-version TEXT       The version of Kubernetes to which the nodes
                                  in the node pool should be upgraded.
  --initial-node-labels COMPLEX TYPE
                                  A list of key/value pairs to add to nodes
                                  after they join the Kubernetes cluster.
                                  
                                  This
                                  option is a JSON list with items of type
                                  KeyValue.  For documentation on KeyValue
                                  please see our API reference: https://docs.clo
                                  ud.oracle.com/api/#/en/containerengine/2018022
                                  2/datatypes/KeyValue.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --quantity-per-subnet INTEGER   The number of nodes to have in each subnet
                                  specified in the subnetIds property. This
                                  property is deprecated, use nodeConfigDetails
                                  instead. If the current value of
                                  quantityPerSubnet is greater than 0, you can
                                  only use quantityPerSubnet to scale the node
                                  pool. If the current value of
                                  quantityPerSubnet is equal to 0 and the
                                  current value of size in nodeConfigDetails is
                                  greater than 0, before you can use
                                  quantityPerSubnet, you must first scale the
                                  node pool to 0 nodes using nodeConfigDetails.
  --subnet-ids COMPLEX TYPE       The OCIDs of the subnets in which to place
                                  nodes for this node pool. This property is
                                  deprecated, use nodeConfigDetails instead.
                                  Only one of the subnetIds or nodeConfigDetails
                                  properties can be specified.
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --size INTEGER                  The number of nodes spread across placement
                                  configurations.
  --placement-configs COMPLEX TYPE
                                  The placement configurations that determine
                                  where the nodes will be placed.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool-options --help
Usage: oci ce node-pool-options [OPTIONS] COMMAND [ARGS]...

  Options for creating or updating node pools.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get  Get options available for node pools.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce node-pool-options get --help
Usage: oci ce node-pool-options get [OPTIONS]

  Get options available for node pools.

Options:
  --node-pool-option-id TEXT  The id of the option set to retrieve. Use "all"
                              get all options, or use a cluster ID to get
                              options specific to the provided cluster.
                              [required]
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request --help
Usage: oci ce work-request [OPTIONS] COMMAND [ARGS]...

  An asynchronous work request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  delete  Cancel a work request that has not started.
  get     Get the details of a work request.
  list    List all work requests in a compartment.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request delete --help
Usage: oci ce work-request delete [OPTIONS]

  Cancel a work request that has not started.

Options:
  --work-request-id TEXT  The OCID of the work request. [required]
  --if-match TEXT         For optimistic concurrency control. In the PUT or
                          DELETE call for a resource, set the `if-match`
                          parameter to the value of the etag from a previous GET
                          or POST response for that resource.  The resource will
                          be updated or deleted only if the etag you provide
                          matches the resource's current etag value.
  --force                 Perform deletion without prompting for confirmation.
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request get --help
Usage: oci ce work-request get [OPTIONS]

  Get the details of a work request.

Options:
  --work-request-id TEXT  The OCID of the work request. [required]
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request list --help
Usage: oci ce work-request list [OPTIONS]

  List all work requests in a compartment.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --cluster-id TEXT               The OCID of the cluster.
  --resource-id TEXT              The OCID of the resource associated with a
                                  work request
  --resource-type [CLUSTER|NODEPOOL]
                                  Type of the resource associated with a work
                                  request
  --status [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  A work request status to filter on. Can have
                                  multiple parameters of this name.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. 1 is the minimum, 1000
                                  is the maximum. For important details about
                                  how pagination works, see [List Pagination].
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-order [ASC|DESC]         The optional order in which to sort the
                                  results.
  --sort-by [ID|OPERATION_TYPE|STATUS|TIME_ACCEPTED|TIME_STARTED|TIME_FINISHED]
                                  The optional field to sort the results by.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request-error --help
Usage: oci ce work-request-error [OPTIONS] COMMAND [ARGS]...

  Errors related to a specific work request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Get the errors of a work request.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request-error list --help
Usage: oci ce work-request-error list [OPTIONS]

  Get the errors of a work request.

Options:
  -c, --compartment-id TEXT  The OCID of the compartment. [required]
  --work-request-id TEXT     The OCID of the work request. [required]
  --all                      Fetches all pages of results.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request-log-entry --help
Usage: oci ce work-request-log-entry [OPTIONS] COMMAND [ARGS]...

  Log entries related to a specific work request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Get the logs of a work request.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci ce work-request-log-entry list --help
Usage: oci ce work-request-log-entry list [OPTIONS]

  Get the logs of a work request.

Options:
  -c, --compartment-id TEXT  The OCID of the compartment. [required]
  --work-request-id TEXT     The OCID of the work request. [required]
  --all                      Fetches all pages of results.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

