CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'compute' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute [OPTIONS] COMMAND [ARGS]...

  Compute Service CLI

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  boot-volume-attachment          Represents an attachment between a boot...
  console-history                 An instance's serial console data.
  dedicated-vm-host               A dedicated virtual machine host that
                                  enables...
  dedicated-vm-host-instance      Condensed instance data when listing...
  device                          Device Path corresponding to the block...
  image                           A boot disk image for launching an instance.
  image-shape-compatibility-entry
                                  An image and shape that are compatible.
  instance                        A compute host.
  instance-console-connection     The `InstanceConsoleConnection` API
                                  provides...
  pic                             Partner image catalog (PIC).
  shape                           A compute instance shape that can be used
                                  in...
  vnic-attachment                 Represents an attachment between a VNIC and...
  volume-attachment               A base object for all types of attachments...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute boot-volume-attachment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute boot-volume-attachment [OPTIONS] COMMAND [ARGS]...

  Represents an attachment between a boot volume and an instance.

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  attach  Attaches the specified boot volume to the...
  detach  Detaches a boot volume from an instance.
  get     Gets information about the specified boot...
  list    Lists the boot volume attachments in the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute boot-volume-attachment attach --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute boot-volume-attachment attach [OPTIONS]

  Attaches the specified boot volume to the specified instance.

Options:
  --boot-volume-id TEXT           The OCID of the  boot volume. [required]
  --instance-id TEXT              The OCID of the instance. [required]
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it cannot be changed. Avoid
                                  entering confidential information.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute boot-volume-attachment detach --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute boot-volume-attachment detach [OPTIONS]

  Detaches a boot volume from an instance. You must specify the OCID of the
  boot volume attachment.

  This is an asynchronous operation. The attachment's `lifecycleState` will
  change to DETACHING temporarily until the attachment is completely removed.

Options:
  --boot-volume-attachment-id TEXT
                                  The OCID of the boot volume attachment.
                                  [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute boot-volume-attachment get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute boot-volume-attachment get [OPTIONS]

  Gets information about the specified boot volume attachment.

Options:
  --boot-volume-attachment-id TEXT
                                  The OCID of the boot volume attachment.
                                  [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute boot-volume-attachment list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute boot-volume-attachment list [OPTIONS]

  Lists the boot volume attachments in the specified compartment. You can
  filter the list by specifying an instance OCID, boot volume OCID, or both.

Options:
  --availability-domain TEXT  The name of the availability domain.
                              
                              Example:
                              `Uocm:PHX-AD-1` [required]
  -c, --compartment-id TEXT   The [OCID] of the compartment. [required]
  --limit INTEGER             For list pagination. The maximum number of results
                              per page, or items to return in a paginated "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
                              
                              Example: `50`
  --page TEXT                 For list pagination. The value of the `opc-next-
                              page` response header from the previous "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
  --instance-id TEXT          The OCID of the instance.
  --boot-volume-id TEXT       The OCID of the boot volume.
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history [OPTIONS] COMMAND [ARGS]...

  An instance's serial console data. It includes configuration messages that
  occur when the instance boots, such as kernel and BIOS messages, and is
  useful for checking the status of the instance or diagnosing problems. The
  console data is minimally formatted ASCII text.

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  capture      Captures the most recent serial console data...
  delete       Deletes the specified console history...
  get          Shows the metadata for the specified console...
  get-content  Gets the actual console history data (not the...
  list         Lists the console history metadata for the...
  update       Updates the specified console history...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history capture --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history capture [OPTIONS]

  Captures the most recent serial console data (up to a megabyte) for the
  specified instance.

  The `CaptureConsoleHistory` operation works with the other console history
  operations as described below.

  1. Use `CaptureConsoleHistory` to request the capture of up to a megabyte of
  the most recent console history. This call returns a `ConsoleHistory`
  object. The object will have a state of REQUESTED. 2. Wait for the capture
  operation to succeed by polling `GetConsoleHistory` with the identifier of
  the console history metadata. The state of the `ConsoleHistory` object will
  go from REQUESTED to GETTING-HISTORY and then SUCCEEDED (or FAILED). 3. Use
  `GetConsoleHistoryContent` to get the actual console history data (not the
  metadata). 4. Optionally, use `DeleteConsoleHistory` to delete the console
  history metadata and the console history data.

Options:
  --instance-id TEXT              The OCID of the instance to get the console
                                  history from. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [REQUESTED|GETTING-HISTORY|SUCCEEDED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history delete [OPTIONS]

  Deletes the specified console history metadata and the console history data.

Options:
  --instance-console-history-id TEXT
                                  The OCID of the console history. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [REQUESTED|GETTING-HISTORY|SUCCEEDED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history get [OPTIONS]

  Shows the metadata for the specified console history. See
  [CaptureConsoleHistory] for details about using the console history
  operations.

Options:
  --instance-console-history-id TEXT
                                  The OCID of the console history. [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history get-content --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history get-content [OPTIONS]

  Gets the actual console history data (not the metadata). See
  [CaptureConsoleHistory] for details about using the console history
  operations.

Options:
  --instance-console-history-id TEXT
                                  The OCID of the console history. [required]
  --file FILENAME                 The name of the file that will receive the
                                  response data, or '-' to write to STDOUT.
                                  [required]
  --offset INTEGER                Offset of the snapshot data to retrieve.
  --length INTEGER                Length of the snapshot data to retrieve.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history list [OPTIONS]

  Lists the console history metadata for the specified compartment or
  instance.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --availability-domain TEXT      The name of the availability domain.
                                  
                                  Example:
                                  `Uocm:PHX-AD-1`
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --instance-id TEXT              The OCID of the instance.
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --lifecycle-state [REQUESTED|GETTING-HISTORY|SUCCEEDED|FAILED]
                                  A filter to only return resources that match
                                  the given lifecycle state.  The state value is
                                  case-insensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute console-history update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute console-history update [OPTIONS]

  Updates the specified console history metadata.

Options:
  --instance-console-history-id TEXT
                                  The OCID of the console history. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [REQUESTED|GETTING-HISTORY|SUCCEEDED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host [OPTIONS] COMMAND [ARGS]...

  A dedicated virtual machine host that enables you to host multiple VM
  instances on a dedicated host that is not shared with other tenancies.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  change-compartment  Moves a dedicated virtual machine host from...
  create              Creates a new dedicated virtual machine host...
  delete              Deletes the specified dedicated virtual...
  get                 Gets information about the specified...
  host-shape          The shape used to launch the dedicated...
  instance-shape      The shape used to launch instances associated...
  list                Returns the list of dedicated virtual machine...
  update              Updates the displayName, freeformTags, and...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host change-compartment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host change-compartment [OPTIONS]

  Moves a dedicated virtual machine host from one compartment to another.

Options:
  --dedicated-vm-host-id TEXT  The OCID of the dedicated VM host. [required]
  -c, --compartment-id TEXT    The [OCID] of the compartment to move the
                               dedicated virtual machine host to. [required]
  --if-match TEXT              For optimistic concurrency control. In the PUT or
                               DELETE call for a resource, set the `if-match`
                               parameter to the value of the etag from a
                               previous GET or POST response for that resource.
                               The resource will be updated or deleted only if
                               the etag you provide matches the resource's
                               current etag value.
  --from-json TEXT             Provide input to this command as a JSON document
                               from a file using the file://path-to/file syntax.
                               The --generate-full-command-json-input option can
                               be used to generate a sample json file to be used
                               with this command option. The key names are pre-
                               populated and match the command option names
                               (converted to camelCase format, e.g. compartment-
                               id --> compartmentId), while the values of the
                               keys need to be populated by the user before
                               using the sample file as an input to this
                               command. For any command option that accepts
                               multiple values, the value of the key can be a
                               JSON array.
                               
                               Options can still be provided on the
                               command line. If an option exists in both the
                               JSON document and the command line then the
                               command line specified value will be used.
                               
                               For
                               examples on usage of this option, please see our
                               "using CLI with advanced JSON options" link: http
                               s://docs.cloud.oracle.com/iaas/Content/API/SDKDoc
                               s/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help               For detailed help on any of these individual
                               commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host create [OPTIONS]

  Creates a new dedicated virtual machine host in the specified compartment
  and the specified availability domain. Dedicated virtual machine hosts
  enable you to run your Compute virtual machine (VM) instances on dedicated
  servers that are a single tenant and not shared with other customers. For
  more information, see [Dedicated Virtual Machine Hosts].

Options:
  --availability-domain TEXT      The availability domain of the dedicated
                                  virtual machine host.
                                  
                                  Example: `Uocm:PHX-
                                  AD-1` [required]
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --dedicated-vm-host-shape TEXT  The dedicated virtual machine host shape. The
                                  shape determines the number of CPUs and other
                                  resources available for VM instances launched
                                  on the dedicated virtual machine host.
                                  [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
                                  
                                  Example: `My
                                  dedicated VM host`
  --fault-domain TEXT             The fault domain for the dedicated virtual
                                  machine host's assigned instances. For more
                                  information, see [Fault Domains]. If you do
                                  not specify the fault domain, the system
                                  selects one for you. To change the fault
                                  domain for a dedicated virtual machine host,
                                  delete it and create a new dedicated virtual
                                  machine host in the preferred fault domain.
                                  To get a list of fault domains, use the
                                  `ListFaultDomains` operation in the [Identity
                                  and Access Management Service API].
                                  
                                  Example:
                                  `FAULT-DOMAIN-1`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host delete [OPTIONS]

  Deletes the specified dedicated virtual machine host.

  If any VM instances are assigned to the dedicated virtual machine host, the
  delete operation will fail and the service will return a 409 response code.

Options:
  --dedicated-vm-host-id TEXT     The OCID of the dedicated VM host. [required]
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host get [OPTIONS]

  Gets information about the specified dedicated virtual machine host.

Options:
  --dedicated-vm-host-id TEXT  The OCID of the dedicated VM host. [required]
  --from-json TEXT             Provide input to this command as a JSON document
                               from a file using the file://path-to/file syntax.
                               The --generate-full-command-json-input option can
                               be used to generate a sample json file to be used
                               with this command option. The key names are pre-
                               populated and match the command option names
                               (converted to camelCase format, e.g. compartment-
                               id --> compartmentId), while the values of the
                               keys need to be populated by the user before
                               using the sample file as an input to this
                               command. For any command option that accepts
                               multiple values, the value of the key can be a
                               JSON array.
                               
                               Options can still be provided on the
                               command line. If an option exists in both the
                               JSON document and the command line then the
                               command line specified value will be used.
                               
                               For
                               examples on usage of this option, please see our
                               "using CLI with advanced JSON options" link: http
                               s://docs.cloud.oracle.com/iaas/Content/API/SDKDoc
                               s/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help               For detailed help on any of these individual
                               commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host host-shape --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host host-shape [OPTIONS] COMMAND [ARGS]...

  The shape used to launch the dedicated virtual machine (VM) host.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Lists the shapes that can be used to launch a...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host host-shape list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host host-shape list [OPTIONS]

  Lists the shapes that can be used to launch a dedicated virtual machine host
  within the specified compartment.

Options:
  -c, --compartment-id TEXT   The [OCID] of the compartment. [required]
  --availability-domain TEXT  The name of the availability domain.
                              
                              Example:
                              `Uocm:PHX-AD-1`
  --instance-shape-name TEXT  The name for the instance's shape.
  --limit INTEGER             For list pagination. The maximum number of results
                              per page, or items to return in a paginated "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
                              
                              Example: `50`
  --page TEXT                 For list pagination. The value of the `opc-next-
                              page` response header from the previous "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host instance-shape --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host instance-shape [OPTIONS] COMMAND [ARGS]...

  The shape used to launch instances associated with the dedicated VM host.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Lists the shapes that can be used to launch a...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host instance-shape list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host instance-shape list [OPTIONS]

  Lists the shapes that can be used to launch a virtual machine instance on a
  dedicated virtual machine host within the specified compartment. You can
  filter the list by compatibility with a specific dedicated virtual machine
  host shape.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --availability-domain TEXT      The name of the availability domain.
                                  
                                  Example:
                                  `Uocm:PHX-AD-1`
  --dedicated-vm-host-shape TEXT  Dedicated VM host shape name
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host list [OPTIONS]

  Returns the list of dedicated virtual machine hosts that match the specified
  criteria in the specified compartment.

  You can limit the list by specifying a dedicated virtual machine host
  display name. The list will include all the identically-named dedicated
  virtual machine hosts in the compartment.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --availability-domain TEXT      The name of the availability domain.
                                  
                                  Example:
                                  `Uocm:PHX-AD-1`
  --lifecycle-state [CREATING|ACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  A filter to only return resources that match
                                  the given lifecycle state.
  --display-name TEXT             A filter to return only resources that match
                                  the given display name exactly.
  --instance-shape-name TEXT      The name for the instance's shape.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host update [OPTIONS]

  Updates the displayName, freeformTags, and definedTags attributes for the
  specified dedicated virtual machine host. If an attribute value is not
  included, it will not be updated.

Options:
  --dedicated-vm-host-id TEXT     The OCID of the dedicated VM host. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
                                  
                                  Example: `My
                                  dedicated VM host`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host-instance --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host-instance [OPTIONS] COMMAND [ARGS]...

  Condensed instance data when listing instances on a dedicated VM host.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Returns the list of instances on the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute dedicated-vm-host-instance list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute dedicated-vm-host-instance list [OPTIONS]

  Returns the list of instances on the dedicated virtual machine hosts that
  match the specified criteria.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --dedicated-vm-host-id TEXT     The OCID of the dedicated VM host. [required]
  --availability-domain TEXT      The name of the availability domain.
                                  
                                  Example:
                                  `Uocm:PHX-AD-1`
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute device --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute device [OPTIONS] COMMAND [ARGS]...

  Device Path corresponding to the block devices attached to instances having
  a name and isAvailable flag.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list-instance  Gets a list of all the devices for given...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute device list-instance --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute device list-instance [OPTIONS]

  Gets a list of all the devices for given instance. You can optionally filter
  results by device availability.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --is-available BOOLEAN          A filter to return only available devices or
                                  only used devices.
  --name TEXT                     A filter to return only devices that match the
                                  given name exactly.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image [OPTIONS] COMMAND [ARGS]...

  A boot disk image for launching an instance. For more information, see
  [Overview of the Compute Service].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  change-compartment  Moves an image into a different compartment...
  create              Creates a boot disk image for the specified...
  delete              Deletes an image.
  export              Exports an image to the Oracle Cloud...
  get                 Gets the specified image.
  import              Imports an exported image from the Oracle...
  list                Lists the available images in the specified...
  update              Updates the display name of the image.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image change-compartment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image change-compartment [OPTIONS]

  Moves an image into a different compartment within the same tenancy. For
  information about moving resources between compartments, see [Moving
  Resources to a Different Compartment].

Options:
  --image-id TEXT            The [OCID] of the image. [required]
  -c, --compartment-id TEXT  The [OCID] of the compartment to move the image to.
                             [required]
  --if-match TEXT            For optimistic concurrency control. In the PUT or
                             DELETE call for a resource, set the `if-match`
                             parameter to the value of the etag from a previous
                             GET or POST response for that resource.  The
                             resource will be updated or deleted only if the
                             etag you provide matches the resource's current
                             etag value.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image create [OPTIONS]

  Creates a boot disk image for the specified instance or imports an exported
  image from the Oracle Cloud Infrastructure Object Storage service.

  When creating a new image, you must provide the OCID of the instance you
  want to use as the basis for the image, and the OCID of the compartment
  containing that instance. For more information about images, see [Managing
  Custom Images].

  When importing an exported image from Object Storage, you specify the source
  information in [ImageSourceDetails].

  When importing an image based on the namespace, bucket name, and object
  name, use [ImageSourceViaObjectStorageTupleDetails].

  When importing an image based on the Object Storage URL, use
  [ImageSourceViaObjectStorageUriDetails]. See [Object Storage URLs] and
  [Using Pre-Authenticated Requests] for constructing URLs for image
  import/export.

  For more information about importing exported images, see [Image
  Import/Export].

  You may optionally specify a *display name* for the image, which is simply a
  friendly name or description. It does not have to be unique, and you can
  change it. See [UpdateImage]. Avoid entering confidential information.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment you want the image
                                  to be created in. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name for the image. It does
                                  not have to be unique, and it's changeable.
                                  Avoid entering confidential information.
                                  
                                  You
                                  cannot use an Oracle-provided image name as a
                                  custom image name.
                                  
                                  Example: `My Oracle Linux
                                  image`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --image-source-details COMPLEX TYPE
                                  [DEPRECATED] The use of the `oci compute image
                                  create` command to import an image from Object
                                  Storage is deprecated.
                                  
                                  
                                  Please use the `oci
                                  compute image import` command instead.
                                  Details for creating an image through import
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax. 
                                  
                                  Example: '{ "objectName": "image-to-
                                  import.qcow2", "bucketName": "MyBucket",
                                  "namespaceName": "MyNamespace", "sourceType":
                                  "objectStorageTuple" }'
                                  
                                  or
                                  
                                  '{ "sourceUri":
                                  "https://objectstorage.us-phoenix-1.oracleclou
                                  d.com/n/MyNamespace/b/MyBucket/o/image-to-
                                  import.qcow2", "sourceType":
                                  "objectStorageUri" }'
  --instance-id TEXT              The OCID of the instance you want to use as
                                  the basis for the image.
  --launch-mode [NATIVE|EMULATED|PARAVIRTUALIZED|CUSTOM]
                                  Specifies the configuration mode for launching
                                  virtual machine (VM) instances. The
                                  configuration modes are: * `NATIVE` - VM
                                  instances launch with paravirtualized boot and
                                  VFIO devices. The default value for Oracle-
                                  provided images. * `EMULATED` - VM instances
                                  launch with emulated devices, such as the
                                  E1000 network driver and emulated SCSI disk
                                  controller. * `PARAVIRTUALIZED` - VM instances
                                  launch with paravirtualized devices using
                                  virtio drivers. * `CUSTOM` - VM instances
                                  launch with custom configuration settings
                                  specified in the `LaunchOptions` parameter.
  --wait-for-state [PROVISIONING|IMPORTING|AVAILABLE|EXPORTING|DISABLED|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image delete [OPTIONS]

  Deletes an image.

Options:
  --image-id TEXT                 The [OCID] of the image. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [PROVISIONING|IMPORTING|AVAILABLE|EXPORTING|DISABLED|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image export --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image export [OPTIONS] COMMAND [ARGS]...

  Exports an image to the Oracle Cloud Infrastructure Object Storage Service.
  You can use the Object Storage Service URL, or the namespace, bucket name,
  and object name when specifying the location to export to.

  For more information about exporting images, see [Image Import/Export].

  To perform an image export, you need write access to the Object Storage
  Service bucket for the image, see [Let Users Write Objects to Object Storage
  Buckets].

  See [Object Storage URLs] and [pre-authenticated requests] for constructing
  URLs for image import/export.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  to-object      Exports the specified image to the Oracle...
  to-object-uri  Exports the specified image to the Oracle...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image export to-object --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image export to-object [OPTIONS]

  Exports the specified image to the Oracle Cloud Infrastructure Object
  Storage Service using the namespace, bucket name, and object name to
  identify the location to export to.

  For more information about exporting images, see [Image Import/Export].

  To perform an image export, you need write access to the Object Storage
  Service bucket for the image, see [Let Users Write Objects to Object Storage
  Buckets].

Options:
  --image-id TEXT          The [OCID] of the image. [required]
  --if-match TEXT          For optimistic concurrency control. In the PUT or
                           DELETE call for a resource, set the `if-match`
                           parameter to the value of the etag from a previous
                           GET or POST response for that resource.  The resource
                           will be updated or deleted only if the etag you
                           provide matches the resource's current etag value.
  -ns, --namespace TEXT    The Object Storage Service namespace to export the
                           image to. [required]
  -bn, --bucket-name TEXT  The name of the bucket to export the image to.
                           [required]
  --name TEXT              The name which will be given to the exported image
                           object. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image export to-object-uri --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image export to-object-uri [OPTIONS]

  Exports the specified image to the Oracle Cloud Infrastructure Object
  Storage Service using the Object Storage Service URL to identify the
  location to export to.

  For more information about exporting images, see [Image Import/Export].

  See [Object Storage URLs] and [pre-authenticated requests] for constructing
  URLs for image import/export.

Options:
  --image-id TEXT   The [OCID] of the image. [required]
  --if-match TEXT   For optimistic concurrency control. In the PUT or DELETE
                    call for a resource, set the `if-match` parameter to the
                    value of the etag from a previous GET or POST response for
                    that resource.  The resource will be updated or deleted only
                    if the etag you provide matches the resource's current etag
                    value.
  --uri TEXT        The Object Storage URL to export the image to. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image get [OPTIONS]

  Gets the specified image.

Options:
  --image-id TEXT   The [OCID] of the image. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image import --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image import [OPTIONS] COMMAND [ARGS]...

  Imports an exported image from the Oracle Cloud Infrastructure Object
  Storage Service. You can use the Object Storage Service URL, or the
  namespace, bucket name, and object name when specifying the location to
  import from.

  For more information about importing exported images, see [Image
  Import/Export].

  See [Object Storage URLs] and [pre-authenticated requests] for constructing
  URLs for image import/export.

  You may optionally specify a display name for the image, which is simply a
  friendly name or description. It does not have to be unique, and you can
  change it. See [UpdateImage]. Avoid entering confidential information.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  from-object      Imports an exported image from the Oracle...
  from-object-uri  Imports an exported image from the Oracle...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image import from-object --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image import from-object [OPTIONS]

  Imports an exported image from the Oracle Cloud Infrastructure Object
  Storage Service using the namespace, bucket name, and object name to
  identify the location to import from.

  For more information about importing exported images, see [Image
  Import/Export].

  You may optionally specify a display name for the image, which is simply a
  friendly name or description. It does not have to be unique, and you can
  change it. See [UpdateImage]. Avoid entering confidential information.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment you want the image
                                  to be created in. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name for the image. It does
                                  not have to be unique, and it's changeable.
                                  Avoid entering confidential information.
                                  
                                  You
                                  cannot use an Oracle-provided image name as a
                                  custom image name.
                                  
                                  Example: `My Oracle Linux
                                  image`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --launch-mode [NATIVE|EMULATED|PARAVIRTUALIZED|CUSTOM]
                                  Specifies the configuration mode for launching
                                  virtual machine (VM) instances. The
                                  configuration modes are: * `NATIVE` - VM
                                  instances launch with paravirtualized boot and
                                  VFIO devices. The default value for Oracle-
                                  provided images. * `EMULATED` - VM instances
                                  launch with emulated devices, such as the
                                  E1000 network driver and emulated SCSI disk
                                  controller. * `PARAVIRTUALIZED` - VM instances
                                  launch with paravirtualized devices using
                                  virtio drivers. * `CUSTOM` - VM instances
                                  launch with custom configuration settings
                                  specified in the `LaunchOptions` parameter.
  -ns, --namespace TEXT           The Object Storage Service namespace to import
                                  the image from. [required]
  -bn, --bucket-name TEXT         The name of the bucket to import the image
                                  from. [required]
  --name TEXT                     The name of the object identifying the image
                                  to import. [required]
  --source-image-type [QCOW2|VMDK]
                                  The format of the image to be imported.
                                  Exported Oracle images are QCOW2. Only
                                  monolithic images are supported.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image import from-object-uri --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image import from-object-uri [OPTIONS]

  Imports an exported image from the Oracle Cloud Infrastructure Object
  Storage Service using the Object Storage Service URL to identify the
  location to import from.

  For more information about importing exported images, see [Image
  Import/Export].

  See [Object Storage URLs] and [pre-authenticated requests] for constructing
  URLs for image import/export.

  You may optionally specify a display name for the image, which is simply a
  friendly name or description. It does not have to be unique, and you can
  change it. See [UpdateImage]. Avoid entering confidential information.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment you want the image
                                  to be created in. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name for the image. It does
                                  not have to be unique, and it's changeable.
                                  Avoid entering confidential information.
                                  
                                  You
                                  cannot use an Oracle-provided image name as a
                                  custom image name.
                                  
                                  Example: `My Oracle Linux
                                  image`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --launch-mode [NATIVE|EMULATED|PARAVIRTUALIZED|CUSTOM]
                                  Specifies the configuration mode for launching
                                  virtual machine (VM) instances. The
                                  configuration modes are: * `NATIVE` - VM
                                  instances launch with paravirtualized boot and
                                  VFIO devices. The default value for Oracle-
                                  provided images. * `EMULATED` - VM instances
                                  launch with emulated devices, such as the
                                  E1000 network driver and emulated SCSI disk
                                  controller. * `PARAVIRTUALIZED` - VM instances
                                  launch with paravirtualized devices using
                                  virtio drivers. * `CUSTOM` - VM instances
                                  launch with custom configuration settings
                                  specified in the `LaunchOptions` parameter.
  --uri TEXT                      The Object Storage URL to import the image
                                  from. [required]
  --source-image-type [QCOW2|VMDK]
                                  The format of the image to be imported.
                                  Exported Oracle images are QCOW2. Only
                                  monolithic images are supported.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image list [OPTIONS]

  Lists the available images in the specified compartment, including both
  [Oracle-provided images] and [custom images] that have been created. The
  list of images returned is ordered to first show all Oracle-provided images,
  then all custom images.

  The order of images returned may change when new images are released.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --display-name TEXT             A filter to return only resources that match
                                  the given display name exactly.
  --operating-system TEXT         The image's operating system.
                                  
                                  Example:
                                  `Oracle Linux`
  --operating-system-version TEXT
                                  The image's operating system version.
                                  Example: `7.2`
  --shape TEXT                    Shape name.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --lifecycle-state [PROVISIONING|IMPORTING|AVAILABLE|EXPORTING|DISABLED|DELETED]
                                  A filter to only return resources that match
                                  the given lifecycle state.  The state value is
                                  case-insensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image update [OPTIONS]

  Updates the display name of the image. Avoid entering confidential
  information.

Options:
  --image-id TEXT                 The [OCID] of the image. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
                                  
                                  Example: `My custom
                                  Oracle Linux image`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --operating-system TEXT         Operating system
                                  
                                  Example: `Oracle Linux`
  --operating-system-version TEXT
                                  Operating system version
                                  
                                  Example: `7.4`
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [PROVISIONING|IMPORTING|AVAILABLE|EXPORTING|DISABLED|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image-shape-compatibility-entry --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image-shape-compatibility-entry [OPTIONS] COMMAND [ARGS]...

  An image and shape that are compatible.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  add     Adds a shape to the compatible shapes list...
  remove  Removes a shape from the compatible shapes...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image-shape-compatibility-entry add --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image-shape-compatibility-entry add [OPTIONS]

  Adds a shape to the compatible shapes list for the image.

Options:
  --image-id TEXT    The [OCID] of the image. [required]
  --shape-name TEXT  Shape name. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute image-shape-compatibility-entry remove --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute image-shape-compatibility-entry remove [OPTIONS]

  Removes a shape from the compatible shapes list for the image.

Options:
  --image-id TEXT    The [OCID] of the image. [required]
  --shape-name TEXT  Shape name. [required]
  --force            Perform deletion without prompting for confirmation.
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance [OPTIONS] COMMAND [ARGS]...

  A compute host. The image used to launch the instance determines its
  operating system and other software. The shape specified during the launch
  process determines the number of CPUs and memory allocated to the instance.
  For more information, see [Overview of the Compute Service].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  action                     Performs one of the following power actions...
  attach-vnic                Creates a secondary VNIC and attaches it to...
  change-compartment         Moves an instance into a different...
  detach-vnic                Detaches and deletes the specified secondary...
  get                        Gets information about the specified...
  get-windows-initial-creds  Gets the generated credentials for the...
  launch                     Creates a new instance in the specified...
  list                       Lists the instances in the specified...
  list-vnics                 Lists the VNICs that are attached to the...
  terminate                  Terminates the specified instance.
  update                     Updates certain fields on the specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance action --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance action [OPTIONS]

  Performs one of the following power actions on the specified instance:

  - **START** - Powers on the instance.

  - **STOP** - Powers off the instance.

  - **SOFTRESET** - Gracefully reboots instance by sending a shutdown command
  to the operating system and then powers the instance back on.

  - **SOFTSTOP** - Gracefully shuts down instance by sending a shutdown
  command to the operating system.

  - **RESET** - Powers off the instance and then powers it back on.

  For more information see [Stopping and Starting an Instance].

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --action TEXT                   The action to perform on the instance. Allowed
                                  values are: STOP, START, SOFTRESET, RESET,
                                  SOFTSTOP [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --wait-for-state [MOVING|PROVISIONING|RUNNING|STARTING|STOPPING|STOPPED|CREATING_IMAGE|TERMINATING|TERMINATED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance attach-vnic --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance attach-vnic [OPTIONS]

  Creates a secondary VNIC and attaches it to the specified instance. For more
  information about secondary VNICs, see [Virtual Network Interface Cards
  (VNICs)].

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --subnet-id TEXT                The OCID of the subnet to create the VNIC in.
                                  [required]
  --nsg-ids COMPLEX TYPE          A list of the [OCIDs] of the network security
                                  groups (NSGs) to add the VNIC to..
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --vnic-display-name TEXT        A user-friendly name for the VNIC. Does not
                                  have to be unique.
  --assign-public-ip BOOLEAN      Whether the VNIC should be assigned a public
                                  IP address. Defaults to whether the subnet is
                                  public or private. If not set and the VNIC is
                                  being created in a private subnet (i.e., where
                                  prohibitPublicIpOnVnic=true in the Subnet),
                                  then no public IP address is assigned. If not
                                  set and the subnet is public
                                  (prohibitPublicIpOnVnic=false), then a public
                                  IP address is assigned. If set to true and
                                  prohibitPublicIpOnVnic=true, an error is
                                  returned.
  --skip-source-dest-check BOOLEAN
                                  Indicates whether Source/Destination check is
                                  disabled on the VNIC. Defaults to `false`, in
                                  which case we enable Source/Destination check
                                  on the VNIC.
  --private-ip TEXT               A private IP address of your choice to assign
                                  to the VNIC. Must be an available IP address
                                  within the subnet's CIDR. If no value is
                                  specified, a private IP address from the
                                  subnet will be automatically assigned.
  --hostname-label TEXT           The hostname for the VNIC. Used for DNS. The
                                  value is the hostname portion of the VNIC's
                                  fully qualified domain name (FQDN) (e.g.,
                                  `bminstance-1` in FQDN
                                  `bminstance-1.subnet123.vcn1.oraclevcn.com`).
                                  Must be unique across all VNICs in the subnet
                                  and comply with [RFC
                                  952](https://tools.ietf.org/html/rfc952) and
                                  [RFC
                                  1123](https://tools.ietf.org/html/rfc1123).
                                  The value can be retrieved from the
                                  [Vnic](#/en/iaas/20160918/Vnic/).
  --nic-index INTEGER             Which physical network interface card (NIC)
                                  the VNIC will use. Defaults to 0. Certain bare
                                  metal instance shapes have two active physical
                                  NICs (0 and 1). If you add a secondary VNIC to
                                  one of these instances, you can specify which
                                  NIC the VNIC will use.
  --wait                          If set, then wait for the attachment to
                                  complete and return the newly attached VNIC.
                                  If not set, then the command will not wait and
                                  will return nothing on success.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance change-compartment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance change-compartment [OPTIONS]

  Moves an instance into a different compartment within the same tenancy. For
  information about moving resources between compartments, see [Moving
  Resources to a Different Compartment].

  When you move an instance to a different compartment, associated resources
  such as boot volumes and VNICs are not moved.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  -c, --compartment-id TEXT       The [OCID] of the compartment to move the
                                  instance to. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance detach-vnic --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance detach-vnic [OPTIONS]

  Detaches and deletes the specified secondary VNIC. This operation cannot be
  used on the instance's primary VNIC. When you terminate an instance, all
  attached VNICs (primary and secondary) are automatically detached and
  deleted.

Options:
  --vnic-id TEXT                  The OCID of the VNIC. [required]
  -c, --compartment-id TEXT       The OCID of the instance's compartment.
                                  [required]
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance get [OPTIONS]

  Gets information about the specified instance.

Options:
  --instance-id TEXT  The OCID of the instance. [required]
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file using the file://path-to/file syntax.
                      
                      The
                      --generate-full-command-json-input option can be used to
                      generate a sample json file to be used with this command
                      option. The key names are pre-populated and match the
                      command option names (converted to camelCase format, e.g.
                      compartment-id --> compartmentId), while the values of the
                      keys need to be populated by the user before using the
                      sample file as an input to this command. For any command
                      option that accepts multiple values, the value of the key
                      can be a JSON array.
                      
                      Options can still be provided on the
                      command line. If an option exists in both the JSON
                      document and the command line then the command line
                      specified value will be used.
                      
                      For examples on usage of
                      this option, please see our "using CLI with advanced JSON
                      options" link: https://docs.cloud.oracle.com/iaas/Content/
                      API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help      For detailed help on any of these individual commands,
                      enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance get-windows-initial-creds --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance get-windows-initial-creds [OPTIONS]

  Gets the generated credentials for the instance. Only works for instances
  that require password to log in (E.g. Windows). For certain OS'es, users
  will be forced to change the initial credentials.

Options:
  --instance-id TEXT  The OCID of the instance. [required]
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file using the file://path-to/file syntax.
                      
                      The
                      --generate-full-command-json-input option can be used to
                      generate a sample json file to be used with this command
                      option. The key names are pre-populated and match the
                      command option names (converted to camelCase format, e.g.
                      compartment-id --> compartmentId), while the values of the
                      keys need to be populated by the user before using the
                      sample file as an input to this command. For any command
                      option that accepts multiple values, the value of the key
                      can be a JSON array.
                      
                      Options can still be provided on the
                      command line. If an option exists in both the JSON
                      document and the command line then the command line
                      specified value will be used.
                      
                      For examples on usage of
                      this option, please see our "using CLI with advanced JSON
                      options" link: https://docs.cloud.oracle.com/iaas/Content/
                      API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help      For detailed help on any of these individual commands,
                      enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance launch --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance launch [OPTIONS]

  Creates a new instance in the specified compartment and the specified
  availability domain. For general information about instances, see [Overview
  of the Compute Service].

  For information about access control and compartments, see [Overview of the
  IAM Service].

  For information about availability domains, see [Regions and Availability
  Domains]. To get a list of availability domains, use the
  `ListAvailabilityDomains` operation in the Identity and Access Management
  Service API.

  All Oracle Cloud Infrastructure resources, including instances, get an
  Oracle-assigned, unique ID called an Oracle Cloud Identifier (OCID). When
  you create a resource, you can find its OCID in the response. You can also
  retrieve a resource's OCID by using a List API operation on that resource
  type, or by viewing the resource in the Console.

  To launch an instance using an image or a boot volume use the
  `sourceDetails` parameter in [LaunchInstanceDetails].

  When you launch an instance, it is automatically attached to a virtual
  network interface card (VNIC), called the *primary VNIC*. The VNIC has a
  private IP address from the subnet's CIDR. You can either assign a private
  IP address of your choice or let Oracle automatically assign one. You can
  choose whether the instance has a public IP address. To retrieve the
  addresses, use the [ListVnicAttachments] operation to get the VNIC ID for
  the instance, and then call [GetVnic] with the VNIC ID.

  You can later add secondary VNICs to an instance. For more information, see
  [Virtual Network Interface Cards (VNICs)].

Options:
  --availability-domain TEXT      The availability domain of the instance.
                                  Example: `Uocm:PHX-AD-1` [required]
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --shape TEXT                    The shape of an instance. The shape determines
                                  the number of CPUs, amount of memory, and
                                  other resources allocated to the instance.
                                  You can enumerate all available shapes by
                                  calling [ListShapes]. [required]
  --dedicated-vm-host-id TEXT     The OCID of dedicated VM host.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
                                  
                                  Example: `My bare
                                  metal instance`
  --extended-metadata COMPLEX TYPE
                                  Additional metadata key/value pairs that you
                                  provide. They serve the same purpose and
                                  functionality as fields in the 'metadata'
                                  object.
                                  
                                  They are distinguished from
                                  'metadata' fields in that these can be nested
                                  JSON objects (whereas 'metadata' fields are
                                  string/string maps only).
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --fault-domain TEXT             A fault domain is a grouping of hardware and
                                  infrastructure within an availability domain.
                                  Each availability domain contains three fault
                                  domains. Fault domains let you distribute your
                                  instances so that they are not on the same
                                  physical hardware within a single availability
                                  domain. A hardware failure or Compute hardware
                                  maintenance that affects one fault domain does
                                  not affect instances in other fault domains.
                                  If you do not specify the fault domain, the
                                  system selects one for you. To change the
                                  fault domain for an instance, terminate it and
                                  launch a new instance in the preferred fault
                                  domain.
                                  
                                  To get a list of fault domains, use
                                  the [ListFaultDomains] operation in the
                                  Identity and Access Management Service API.
                                  Example: `FAULT-DOMAIN-1`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --hostname-label TEXT           The hostname for the VNIC that is created
                                  during instance launch. Used for DNS. The
                                  value is the hostname portion of the
                                  instance's fully qualified domain name (FQDN)
                                  (e.g., `bminstance-1` in FQDN
                                  `bminstance-1.subnet123.vcn1.oraclevcn.com`).
                                  Must be unique across all VNICs in the subnet
                                  and comply with [RFC 952] and [RFC 1123]. The
                                  value cannot be changed, and it can be
                                  retrieved from the [Vnic].
                                  
                                  For more
                                  information, see [DNS in Your Virtual Cloud
                                  Network].
                                  
                                  Example: `bminstance-1`
  --image-id TEXT                 The OCID of the image used to boot the
                                  instance. This is a shortcut for specifying an
                                  image source via the --source-details complex
                                  JSON parameter. If this parameter is provided,
                                  you cannot provide the --source-details or
                                  --source-boot-volume-id parameters.
  --ipxe-script-file FILENAME     This is an advanced option.
                                  
                                  When a bare metal
                                  or virtual machine instance boots, the iPXE
                                  firmware that runs on the instance is
                                  configured to run an iPXE script to continue
                                  the boot process.
                                  
                                  If you want more control
                                  over the boot process, you can provide your
                                  own custom iPXE script that will run when the
                                  instance boots; however, you should be aware
                                  that the same iPXE script will run every time
                                  an instance boots; not only after the initial
                                  LaunchInstance call.
                                  
                                  The default iPXE script
                                  connects to the instance's local boot volume
                                  over iSCSI and performs a network boot. If you
                                  use a custom iPXE script and want to network-
                                  boot from the instance's local boot volume
                                  over iSCSI the same way as the default iPXE
                                  script, you should use the following iSCSI IP
                                  address: 169.254.0.2, and boot volume IQN:
                                  iqn.2015-02.oracle.boot.
                                  
                                  For more information
                                  about the Bring Your Own Image feature of
                                  Oracle Cloud Infrastructure, see [Bring Your
                                  Own Image].
                                  
                                  For more information about iPXE,
                                  see http://ipxe.org.
  --launch-options COMPLEX TYPE   This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --metadata COMPLEX TYPE         Custom metadata key/value pairs that you
                                  provide, such as the SSH public key required
                                  to connect to the instance. For more info see
                                  documentation: https://docs.cloud.oracle.com/a
                                  pi/#/en/iaas/20160918/requests/LaunchInstanceD
                                  etails. This must be provided in JSON format.
                                  Note: user_data and ssh_authorized_keys can
                                  instead be specified using the parameters
                                  --user-data-file and --ssh-authorized-keys-
                                  file.
                                  
                                  Example: '{"ssh_authorized_keys": "ssh-
                                  rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDbVpuGODmhsR
                                  ZOLWNgm0aEYUoWIDSPNWHmg2M6mZpmZNHfiNfx2dSofxUp
                                  KOiu5S8Th52AuAHSmkzNe6lXBO9wxnjOvkowe1mAleRTEl
                                  8zPI8Jkz6HrmJCzHEtS04kC4bx+tXRZhIfRq1uGaPcriKy
                                  quTnQs52Ahoxgw5vdXXQMwxWZLAcyaP01JrZwcUqPlB/GR
                                  iBFSTj0E/AIiVW3APNME5HjreOd/djjPRpvWu7AUpOqskG
                                  38kr8lhxo1hJifqeMg5W7cQsecTLJHgTDAPJD68ujM93jd
                                  zV2llIXwR1zyl80i6c3lDLyLgUrCLM0R1xex/zITTdT6/Z
                                  84buS/Xl my public key"}'
  --agent-config COMPLEX TYPE     This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --source-details COMPLEX TYPE   Use this parameter to specify whether a boot
                                  volume or an image should be used to launch a
                                  new instance.
                                  This is a complex type whose
                                  value must be valid JSON. The value can be
                                  provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --subnet-id TEXT                The OCID of the subnet where the VNIC attached
                                  to this instance will be created.
  --is-pv-encryption-in-transit-enabled BOOLEAN
                                  Whether to enable in-transit encryption for
                                  the data volume's paravirtualized attachment.
                                  The default value is false.
  --wait-for-state [MOVING|PROVISIONING|RUNNING|STARTING|STOPPING|STOPPED|CREATING_IMAGE|TERMINATING|TERMINATED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --vnic-display-name TEXT        A user-friendly name for the default VNIC
                                  attached to this instance. Does not have to be
                                  unique.
  --nsg-ids COMPLEX TYPE          A list of the [OCIDs] of the network security
                                  groups (NSGs) to add the VNIC to..
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --assign-public-ip BOOLEAN      Whether the default VNIC attached to this
                                  instance should be assigned a public IP
                                  address. Defaults to whether the subnet is
                                  public or private. If not set and the VNIC is
                                  being created in a private subnet (i.e., where
                                  prohibitPublicIpOnVnic=true in the Subnet),
                                  then no public IP address is assigned. If not
                                  set and the subnet is public
                                  (prohibitPublicIpOnVnic=false), then a public
                                  IP address is assigned. If set to true and
                                  prohibitPublicIpOnVnic=true, an error is
                                  returned.
  --private-ip TEXT               A private IP address of your choice to assign
                                  to the default VNIC attached to this instance.
                                  Must be an available IP address within the
                                  subnet's CIDR. If no value is specified, a
                                  private IP address from the subnet will be
                                  automatically assigned.
  --skip-source-dest-check BOOLEAN
                                  Indicates whether Source/Destination check is
                                  disabled on the VNIC. Defaults to `false`, in
                                  which case we enable Source/Destination check
                                  on the VNIC.
  --user-data-file FILENAME       A file containing data that Cloud-Init can use
                                  to run custom scripts or provide custom Cloud-
                                  Init configuration. This parameter is a
                                  convenience wrapper around the 'user_data'
                                  field of the --metadata parameter.  Populating
                                  both values in the same call will result in an
                                  error. For more info see Cloud-Init
                                  documentation: https://cloudinit.readthedocs.o
                                  rg/en/latest/topics/format.html.
  --ssh-authorized-keys-file FILENAME
                                  A file containing one or more public SSH keys
                                  to be included in the ~/.ssh/authorized_keys
                                  file for the default user on the instance. Use
                                  a newline character to separate multiple keys.
                                  The SSH keys must be in the format necessary
                                  for the authorized_keys file. This parameter
                                  is a convenience wrapper around the
                                  'ssh_authorized_keys' field of the --metadata
                                  parameter. Populating both values in the same
                                  call will result in an error. For more info
                                  see documentation: https://docs.cloud.oracle.c
                                  om/api/#/en/iaas/20160918/requests/LaunchInsta
                                  nceDetails.
  --source-boot-volume-id TEXT    The OCID of the boot volume used to boot the
                                  instance. This is a shortcut for specifying a
                                  boot volume source via the --source-details
                                  complex JSON parameter. If this parameter is
                                  provided, you cannot provide the --source-
                                  details or --image-id parameters.
  --boot-volume-size-in-gbs INTEGER
                                  The size of the boot volume in GBs. Minimum
                                  value is 50 GB and maximum value is 16384 GB
                                  (16TB). This is a shortcut for specifying a
                                  boot volume size via the --source-details
                                  complex JSON parameter. If this parameter is
                                  provided, you cannot provide the --source-
                                  details or --source-boot-volume-id parameters.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance list [OPTIONS]

  Lists the instances in the specified compartment and the specified
  availability domain. You can filter the results by specifying an instance
  name (the list will include all the identically-named instances in the
  compartment).

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --availability-domain TEXT      The name of the availability domain.
                                  
                                  Example:
                                  `Uocm:PHX-AD-1`
  --display-name TEXT             A filter to return only resources that match
                                  the given display name exactly.
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --lifecycle-state [MOVING|PROVISIONING|RUNNING|STARTING|STOPPING|STOPPED|CREATING_IMAGE|TERMINATING|TERMINATED]
                                  A filter to only return resources that match
                                  the given lifecycle state.  The state value is
                                  case-insensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance list-vnics --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance list-vnics [OPTIONS]

  Lists the VNICs that are attached to the specified instance. VNICs that are
  in the process of attaching or detaching will not be returned.

Options:
  --instance-id TEXT   The OCID of the instance. [required]
  --limit INTEGER      The maximum number of items to return in a paginated
                       "List" call.
                       
                       Example: `500`
  --page TEXT          The value of the `opc-next-page` response header from the
                       previous "List" call.
  --all                Fetches all pages of results. If you provide this option,
                       then you cannot provide the --limit option.
  --page-size INTEGER  When fetching results, the number of results to fetch per
                       call. Only valid when used with --all or --limit, and
                       ignored otherwise.
  --from-json TEXT     Provide input to this command as a JSON document from a
                       file using the file://path-to/file syntax.
                       
                       The
                       --generate-full-command-json-input option can be used to
                       generate a sample json file to be used with this command
                       option. The key names are pre-populated and match the
                       command option names (converted to camelCase format, e.g.
                       compartment-id --> compartmentId), while the values of
                       the keys need to be populated by the user before using
                       the sample file as an input to this command. For any
                       command option that accepts multiple values, the value of
                       the key can be a JSON array.
                       
                       Options can still be
                       provided on the command line. If an option exists in both
                       the JSON document and the command line then the command
                       line specified value will be used.
                       
                       For examples on usage
                       of this option, please see our "using CLI with advanced
                       JSON options" link: https://docs.cloud.oracle.com/iaas/Co
                       ntent/API/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help       For detailed help on any of these individual commands,
                       enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance terminate --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance terminate [OPTIONS]

  Terminates the specified instance. Any attached VNICs and volumes are
  automatically detached when the instance terminates.

  To preserve the boot volume associated with the instance, specify `true` for
  `PreserveBootVolumeQueryParam`. To delete the boot volume when the instance
  is deleted, specify `false` or do not specify a value for
  `PreserveBootVolumeQueryParam`.

  This is an asynchronous operation. The instance's `lifecycleState` will
  change to TERMINATING temporarily until the instance is completely removed.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --preserve-boot-volume BOOLEAN  Specifies whether to delete or preserve the
                                  boot volume when terminating an instance. The
                                  default value is false.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [MOVING|PROVISIONING|RUNNING|STARTING|STOPPING|STOPPED|CREATING_IMAGE|TERMINATING|TERMINATED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance update --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance update [OPTIONS]

  Updates certain fields on the specified instance. Fields that are not
  provided in the request will not be updated. Avoid entering confidential
  information.

  Changes to metadata fields will be reflected in the instance metadata
  service (this may take up to a minute).

  The OCID of the instance remains the same.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it's changeable. Avoid entering
                                  confidential information.
                                  
                                  Example: `My bare
                                  metal instance`
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --agent-config COMPLEX TYPE     Instance agent configuration options to choose
                                  for updating the instance
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --metadata COMPLEX TYPE         Custom metadata key/value string pairs that
                                  you provide. Any set of key/value pairs
                                  provided here will completely replace the
                                  current set of key/value pairs in the
                                  'metadata' field on the instance.
                                  
                                  Both the
                                  'user_data' and 'ssh_authorized_keys' fields
                                  cannot be changed after an instance has
                                  launched. Any request which updates, removes,
                                  or adds either of these fields will be
                                  rejected. You must provide the same values for
                                  'user_data' and 'ssh_authorized_keys' that
                                  already exist on the instance.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --extended-metadata COMPLEX TYPE
                                  Additional metadata key/value pairs that you
                                  provide. They serve the same purpose and
                                  functionality as fields in the 'metadata'
                                  object.
                                  
                                  They are distinguished from
                                  'metadata' fields in that these can be nested
                                  JSON objects (whereas 'metadata' fields are
                                  string/string maps only).
                                  
                                  Both the
                                  'user_data' and 'ssh_authorized_keys' fields
                                  cannot be changed after an instance has
                                  launched. Any request which updates, removes,
                                  or adds either of these fields will be
                                  rejected. You must provide the same values for
                                  'user_data' and 'ssh_authorized_keys' that
                                  already exist on the instance.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [MOVING|PROVISIONING|RUNNING|STARTING|STOPPING|STOPPED|CREATING_IMAGE|TERMINATING|TERMINATED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection [OPTIONS] COMMAND [ARGS]...

  The `InstanceConsoleConnection` API provides you with console access to
  Compute instances, enabling you to troubleshoot malfunctioning instances
  remotely.

  For more information about console access, see [Accessing the Console].

  If you are attempting to start a VNC connection to an instance from a
  Windows machine without SSH installed, you can consider using plink instead.
  The 'oci compute instance-console-connection get-plink-connection-string'
  command returns a PowerShell command which uses plink to launch the SSH
  tunnel necessary to start a VNC connection to the instance.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create                       Creates a new serial console connection to...
  delete                       Deletes the specified instance console...
  get                          Gets the specified instance console...
  get-plink-connection-string  Gets the plink command for starting an SSH...
  list                         Lists the console connections for the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection create [OPTIONS]

  Creates a new serial console connection to the specified instance. Once the
  serial console connection has been created and is available, you connect to
  the serial console using an SSH client.

  The default number of enabled serial console connections per tenancy is 10.

  For more information about serial console access, see [Accessing the
  Console].

Options:
  --instance-id TEXT              The OCID of the instance to create the console
                                  connection to. [required]
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACTIVE|CREATING|DELETED|DELETING|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --ssh-public-key-file FILENAME  A file containing the SSH public key used to
                                  authenticate the serial console connection
                                  [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection delete [OPTIONS]

  Deletes the specified instance console connection.

Options:
  --instance-console-connection-id TEXT
                                  The OCID of the instance console connection.
                                  [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACTIVE|CREATING|DELETED|DELETING|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection get [OPTIONS]

  Gets the specified instance console connection's information.

  If you are attempting to start a VNC connection to an instance from a
  Windows machine without SSH installed, you can consider using plink instead.
  The 'oci compute instance-console-connection get-plink-connection-string'
  command returns a PowerShell command which uses plink to launch the SSH
  tunnel necessary to start a VNC connection to the instance.

Options:
  --instance-console-connection-id TEXT
                                  The OCID of the instance console connection.
                                  [required]
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection get-plink-connection-string --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection get-plink-connection-string 
           [OPTIONS]

  Gets the plink command for starting an SSH tunnel on Windows which will
  allow VNC connections to the instance. Once you have started the tunnel, you
  can point your VNC client to localhost:{--local-vnc-port} to connect to the
  instance (default --local-vnc-port is 5900).

Options:
  --instance-console-connection-id TEXT
                                  The OCID of the intance console connection
                                  [required]
  --private-key-file TEXT         The path to the private key to be used for
                                  authentication. This is inserted into the
                                  generated connection string. [required]
  --local-vnc-port TEXT           This is the local port that you will point
                                  your VNC client at. This will be forwarded to
                                  the SSH tunnel created by executing the
                                  PowerShell command in the output. Default is
                                  5900.
  --ssh-proxy-port TEXT           This is the local and remote port for the SSH
                                  tunnel.  This may be any open port on your
                                  local machine.  Default is 5905.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute instance-console-connection list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute instance-console-connection list [OPTIONS]

  Lists the console connections for the specified compartment or instance.

  For more information about console access, see [Accessing the Console].

Options:
  -c, --compartment-id TEXT  The [OCID] of the compartment. [required]
  --instance-id TEXT         The OCID of the instance.
  --limit INTEGER            For list pagination. The maximum number of results
                             per page, or items to return in a paginated "List"
                             call. For important details about how pagination
                             works, see [List Pagination].
                             
                             Example: `50`
  --page TEXT                For list pagination. The value of the `opc-next-
                             page` response header from the previous "List"
                             call. For important details about how pagination
                             works, see [List Pagination].
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic [OPTIONS] COMMAND [ARGS]...

  Partner image catalog (PIC).

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  agreements    PIC listing resource version agreements.
  listing       A PIC listing.
  subscription  A PIC subscription.
  version       A PIC listing resource version.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic agreements --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic agreements [OPTIONS] COMMAND [ARGS]...

  PIC listing resource version agreements.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get  Retrieves the agreements for a particular...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic agreements get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic agreements get [OPTIONS]

  Retrieves the agreements for a particular resource version of a listing.

Options:
  --listing-id TEXT        The OCID of the listing. [required]
  --resource-version TEXT  Listing Resource Version. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic listing --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic listing [OPTIONS] COMMAND [ARGS]...

  A PIC listing.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get   Gets the specified listing.
  list  Lists the published listings.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic listing get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic listing get [OPTIONS]

  Gets the specified listing.

Options:
  --listing-id TEXT  The OCID of the listing. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic listing list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic listing list [OPTIONS]

  Lists the published listings.

Options:
  --limit INTEGER          For list pagination. The maximum number of results
                           per page, or items to return in a paginated "List"
                           call. For important details about how pagination
                           works, see [List Pagination].
                           
                           Example: `50`
  --page TEXT              For list pagination. The value of the `opc-next-page`
                           response header from the previous "List" call. For
                           important details about how pagination works, see
                           [List Pagination].
  --sort-order [ASC|DESC]  The sort order to use, either ascending (`ASC`) or
                           descending (`DESC`). The DISPLAYNAME sort order is
                           case sensitive.
  --publisher-name TEXT    A filter to return only the publisher that matches
                           the given publisher name exactly.
  --publisher-type TEXT    A filter to return only publishers that match the
                           given publisher type exactly. Valid types are OCI,
                           ORACLE, TRUSTED, STANDARD.
  --display-name TEXT      A filter to return only resources that match the
                           given display name exactly.
  --all                    Fetches all pages of results. If you provide this
                           option, then you cannot provide the --limit option.
  --page-size INTEGER      When fetching results, the number of results to fetch
                           per call. Only valid when used with --all or --limit,
                           and ignored otherwise.
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic subscription --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic subscription [OPTIONS] COMMAND [ARGS]...

  A PIC subscription.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Create a subscription for listing resource...
  delete  Delete a subscription for a listing resource...
  list    Lists subscriptions for a compartment.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic subscription create --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic subscription create [OPTIONS]

  Create a subscription for listing resource version for a compartment. It
  will take some time to propagate to all regions.

Options:
  -c, --compartment-id TEXT  The compartmentID for the subscription.
  --listing-id TEXT          The OCID of the listing.
  --eula-link TEXT           EULA link
  --time-retrieved DATETIME  Date and time the agreements were retrieved, in
                             RFC3339 format. Example: `2018-03-20T12:32:53.532Z`
                             
                             The following datetime formats are supported:
                             
                             UTC with milliseconds
                             ***********************
                             Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                             Example:
                             2017-09-15T20:30:00.123Z
                             
                             UTC without milliseconds
                             **************************
                             Format: YYYY-MM-
                             DDTHH:mm:ssTZD
                             Example: 2017-09-15T20:30:00Z
                             
                             UTC
                             with minute precision
                             **************************
                             Format: YYYY-MM-DDTHH:mmTZD
                             Example:
                             2017-09-15T20:30Z
                             
                             Timezone with milliseconds
                             ***************************
                             Format: YYYY-MM-
                             DDTHH:mm:ssTZD
                             Example:
                             2017-09-15T12:30:00.456-08:00,
                             2017-09-15T12:30:00.456-0800
                             
                             Timezone without
                             milliseconds
                             *******************************
                             Format: YYYY-MM-DDTHH:mm:ssTZD
                             Example:
                             2017-09-15T12:30:00-08:00,
                             2017-09-15T12:30:00-0800
                             
                             Timezone with minute precision
                             *******************************
                             Format: YYYY-MM-
                             DDTHH:mmTZD
                             Example:
                             2017-09-15T12:30-08:00,
                             2017-09-15T12:30-0800
                             
                             Short date and time
                             ********************
                             The timezone for this date and
                             time will be taken as UTC (Needs to be surrounded
                             by single or double quotes)
                             Format: 'YYYY-MM-DD
                             HH:mm' or "YYYY-MM-DD HH:mm"
                             Example: '2017-09-15
                             17:25'
                             
                             Date Only
                             *********
                             This date will be
                             taken as midnight UTC of that day
                             Format: YYYY-MM-
                             DD
                             Example: 2017-09-15
                             
                             Epoch seconds
                             **************
                             Example: 1412195400
  --signature TEXT           A generated signature for this listing resource
                             version retrieved the agreements API.
  --resource-version TEXT    Listing Resource Version.
  --oracle-tou-link TEXT     Oracle Terms of Use link
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic subscription delete --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic subscription delete [OPTIONS]

  Delete a subscription for a listing resource version for a compartment.

Options:
  --listing-id TEXT          The OCID of the listing. [required]
  -c, --compartment-id TEXT  The [OCID] of the compartment. [required]
  --resource-version TEXT    Listing Resource Version. [required]
  --force                    Perform deletion without prompting for
                             confirmation.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic subscription list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic subscription list [OPTIONS]

  Lists subscriptions for a compartment.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. [required]
  --limit INTEGER                 For list pagination. The maximum number of
                                  results per page, or items to return in a
                                  paginated "List" call. For important details
                                  about how pagination works, see [List
                                  Pagination].
                                  
                                  Example: `50`
  --page TEXT                     For list pagination. The value of the `opc-
                                  next-page` response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --sort-by [TIMECREATED|DISPLAYNAME]
                                  The field to sort by. You can provide one sort
                                  order (`sortOrder`). Default order for
                                  TIMECREATED is descending. Default order for
                                  DISPLAYNAME is ascending. The DISPLAYNAME sort
                                  order is case sensitive.
                                  
                                  **Note:** In
                                  general, some "List" operations (for example,
                                  `ListInstances`) let you optionally filter by
                                  availability domain if the scope of the
                                  resource type is within a single availability
                                  domain. If you call one of these "List"
                                  operations without specifying an availability
                                  domain, the resources are grouped by
                                  availability domain, then sorted.
  --sort-order [ASC|DESC]         The sort order to use, either ascending
                                  (`ASC`) or descending (`DESC`). The
                                  DISPLAYNAME sort order is case sensitive.
  --listing-id TEXT               A filter to return only the listings that
                                  matches the given listing id.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic version --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic version [OPTIONS] COMMAND [ARGS]...

  A PIC listing resource version.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get   Gets the specified listing resource version.
  list  Gets all resource versions for a particular...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic version get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic version get [OPTIONS]

  Gets the specified listing resource version.

Options:
  --listing-id TEXT        The OCID of the listing. [required]
  --resource-version TEXT  Listing Resource Version. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute pic version list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute pic version list [OPTIONS]

  Gets all resource versions for a particular listing.

Options:
  --listing-id TEXT        The OCID of the listing. [required]
  --limit INTEGER          For list pagination. The maximum number of results
                           per page, or items to return in a paginated "List"
                           call. For important details about how pagination
                           works, see [List Pagination].
                           
                           Example: `50`
  --page TEXT              For list pagination. The value of the `opc-next-page`
                           response header from the previous "List" call. For
                           important details about how pagination works, see
                           [List Pagination].
  --sort-order [ASC|DESC]  The sort order to use, either ascending (`ASC`) or
                           descending (`DESC`). The DISPLAYNAME sort order is
                           case sensitive.
  --all                    Fetches all pages of results. If you provide this
                           option, then you cannot provide the --limit option.
  --page-size INTEGER      When fetching results, the number of results to fetch
                           per call. Only valid when used with --all or --limit,
                           and ignored otherwise.
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute shape --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute shape [OPTIONS] COMMAND [ARGS]...

  A compute instance shape that can be used in [LaunchInstance]. For more
  information, see [Overview of the Compute Service].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Lists the shapes that can be used to launch...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute shape list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute shape list [OPTIONS]

  Lists the shapes that can be used to launch an instance within the specified
  compartment. You can filter the list by compatibility with a specific image.

Options:
  -c, --compartment-id TEXT   The [OCID] of the compartment. [required]
  --availability-domain TEXT  The name of the availability domain.
                              
                              Example:
                              `Uocm:PHX-AD-1`
  --limit INTEGER             For list pagination. The maximum number of results
                              per page, or items to return in a paginated "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
                              
                              Example: `50`
  --page TEXT                 For list pagination. The value of the `opc-next-
                              page` response header from the previous "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
  --image-id TEXT             The [OCID] of an image.
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute vnic-attachment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute vnic-attachment [OPTIONS] COMMAND [ARGS]...

  Represents an attachment between a VNIC and an instance. For more
  information, see [Virtual Network Interface Cards (VNICs)].

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get   Gets the information for the specified VNIC...
  list  Lists the VNIC attachments in the specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute vnic-attachment get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute vnic-attachment get [OPTIONS]

  Gets the information for the specified VNIC attachment.

Options:
  --vnic-attachment-id TEXT  The OCID of the VNIC attachment. [required]
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute vnic-attachment list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute vnic-attachment list [OPTIONS]

  Lists the VNIC attachments in the specified compartment. A VNIC attachment
  resides in the same compartment as the attached instance. The list can be
  filtered by instance, VNIC, or availability domain.

Options:
  -c, --compartment-id TEXT   The [OCID] of the compartment. [required]
  --availability-domain TEXT  The name of the availability domain.
                              
                              Example:
                              `Uocm:PHX-AD-1`
  --instance-id TEXT          The OCID of the instance.
  --limit INTEGER             For list pagination. The maximum number of results
                              per page, or items to return in a paginated "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
                              
                              Example: `50`
  --page TEXT                 For list pagination. The value of the `opc-next-
                              page` response header from the previous "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
  --vnic-id TEXT              The OCID of the VNIC.
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment [OPTIONS] COMMAND [ARGS]...

  A base object for all types of attachments between a storage volume and an
  instance. For specific details about iSCSI attachments, see
  [IScsiVolumeAttachment Reference].

  For general information about volume attachments, see [Overview of Block
  Volume Storage].

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  attach                         Attaches the specified storage volume to the...
  attach-iscsi-volume            Attaches the specified storage volume to the...
  attach-paravirtualized-volume  Attaches the specified storage volume to the...
  detach                         Detaches a storage volume from an instance.
  get                            Gets information about the specified volume...
  list                           Lists the volume attachments in the
                                 specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment attach --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment attach [OPTIONS]

  Attaches the specified storage volume to the specified instance.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --type [service_determined|emulated|iscsi|paravirtualized]
                                  The type of volume. The only supported value
                                  are "iscsi" and "paravirtualized". [required]
  --volume-id TEXT                The OCID of the volume. [required]
  --device TEXT                   The device name.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it cannot be changed. Avoid
                                  entering confidential information.
  --is-read-only BOOLEAN          Whether the attachment was created in read-
                                  only mode.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment attach-iscsi-volume --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment attach-iscsi-volume [OPTIONS]

  Attaches the specified storage volume to the specified instance.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --volume-id TEXT                The OCID of the volume. [required]
  --device TEXT                   The device name.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it cannot be changed. Avoid
                                  entering confidential information.
  --is-read-only BOOLEAN          Whether the attachment was created in read-
                                  only mode.
  --use-chap BOOLEAN              Whether to use CHAP authentication for the
                                  volume attachment. Defaults to false.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment attach-paravirtualized-volume --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment attach-paravirtualized-volume 
           [OPTIONS]

  Attaches the specified storage volume to the specified instance.

Options:
  --instance-id TEXT              The OCID of the instance. [required]
  --volume-id TEXT                The OCID of the volume. [required]
  --device TEXT                   The device name.
  --display-name TEXT             A user-friendly name. Does not have to be
                                  unique, and it cannot be changed. Avoid
                                  entering confidential information.
  --is-read-only BOOLEAN          Whether the attachment was created in read-
                                  only mode.
  --is-pv-encryption-in-transit-enabled BOOLEAN
                                  Whether to enable in-transit encryption for
                                  the data volume's paravirtualized attachment.
                                  The default value is false.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment detach --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment detach [OPTIONS]

  Detaches a storage volume from an instance. You must specify the OCID of the
  volume attachment.

  This is an asynchronous operation. The attachment's `lifecycleState` will
  change to DETACHING temporarily until the attachment is completely removed.

Options:
  --volume-attachment-id TEXT     The OCID of the volume attachment. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ATTACHING|ATTACHED|DETACHING|DETACHED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment get --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment get [OPTIONS]

  Gets information about the specified volume attachment.

Options:
  --volume-attachment-id TEXT  The OCID of the volume attachment. [required]
  --from-json TEXT             Provide input to this command as a JSON document
                               from a file using the file://path-to/file syntax.
                               The --generate-full-command-json-input option can
                               be used to generate a sample json file to be used
                               with this command option. The key names are pre-
                               populated and match the command option names
                               (converted to camelCase format, e.g. compartment-
                               id --> compartmentId), while the values of the
                               keys need to be populated by the user before
                               using the sample file as an input to this
                               command. For any command option that accepts
                               multiple values, the value of the key can be a
                               JSON array.
                               
                               Options can still be provided on the
                               command line. If an option exists in both the
                               JSON document and the command line then the
                               command line specified value will be used.
                               
                               For
                               examples on usage of this option, please see our
                               "using CLI with advanced JSON options" link: http
                               s://docs.cloud.oracle.com/iaas/Content/API/SDKDoc
                               s/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help               For detailed help on any of these individual
                               commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci compute volume-attachment list --help
WARNING: Python 2 support is ending on December 31, 2019. Future versions of OCI CLI after January 2020, will not be compatible with Python 2. To avoid interruption at that time, please install OCI CLI in a compatible Python 3 environment.
Usage: oci compute volume-attachment list [OPTIONS]

  Lists the volume attachments in the specified compartment. You can filter
  the list by specifying an instance OCID, volume OCID, or both.

  Currently, the only supported volume attachment type are
  [IScsiVolumeAttachment] and [ParavirtualizedVolumeAttachment].

Options:
  -c, --compartment-id TEXT   The [OCID] of the compartment. [required]
  --availability-domain TEXT  The name of the availability domain.
                              
                              Example:
                              `Uocm:PHX-AD-1`
  --limit INTEGER             For list pagination. The maximum number of results
                              per page, or items to return in a paginated "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
                              
                              Example: `50`
  --page TEXT                 For list pagination. The value of the `opc-next-
                              page` response header from the previous "List"
                              call. For important details about how pagination
                              works, see [List Pagination].
  --instance-id TEXT          The OCID of the instance.
  --volume-id TEXT            The OCID of the volume.
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

