CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'streaming' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming --help
Usage: oci streaming [OPTIONS] COMMAND [ARGS]...

  The CLI for the Streaming Service.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  admin   Admin operations for streaming service
  stream  Stream operations

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin --help
Usage: oci streaming admin [OPTIONS] COMMAND [ARGS]...

  Admin operations for streaming service

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  stream  Detailed representation of a stream,...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream --help
Usage: oci streaming admin stream [OPTIONS] COMMAND [ARGS]...

  Detailed representation of a stream, including all its partitions.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Starts the provisioning of a new stream.
  delete  Deletes a stream and its content.
  get     Gets detailed information about a stream,...
  list    Lists the streams.
  update  Updates the tags applied to the stream.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream create --help
Usage: oci streaming admin stream create [OPTIONS]

  Starts the provisioning of a new stream. To track the progress of the
  provisioning, you can periodically call [GetStream]. In the response, the
  `lifecycleState` parameter of the [Stream] object tells you its current
  state.

Options:
  --name TEXT                     The name of the stream. Avoid entering
                                  confidential information.
                                  
                                  Example:
                                  `TelemetryEvents` [required]
  --partitions INTEGER            The number of partitions in the stream.
                                  [required]
  -c, --compartment-id TEXT       The OCID of the compartment that contains the
                                  stream. [required]
  --retention-in-hours INTEGER    The retention period of the stream, in hours.
                                  Accepted values are between 24 and 168 (7
                                  days). If not specified, the stream will have
                                  a retention period of 24 hours.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair that is applied with
                                  no predefined name, type, or namespace. Exists
                                  for cross-compatibility only. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream delete --help
Usage: oci streaming admin stream delete [OPTIONS]

  Deletes a stream and its content. Stream contents are deleted immediately.
  The service retains records of the stream itself for 90 days after deletion.
  The `lifeCycleState` parameter of the `Stream` object changes to `DELETING`
  and the stream becomes inaccessible for read or write operations. To verify
  that a stream has been deleted, make a [GetStream] request. If the call
  returns the stream's lifecycle state as `DELETED`, then the stream has been
  deleted. If the call returns a "404 Not Found" error, that means all records
  of the stream have been deleted.

Options:
  --stream-id TEXT                The OCID of the stream to delete. [required]
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream get --help
Usage: oci streaming admin stream get [OPTIONS]

  Gets detailed information about a stream, including the number of
  partitions.

Options:
  --stream-id TEXT  The OCID of the stream to retrieve. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream list --help
Usage: oci streaming admin stream list [OPTIONS]

  Lists the streams.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --id TEXT                       A filter to return only resources that match
                                  the given ID exactly.
  --name TEXT                     A filter to return only resources that match
                                  the given name exactly.
  --limit INTEGER                 The maximum number of items to return. The
                                  value must be between 1 and 50. The default is
                                  10.
  --page TEXT                     The page at which to start retrieving results.
  --sort-by [NAME|TIMECREATED]    The field to sort by. You can provide no more
                                  than one sort order. By default, `TIMECREATED`
                                  sorts results in descending order and `NAME`
                                  sorts results in ascending order.
  --sort-order [ASC|DESC]         The sort order to use, either 'asc' or 'desc'.
  --lifecycle-state [CREATING|ACTIVE|DELETING|DELETED|FAILED]
                                  A filter to only return resources that match
                                  the given lifecycle state. The state value is
                                  case-insensitive.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming admin stream update --help
Usage: oci streaming admin stream update [OPTIONS]

  Updates the tags applied to the stream.

Options:
  --stream-id TEXT                The OCID of the stream to update. [required]
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair that is applied with
                                  no predefined name, type, or namespace. Exists
                                  for cross-compatibility only. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream --help
Usage: oci streaming stream [OPTIONS] COMMAND [ARGS]...

  Stream operations

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  cursor   A cursor that indicates the position in the...
  group    Represents the current state of a consumer...
  message  A message in a stream.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream cursor --help
Usage: oci streaming stream cursor [OPTIONS] COMMAND [ARGS]...

  A cursor that indicates the position in the stream from which you want to
  begin consuming messages and which is required by the [GetMessages]
  operation.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create-cursor        Creates a cursor.
  create-group-cursor  Creates a group-cursor.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream cursor create-cursor --help
Usage: oci streaming stream cursor create-cursor [OPTIONS]

  Creates a cursor. Cursors are used to consume a stream, starting from a
  specific point in the partition and going forward from there. You can create
  a cursor based on an offset, a time, the trim horizon, or the most recent
  message in the stream. As the oldest message inside the retention period
  boundary, using the trim horizon effectively lets you consume all messages
  in the stream. A cursor based on the most recent message allows consumption
  of only messages that are added to the stream after you create the cursor.
  Cursors expire five minutes after you receive them from the service.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT                The OCID of the stream to create a cursor for.
                                  [required]
  --partition TEXT                The partition to get messages from. [required]
  --type [AFTER_OFFSET|AT_OFFSET|AT_TIME|LATEST|TRIM_HORIZON]
                                  The type of cursor, which determines the
                                  starting point from which the stream will be
                                  consumed:
                                  
                                  - `AFTER_OFFSET:` The partition
                                  position immediately following the offset you
                                  specify. (Offsets are assigned when you
                                  successfully append a message to a partition
                                  in a stream.) - `AT_OFFSET:` The exact
                                  partition position indicated by the offset you
                                  specify. - `AT_TIME:` A specific point in
                                  time. - `LATEST:` The most recent message in
                                  the partition that was added after the cursor
                                  was created. - `TRIM_HORIZON:` The oldest
                                  message in the partition that is within the
                                  retention period window. [required]
  --offset INTEGER                The offset to consume from if the cursor type
                                  is `AT_OFFSET` or `AFTER_OFFSET`.
  --time DATETIME                 The time to consume from if the cursor type is
                                  `AT_TIME`, expressed in [RFC 3339] timestamp
                                  format.
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream cursor create-group-cursor --help
Usage: oci streaming stream cursor create-group-cursor [OPTIONS]

  Creates a group-cursor.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT                The OCID of the stream to create a cursor for.
                                  [required]
  --type [AT_TIME|LATEST|TRIM_HORIZON]
                                  The type of the cursor. This value is only
                                  used when the group is created. [required]
  --group-name TEXT               Name of the consumer group. [required]
  --time DATETIME                 The time to consume from if type is AT_TIME.
                                  
                                  The following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --instance-name TEXT            A unique identifier for the instance joining
                                  the consumer group. If an instanceName is not
                                  provided, a UUID will be generated and used.
  --timeout-in-ms INTEGER         The amount of a consumer instance inactivity
                                  time, before partition reservations are
                                  released.
  --commit-on-get BOOLEAN         When using consumer-groups, the default
                                  commit-on-get behaviour can be overriden by
                                  setting this value to false. If disabled, a
                                  consumer must manually commit their cursors.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream group --help
Usage: oci streaming stream group [OPTIONS] COMMAND [ARGS]...

  Represents the current state of a consumer group, including partition
  reservations and committed offsets.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  commit     Provides a mechanism to manually commit...
  get        Returns the current state of a consumer...
  heartbeat  Allows long-running processes to extend the...
  update     Forcefully changes the current location of a...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream group commit --help
Usage: oci streaming stream group commit [OPTIONS]

  Provides a mechanism to manually commit offsets, if not using commit-on-get
  consumer semantics. This commits offsets assicated with the provided cursor,
  extends the timeout on each of the affected partitions, and returns an
  updated cursor.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT  The OCID of the stream for which the group is committing
                    offsets. [required]
  --cursor TEXT     The group-cursor representing the offsets of the group. This
                    cursor is retrieved from the CreateGroupCursor API call.
                    [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream group get --help
Usage: oci streaming stream group get [OPTIONS]

  Returns the current state of a consumer group.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT   The OCID of the stream, on which the group is operating.
                     [required]
  --group-name TEXT  The name of the consumer group. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file using the file://path-to/file syntax.
                     
                     The --generate-
                     full-command-json-input option can be used to generate a
                     sample json file to be used with this command option. The
                     key names are pre-populated and match the command option
                     names (converted to camelCase format, e.g. compartment-id
                     --> compartmentId), while the values of the keys need to be
                     populated by the user before using the sample file as an
                     input to this command. For any command option that accepts
                     multiple values, the value of the key can be a JSON array.
                     Options can still be provided on the command line. If an
                     option exists in both the JSON document and the command
                     line then the command line specified value will be used.
                     For examples on usage of this option, please see our "using
                     CLI with advanced JSON options" link: https://docs.cloud.or
                     acle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                     Options
  -?, -h, --help     For detailed help on any of these individual commands,
                     enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream group heartbeat --help
Usage: oci streaming stream group heartbeat [OPTIONS]

  Allows long-running processes to extend the timeout on partitions reserved
  by a consumer instance.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT  The OCID of the stream for which the group is committing
                    offsets. [required]
  --cursor TEXT     The group-cursor representing the offsets of the group. This
                    cursor is retrieved from the CreateGroupCursor API call.
                    [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream group update --help
Usage: oci streaming stream group update [OPTIONS]

  Forcefully changes the current location of a group as a whole; reseting
  processing location of all consumers to a particular location in the stream.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT                The OCID of the stream, on which the group is
                                  operating. [required]
  --group-name TEXT               The name of the consumer group. [required]
  --type [AT_TIME|LATEST|TRIM_HORIZON]
                                  The type of the cursor.
  --time DATETIME                 The time to consume from if type is AT_TIME.
                                  
                                  The following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream message --help
Usage: oci streaming stream message [OPTIONS] COMMAND [ARGS]...

  A message in a stream.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get  Returns messages from the specified stream...
  put  Emits messages to a stream.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream message get --help
Usage: oci streaming stream message get [OPTIONS]

  Returns messages from the specified stream using the specified cursor as the
  starting point for consumption. By default, the number of messages returned
  is undefined, but the service returns as many as possible. To get messages,
  you must first obtain a cursor using the [CreateCursor] operation. In the
  response, retrieve the value of the 'opc-next-cursor' header to pass as a
  parameter to get the next batch of messages in the stream.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT  The OCID of the stream to get messages from. [required]
  --cursor TEXT     The cursor used to consume the stream. [required]
  --limit INTEGER   The maximum number of messages to return. You can specify
                    any value up to 10000. By default, the service returns as
                    many messages as possible. Consider your average message
                    size to help avoid exceeding throughput on the stream.
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci streaming stream message put --help
Usage: oci streaming stream message put [OPTIONS]

  Emits messages to a stream. There's no limit to the number of messages in a
  request, but the total size of a message or request must be 1 MiB or less.
  The service calculates the partition ID from the message key and stores
  messages that share a key on the same partition. If a message does not
  contain a key or if the key is null, the service generates a message key for
  you. The partition ID cannot be passed as a parameter.

  The top level --endpoint parameter must be supplied for this operation.

Options:
  --stream-id TEXT         The OCID of the stream where you want to put
                           messages. [required]
  --messages COMPLEX TYPE  The array of messages to put into a stream.
                           This is a
                           complex type whose value must be valid JSON. The
                           value can be provided as a string on the command line
                           or passed in as a file using
                           the file://path/to/file
                           syntax.
                           
                           The --generate-param-json-input option can
                           be used to generate an example of the JSON which must
                           be provided. We recommend storing this example
                           in a
                           file, modifying it as needed and then passing it back
                           in via the file:// syntax.
                            [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file using the file://path-to/file syntax.
                           
                           The
                           --generate-full-command-json-input option can be used
                           to generate a sample json file to be used with this
                           command option. The key names are pre-populated and
                           match the command option names (converted to
                           camelCase format, e.g. compartment-id -->
                           compartmentId), while the values of the keys need to
                           be populated by the user before using the sample file
                           as an input to this command. For any command option
                           that accepts multiple values, the value of the key
                           can be a JSON array.
                           
                           Options can still be provided
                           on the command line. If an option exists in both the
                           JSON document and the command line then the command
                           line specified value will be used.
                           
                           For examples on
                           usage of this option, please see our "using CLI with
                           advanced JSON options" link: https://docs.cloud.oracl
                           e.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJ
                           SONOptions
  -?, -h, --help           For detailed help on any of these individual
                           commands, enter <command> --help.

