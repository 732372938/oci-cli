CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'events' command. 
This file is generated by running scripts/doc-gen/generate_cli_doc_pages,py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events --help
Usage: oci events [OPTIONS] COMMAND [ARGS]...

  CLI for the Events Service. Use this CLI to manage rules and actions that
  create automation in your tenancy. For more information, see [Overview of
  Events](/iaas/Content/Events/Concepts/eventsoverview.htm).

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  rule  The configuration details of an Events rule.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule --help
Usage: oci events rule [OPTIONS] COMMAND [ARGS]...

  The configuration details of an Events rule. For more information, see
  [Managing Rules for Events]

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  change-compartment  Moves a rule into a different compartment...
  create              Creates a new rule.
  delete              Deletes a rule.
  get                 Retrieves a rule.
  list                Lists rules for this compartment.
  update              Updates a rule.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule change-compartment --help
Usage: oci events rule change-compartment [OPTIONS]

  Moves a rule into a different compartment within the same tenancy. For
  information about moving resources between compartments, see [Moving
  Resources to a Different Compartment].

Options:
  --rule-id TEXT             The [OCID] of this rule. [required]
  -c, --compartment-id TEXT  The [OCID] of the compartment into which the
                             resource should be moved. [required]
  --if-match TEXT            For optimistic concurrency control. In the PUT or
                             DELETE call for a resource, set the if-match
                             parameter to the value of the etag from a previous
                             GET or POST response for that resource.  The
                             resource will be updated or deleted only if the
                             etag you provide matches the resource's current
                             etag value.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file using the file://path-to/file syntax.
                             The --generate-full-command-json-input option can
                             be used to generate a sample json file to be used
                             with this command option. The key names are pre-
                             populated and match the command option names
                             (converted to camelCase format, e.g. compartment-id
                             --> compartmentId), while the values of the keys
                             need to be populated by the user before using the
                             sample file as an input to this command. For any
                             command option that accepts multiple values, the
                             value of the key can be a JSON array.
                             
                             Options can
                             still be provided on the command line. If an option
                             exists in both the JSON document and the command
                             line then the command line specified value will be
                             used.
                             
                             For examples on usage of this option, please
                             see our "using CLI with advanced JSON options"
                             link: https://docs.cloud.oracle.com/iaas/Content/AP
                             I/SDKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help             For detailed help on any of these individual
                             commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule create --help
Usage: oci events rule create [OPTIONS]

  Creates a new rule.

Options:
  --display-name TEXT             A string that describes the rule. It does not
                                  have to be unique, and you can change it.
                                  Avoid entering confidential information.
                                  [required]
  --is-enabled BOOLEAN            Whether or not this rule is currently enabled.
                                  Example: `true` [required]
  --condition TEXT                A filter that specifies the event that will
                                  trigger actions associated with this rule. A
                                  few important things to remember about
                                  filters:
                                  
                                  * Fields not mentioned in the
                                  condition are ignored. You can create a valid
                                  filter that matches all events with two curly
                                  brackets: `{}`
                                  
                                    For more examples, see
                                  [Matching Events with Filters]. * For a
                                  condition with fileds to match an event, the
                                  event must contain all the field names listed
                                  in the condition. Field names must appear in
                                  the condition with the same nesting structure
                                  used in the event.
                                  
                                    For a list of reference
                                  events, see [Services that Produce Events]. *
                                  Rules apply to events in the compartment in
                                  which you create them and any child
                                  compartments. This means that a condition
                                  specified by a rule only matches events
                                  emitted from resources in the compartment or
                                  any of its child compartments. * The condition
                                  is a string value in a JSON object, but
                                  numbers in conditions are converted from
                                  strings to numbers before they are evaluated
                                  for matches. This means that 100, 100.0 or
                                  1.0e2 are all considered equal. * Boolean
                                  values are converted to numbers and then
                                  evaluated. This means true and True are
                                  considered equal, as are False and false. *
                                  Wildcard matching is supported with the
                                  asterisk (*) character.
                                  
                                    For examples of
                                  wildcard matching, see [Matching Events with
                                  Filters]
                                  
                                  Example: `\"eventType\": \"com.oracl
                                  ecloud.databaseservice.autonomous.database.bac
                                  kup.end\"` [required]
  -c, --compartment-id TEXT       The [OCID] of the compartment to which this
                                  rule belongs. [required]
  --actions COMPLEX TYPE          This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --description TEXT              A string that describes the details of the
                                  rule. It does not have to be unique, and you
                                  can change it. Avoid entering confidential
                                  information.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. Exists for cross-
                                  compatibility only. For more information, see
                                  [Resource Tags].
                                  
                                  Example: `{"Department":
                                  "Finance"}`
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule delete --help
Usage: oci events rule delete [OPTIONS]

  Deletes a rule.

Options:
  --rule-id TEXT                  The [OCID] of this rule. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the if-
                                  match parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule get --help
Usage: oci events rule get [OPTIONS]

  Retrieves a rule.

Options:
  --rule-id TEXT    The [OCID] of this rule. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a file
                    using the file://path-to/file syntax.
                    
                    The --generate-full-
                    command-json-input option can be used to generate a sample
                    json file to be used with this command option. The key names
                    are pre-populated and match the command option names
                    (converted to camelCase format, e.g. compartment-id -->
                    compartmentId), while the values of the keys need to be
                    populated by the user before using the sample file as an
                    input to this command. For any command option that accepts
                    multiple values, the value of the key can be a JSON array.
                    Options can still be provided on the command line. If an
                    option exists in both the JSON document and the command line
                    then the command line specified value will be used.
                    
                    For
                    examples on usage of this option, please see our "using CLI
                    with advanced JSON options" link: https://docs.cloud.oracle.
                    com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                    s
  -?, -h, --help    For detailed help on any of these individual commands, enter
                    <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule list --help
Usage: oci events rule list [OPTIONS]

  Lists rules for this compartment.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment to which this
                                  rule belongs. [required]
  --limit INTEGER                 The maximum number of items to return. 1 is
                                  the minimum, 50 is the maximum. Default: 10
  --page TEXT                     For list pagination. The value of the opc-
                                  next-page response header from the previous
                                  "List" call. For important details about how
                                  pagination works, see [List Pagination].
  --lifecycle-state [CREATING|ACTIVE|INACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  A filter to return only rules that match the
                                  lifecycle state in this parameter.
                                  
                                  Example:
                                  `Creating`
  --display-name TEXT             A filter to return only rules with
                                  descriptions that match the displayName string
                                  in this parameter.
                                  
                                  Example: `"This rule sends
                                  a notification upon completion of DbaaS
                                  backup."`
  --sort-by [TIME_CREATED|ID|DISPLAY_NAME]
                                  Specifies the attribute with which to sort the
                                  rules.
                                  
                                  Default: `timeCreated`
                                  
                                  *
                                  **TIME_CREATED:** Sorts by timeCreated. *
                                  **DISPLAY_NAME:** Sorts by displayName. *
                                  **ID:** Sorts by id.
  --sort-order [ASC|DESC]         Specifies sort order.
                                  
                                  * **ASC:** Ascending
                                  sort order. * **DESC:** Descending sort order.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci events rule update --help
Usage: oci events rule update [OPTIONS]

  Updates a rule.

Options:
  --rule-id TEXT                  The [OCID] of this rule. [required]
  --display-name TEXT             A string that describes the rule. It does not
                                  have to be unique, and you can change it.
                                  Avoid entering confidential information.
  --description TEXT              A string that describes the details of the
                                  rule. It does not have to be unique, and you
                                  can change it. Avoid entering confidential
                                  information.
  --is-enabled BOOLEAN            Whether or not this rule is currently enabled.
                                  Example: `true`
  --condition TEXT                A filter that specifies the event that will
                                  trigger actions associated with this rule. A
                                  few important things to remember about
                                  filters:
                                  
                                  * Fields not mentioned in the
                                  condition are ignored. You can create a valid
                                  filter that matches all events with two curly
                                  brackets: `{}`
                                  
                                    For more examples, see
                                  [Matching Events with Filters]. * For a
                                  condition with fileds to match an event, the
                                  event must contain all the field names listed
                                  in the condition. Field names must appear in
                                  the condition with the same nesting structure
                                  used in the event.
                                  
                                    For a list of reference
                                  events, see [Services that Produce Events]. *
                                  Rules apply to events in the compartment in
                                  which you create them and any child
                                  compartments. This means that a condition
                                  specified by a rule only matches events
                                  emitted from resources in the compartment or
                                  any of its child compartments. * The condition
                                  is a string value in a JSON object, but
                                  numbers in conditions are converted from
                                  strings to numbers before they are evaluated
                                  for matches. This means that 100, 100.0 or
                                  1.0e2 are all considered equal. * Boolean
                                  values are converted to numbers and then
                                  evaluated. This means true and True are
                                  considered equal, as are False and false. *
                                  Wildcard matching is supported with the
                                  asterisk (*) character.
                                  
                                    For examples of
                                  wildcard matching, see [Matching Events with
                                  Filters]
                                  
                                  Example: `\"eventType\": \"com.oracl
                                  ecloud.databaseservice.autonomous.database.bac
                                  kup.end\"`
  --actions COMPLEX TYPE          This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. Exists for cross-
                                  compatibility only. For more information, see
                                  [Resource Tags].
                                  
                                  Example: `{"Department":
                                  "Finance"}`
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  
                                  Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the if-
                                  match parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|UPDATING|DELETING|DELETED|FAILED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. Multiple states can be
                                  specified, returning on the first state. For
                                  example, --wait-for-state SUCCEEDED --wait-
                                  for-state FAILED would return on whichever
                                  lifecycle state is reached first. If timeout
                                  is reached, a return code of 2 is returned.
                                  For any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

