# coding: utf-8
# Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.

import io
import os
import unittest
from . import util
import oci_cli
from .conftest import runner

help_template = u"""
++++++++++++++++++++++++++++++++++++++++++++++
$ oci {cmd}
{output}
""".lstrip()


class TestHelp(unittest.TestCase):

    def setUp(self):
        self.runner = runner()
        inline_help_dir = 'tests/output/inline-help/'
        for help_file in os.listdir(inline_help_dir):
            file_path = os.path.join(inline_help_dir, help_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except Exception as e:
                print(e)

    def test_help_on_all_commands(self):
        # Get a list of commands, where each command is a list of strings corresponding to the
        # command structure. Example: ['bucket', 'list']
        already_started_commands = set()
        commands = sorted(util.collect_commands(oci_cli.cli))
        for command in commands:
            if len(command) < 1:
                continue
            output_file = 'tests/output/inline-help/' + command[0] + '.txt'
            if not os.path.exists("tests/output/inline-help/"):
                os.makedirs("tests/output/inline-help/")

            with io.open(output_file, mode='a+') as f:
                if command[0] not in already_started_commands:
                    f.write(u'CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/. ')
                    f.write(
                        u'This file contains all the help for the \'{}\' command in version {} of the CLI. \nThis file is generated by running test_help.py, which dumps the output of --help for every command.\n\n'.format(
                            command[0], oci_cli.__version__))
                    already_started_commands.add(command[0])

                # Test the command with -?, -h, and --help.
                help_command = command + ['-?']
                result = self.invoke_example_operation(help_command + ['--cli-rc-file', 'tests/resources/default_files/use_click_help'])
                if result.exit_code != 0:
                    print(command)
                    print(result.output)
                self.validate_response(result)

                help_command = command + ['-h']
                result = self.invoke_example_operation(help_command + ['--cli-rc-file', 'tests/resources/default_files/use_click_help'])
                self.validate_response(result)

                help_command = command + ['--help']
                result = self.invoke_example_operation(help_command + ['--cli-rc-file', 'tests/resources/default_files/use_click_help'])
                self.validate_response(result)

                f.write(help_template.format(
                    cmd=" ".join(help_command),
                    output=result.output
                ))

    def invoke_example_operation(self, command_list):
        return self.runner.invoke(oci_cli.cli, command_list)

    def validate_response(self, result):
        self.assertEqual(0, result.exit_code)

        # Ensure that compartment-id shortcut is set.
        if "--compartment-id TEXT" in result.output:
            assert ("-c, --compartment-id" in result.output)


if __name__ == '__main__':
    unittest.main()
