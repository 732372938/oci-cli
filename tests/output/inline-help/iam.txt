CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/. This file contains all the help for the 'iam' command in version 2.4.35 of the CLI. 
This file is generated by running test_help.py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam --help
Usage: oci iam [OPTIONS] COMMAND [ARGS]...

  CLIs for managing users, groups, compartments, and policies.

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  auth-token           An `AuthToken` is an Oracle-generated token...
  availability-domain  One or more isolated, fault-tolerant Oracle...
  compartment          A collection of related resources.
  customer-secret-key  A `CustomerSecretKey` is an Oracle-provided...
  dynamic-group        A dynamic group defines a matching rule.
  fault-domain         A Fault Domain is a logical grouping of...
  group                A collection of users who all need the same...
  policy               A document that specifies the type of access...
  region               A localized geographic area, such as Phoenix,...
  region-subscription  An object that represents your tenancy's...
  smtp-credential      Simple Mail Transfer Protocol (SMTP)...
  tag                  A tag definition that belongs to a specific...
  tag-namespace        A managed container for defined tags.
  user                 An individual employee or system that needs...
  work-request         The asynchronous API request does not take...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam auth-token --help
Usage: oci iam auth-token [OPTIONS] COMMAND [ARGS]...

  An `AuthToken` is an Oracle-generated token string that you can use to
  authenticate with third-party APIs that do not support Oracle Cloud
  Infrastructure's signature-based authentication. For example, use an
  `AuthToken` to authenticate with a Swift client with the Object Storage
  Service.

  The auth token is associated with the user's Console login. Auth tokens
  never expire. A user can have up to two auth tokens at a time.

  **Note:** The token is always an Oracle-generated string; you can't change
  it to a string of your choice.

  For more information, see [Managing User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new auth token for the specified...
  delete  Deletes the specified auth token for the...
  list    Lists the auth tokens for the specified user.
  update  Updates the specified auth token's...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam auth-token create --help
Usage: oci iam auth-token create [OPTIONS]

  Creates a new auth token for the specified user. For information about what
  auth tokens are for, see [Managing User Credentials].

  You must specify a *description* for the auth token (although it can be an
  empty string). It does not have to be unique, and you can change it anytime
  with [UpdateAuthToken].

  Every user has permission to create an auth token for *their own user ID*.
  An administrator in your organization does not need to write a policy to
  give users this ability. To compare, administrators who have permission to
  the tenancy can use this operation to create an auth token for any user,
  including themselves.

Options:
  --description TEXT  The description you assign to the auth token during
                      creation. Does not have to be unique, and it's changeable.
                      [required]
  --user-id TEXT      The OCID of the user. [required]
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file.
                      
                      Options can still be provided on the command line.
                      If an option exists in both the JSON document and the
                      command line then the command line specified value will be
                      used
  -?, -h, --help      Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam auth-token delete --help
Usage: oci iam auth-token delete [OPTIONS]

  Deletes the specified auth token for the specified user.

Options:
  --user-id TEXT        The OCID of the user. [required]
  --auth-token-id TEXT  The OCID of the auth token. [required]
  --if-match TEXT       For optimistic concurrency control. In the PUT or DELETE
                        call for a resource, set the `if-match` parameter to the
                        value of the etag from a previous GET or POST response
                        for that resource.  The resource will be updated or
                        deleted only if the etag you provide matches the
                        resource's current etag value.
  --force               Perform deletion without prompting for confirmation.
  --from-json TEXT      Provide input to this command as a JSON document from a
                        file.
                        
                        Options can still be provided on the command
                        line. If an option exists in both the JSON document and
                        the command line then the command line specified value
                        will be used
  -?, -h, --help        Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam auth-token list --help
Usage: oci iam auth-token list [OPTIONS]

  Lists the auth tokens for the specified user. The returned object contains
  the token's OCID, but not the token itself. The actual token is returned
  only upon creation.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam auth-token update --help
Usage: oci iam auth-token update [OPTIONS]

  Updates the specified auth token's description.

Options:
  --user-id TEXT        The OCID of the user. [required]
  --auth-token-id TEXT  The OCID of the auth token. [required]
  --description TEXT    The description you assign to the auth token. Does not
                        have to be unique, and it's changeable.
  --if-match TEXT       For optimistic concurrency control. In the PUT or DELETE
                        call for a resource, set the `if-match` parameter to the
                        value of the etag from a previous GET or POST response
                        for that resource.  The resource will be updated or
                        deleted only if the etag you provide matches the
                        resource's current etag value.
  --from-json TEXT      Provide input to this command as a JSON document from a
                        file.
                        
                        Options can still be provided on the command
                        line. If an option exists in both the JSON document and
                        the command line then the command line specified value
                        will be used
  -?, -h, --help        Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam availability-domain --help
Usage: oci iam availability-domain [OPTIONS] COMMAND [ARGS]...

  One or more isolated, fault-tolerant Oracle data centers that host cloud
  resources such as instances, volumes, and subnets. A region contains several
  Availability Domains. For more information, see [Regions and Availability
  Domains].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  list  Lists the availability domains in your...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam availability-domain list --help
Usage: oci iam availability-domain list [OPTIONS]

  Lists the availability domains in your tenancy. Specify the OCID of either
  the tenancy or another of your compartments as the value for the compartment
  ID (remember that the tenancy is simply the root compartment). See [Where to
  Get the Tenancy's OCID and User's OCID]. Note that the order of the results
  returned can change if availability domains are added or removed; therefore,
  do not create a dependency on the list order.

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment --help
Usage: oci iam compartment [OPTIONS] COMMAND [ARGS]...

  A collection of related resources. Compartments are a fundamental component
  of Oracle Cloud Infrastructure for organizing and isolating your cloud
  resources. You use them to clearly separate resources for the purposes of
  measuring usage and billing, access (through the use of IAM Service
  policies), and isolation (separating the resources for one project or
  business unit from another). A common approach is to create a compartment
  for each major part of your organization. For more information, see
  [Overview of the IAM Service] and also [Setting Up Your Tenancy].

  To place a resource in a compartment, simply specify the compartment ID in
  the "Create" request object when initially creating the resource. For
  example, to launch an instance into a particular compartment, specify that
  compartment's OCID in the `LaunchInstance` request. You can't move an
  existing resource from one compartment to another.

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new compartment in the specified...
  delete  Deletes the specified compartment.
  get     Gets the specified compartment's information.
  list    Lists the compartments in a specified...
  update  Updates the specified compartment's...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment create --help
Usage: oci iam compartment create [OPTIONS]

  Creates a new compartment in the specified compartment.

  **Important:** Compartments cannot be deleted.

  Specify the parent compartment's OCID as the compartment ID in the request
  object. Remember that the tenancy is simply the root compartment. For
  information about OCIDs, see [Resource Identifiers].

  You must also specify a *name* for the compartment, which must be unique
  across all compartments in your tenancy. You can use this name or the OCID
  when writing policies that apply to the compartment. For more information
  about policies, see [How Policies Work].

  You must also specify a *description* for the compartment (although it can
  be an empty string). It does not have to be unique, and you can change it
  anytime with [UpdateCompartment].

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

Options:
  -c, --compartment-id TEXT       The OCID of the parent compartment containing
                                  the compartment. [required]
  --name TEXT                     The name you assign to the compartment during
                                  creation. The name must be unique across all
                                  compartments in the parent compartment. Avoid
                                  entering confidential information. [required]
  --description TEXT              The description you assign to the compartment
                                  during creation. Does not have to be unique,
                                  and it's changeable. [required]
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment delete --help
Usage: oci iam compartment delete [OPTIONS]

  Deletes the specified compartment. The compartment must be empty.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment get --help
Usage: oci iam compartment get [OPTIONS]

  Gets the specified compartment's information.

  This operation does not return a list of all the resources inside the
  compartment. There is no single API operation that does that. Compartments
  can contain multiple types of resources (instances, block storage volumes,
  etc.). To find out what's in a compartment, you must call the "List"
  operation for each resource type and specify the compartment's OCID as a
  query parameter in the request. For example, call the [ListInstances]
  operation in the Cloud Compute Service or the [ListVolumes] operation in
  Cloud Block Storage.

Options:
  -c, --compartment-id TEXT  The OCID of the compartment. [required]
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment list --help
Usage: oci iam compartment list [OPTIONS]

  Lists the compartments in a specified compartment. The members of the list
  returned depends on the values set for several parameters.

  With the exception of the tenancy (root compartment), the ListCompartments
  operation returns only the first-level child compartments in the parent
  compartment specified in `compartmentId`. The list does not include any
  subcompartments of the child compartments (grandchildren).

  The parameter `accessLevel` specifies whether to return only those
  compartments for which the requestor has INSPECT permissions on at least one
  resource directly or indirectly (the resource can be in a subcompartment).

  The parameter `compartmentIdInSubtree` applies only when you perform
  ListCompartments on the tenancy (root compartment). When set to true, the
  entire hierarchy of compartments can be returned. To get a full list of all
  compartments and subcompartments in the tenancy (root compartment), set the
  parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.

  See [Where to Get the Tenancy's OCID and User's OCID].

Options:
  -c, --compartment-id TEXT       The OCID of the parent compartment (remember
                                  that the tenancy is simply the root
                                  compartment). If not provided, this parameter
                                  will use the tenancy from the config file.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous "List" call.
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated "List" call.
  --access-level [ANY|ACCESSIBLE]
                                  Valid values are `ANY` and `ACCESSIBLE`.
                                  Default is `ANY`. Setting this to `ACCESSIBLE`
                                  returns only those compartments for which the
                                  user has INSPECT permissions directly or
                                  indirectly (permissions can be on a resource
                                  in a subcompartment). For the compartments on
                                  which the user indirectly has INSPECT
                                  permissions, a restricted set of fields is
                                  returned.
                                  
                                  When set to `ANY` permissions are
                                  not checked.
  --compartment-id-in-subtree BOOLEAN
                                  Default is false. Can only be set to true when
                                  performing ListCompartments on the tenancy
                                  (root compartment). When set to true, the
                                  hierarchy of compartments is traversed and all
                                  compartments and subcompartments in the
                                  tenancy are returned depending on the the
                                  setting of `accessLevel`.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam compartment update --help
Usage: oci iam compartment update [OPTIONS]

  Updates the specified compartment's description or name. You can't update
  the root compartment.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment. [required]
  --description TEXT              The description you assign to the compartment.
                                  Does not have to be unique, and it's
                                  changeable.
  --name TEXT                     The new name you assign to the compartment.
                                  The name must be unique across all
                                  compartments in the parent compartment. Avoid
                                  entering confidential information.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam customer-secret-key --help
Usage: oci iam customer-secret-key [OPTIONS] COMMAND [ARGS]...

  A `CustomerSecretKey` is an Oracle-provided key for using the Object Storage
  Service's [Amazon S3 compatible API]. A user can have up to two secret keys
  at a time.

  **Note:** The secret key is always an Oracle-generated string; you can't
  change it to a string of your choice.

  For more information, see [Managing User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new secret key for the specified...
  delete  Deletes the specified secret key for the...
  list    Lists the secret keys for the specified user.
  update  Updates the specified secret key's...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam customer-secret-key create --help
Usage: oci iam customer-secret-key create [OPTIONS]

  Creates a new secret key for the specified user. Secret keys are used for
  authentication with the Object Storage Service's Amazon S3 compatible API.
  For information, see [Managing User Credentials].

  You must specify a *description* for the secret key (although it can be an
  empty string). It does not have to be unique, and you can change it anytime
  with [UpdateCustomerSecretKey].

  Every user has permission to create a secret key for *their own user ID*. An
  administrator in your organization does not need to write a policy to give
  users this ability. To compare, administrators who have permission to the
  tenancy can use this operation to create a secret key for any user,
  including themselves.

Options:
  --display-name TEXT  The name you assign to the secret key during creation.
                       Does not have to be unique, and it's changeable.
                       [required]
  --user-id TEXT       The OCID of the user. [required]
  --from-json TEXT     Provide input to this command as a JSON document from a
                       file.
                       
                       Options can still be provided on the command line.
                       If an option exists in both the JSON document and the
                       command line then the command line specified value will
                       be used
  -?, -h, --help       Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam customer-secret-key delete --help
Usage: oci iam customer-secret-key delete [OPTIONS]

  Deletes the specified secret key for the specified user.

Options:
  --user-id TEXT                 The OCID of the user. [required]
  --customer-secret-key-id TEXT  The OCID of the secret key. [required]
  --if-match TEXT                For optimistic concurrency control. In the PUT
                                 or DELETE call for a resource, set the `if-
                                 match` parameter to the value of the etag from
                                 a previous GET or POST response for that
                                 resource.  The resource will be updated or
                                 deleted only if the etag you provide matches
                                 the resource's current etag value.
  --force                        Perform deletion without prompting for
                                 confirmation.
  --from-json TEXT               Provide input to this command as a JSON
                                 document from a file.
                                 
                                 Options can still be
                                 provided on the command line. If an option
                                 exists in both the JSON document and the
                                 command line then the command line specified
                                 value will be used
  -?, -h, --help                 Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam customer-secret-key list --help
Usage: oci iam customer-secret-key list [OPTIONS]

  Lists the secret keys for the specified user. The returned object contains
  the secret key's OCID, but not the secret key itself. The actual secret key
  is returned only upon creation.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam customer-secret-key update --help
Usage: oci iam customer-secret-key update [OPTIONS]

  Updates the specified secret key's description.

Options:
  --user-id TEXT                 The OCID of the user. [required]
  --customer-secret-key-id TEXT  The OCID of the secret key. [required]
  --display-name TEXT            The description you assign to the secret key.
                                 Does not have to be unique, and it's
                                 changeable.
  --if-match TEXT                For optimistic concurrency control. In the PUT
                                 or DELETE call for a resource, set the `if-
                                 match` parameter to the value of the etag from
                                 a previous GET or POST response for that
                                 resource.  The resource will be updated or
                                 deleted only if the etag you provide matches
                                 the resource's current etag value.
  --from-json TEXT               Provide input to this command as a JSON
                                 document from a file.
                                 
                                 Options can still be
                                 provided on the command line. If an option
                                 exists in both the JSON document and the
                                 command line then the command line specified
                                 value will be used
  -?, -h, --help                 Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group --help
Usage: oci iam dynamic-group [OPTIONS] COMMAND [ARGS]...

  A dynamic group defines a matching rule. Every bare metal or virtual machine
  instance is deployed with an instance certificate. The certificate contains
  metadata about the instance. This includes the instance OCID and the
  compartment OCID, along with a few other optional properties. When an API
  call is made using this instance certificate as the authenticator, the
  certificate can be matched to one or multiple dynamic groups. The instance
  can then get access to the API based on the permissions granted in policies
  written for the dynamic groups.

  This works like regular user/group membership. But in that case, the
  membership is a static relationship, whereas in a dynamic group, the
  membership of an instance certificate to a dynamic group is determined
  during runtime. For more information, see [Managing Dynamic Groups].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new dynamic group in your tenancy.
  delete  Deletes the specified dynamic group.
  get     Gets the specified dynamic group's...
  list    Lists the dynamic groups in your tenancy.
  update  Updates the specified dynamic group.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group create --help
Usage: oci iam dynamic-group create [OPTIONS]

  Creates a new dynamic group in your tenancy.

  You must specify your tenancy's OCID as the compartment ID in the request
  object (remember that the tenancy is simply the root compartment). Notice
  that IAM resources (users, groups, compartments, and some policies) reside
  within the tenancy itself, unlike cloud resources such as compute instances,
  which typically reside within compartments inside the tenancy. For
  information about OCIDs, see [Resource Identifiers].

  You must also specify a *name* for the dynamic group, which must be unique
  across all dynamic groups in your tenancy, and cannot be changed. Note that
  this name has to be also unique accross all groups in your tenancy. You can
  use this name or the OCID when writing policies that apply to the dynamic
  group. For more information about policies, see [How Policies Work].

  You must also specify a *description* for the dynamic group (although it can
  be an empty string). It does not have to be unique, and you can change it
  anytime with [UpdateDynamicGroup].

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

Options:
  -c, --compartment-id TEXT       The OCID of the tenancy containing the group.
                                  If not provided, this parameter will use the
                                  tenancy from the config file.
  --name TEXT                     The name you assign to the group during
                                  creation. The name must be unique across all
                                  groups in the tenancy and cannot be changed.
                                  [required]
  --matching-rule TEXT            The matching rule to dynamically match an
                                  instance certificate to this dynamic group.
                                  For rule syntax, see [Managing Dynamic
                                  Groups]. [required]
  --description TEXT              The description you assign to the group during
                                  creation. Does not have to be unique, and it's
                                  changeable. [required]
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group delete --help
Usage: oci iam dynamic-group delete [OPTIONS]

  Deletes the specified dynamic group.

Options:
  --dynamic-group-id TEXT         The OCID of the dynamic group. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group get --help
Usage: oci iam dynamic-group get [OPTIONS]

  Gets the specified dynamic group's information.

Options:
  --dynamic-group-id TEXT  The OCID of the dynamic group. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group list --help
Usage: oci iam dynamic-group list [OPTIONS]

  Lists the dynamic groups in your tenancy. You must specify your tenancy's
  OCID as the value for the compartment ID (remember that the tenancy is
  simply the root compartment). See [Where to Get the Tenancy's OCID and
  User's OCID].

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam dynamic-group update --help
Usage: oci iam dynamic-group update [OPTIONS]

  Updates the specified dynamic group.

Options:
  --dynamic-group-id TEXT         The OCID of the dynamic group. [required]
  --description TEXT              The description you assign to the dynamic
                                  group. Does not have to be unique, and it's
                                  changeable.
  --matching-rule TEXT            The matching rule to dynamically match an
                                  instance certificate to this dynamic group.
                                  For rule syntax, see [Managing Dynamic
                                  Groups].
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam fault-domain --help
Usage: oci iam fault-domain [OPTIONS] COMMAND [ARGS]...

  A Fault Domain is a logical grouping of hardware and infrastructure within
  an Availability Domain that can become unavailable in its entirety either
  due to hardware failure such as Top-of-rack (TOR) switch failure or due to
  planned software maintenance such as security updates that reboot your
  instances.

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  list  Lists the Fault Domains in your tenancy.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam fault-domain list --help
Usage: oci iam fault-domain list [OPTIONS]

  Lists the Fault Domains in your tenancy. Specify the OCID of either the
  tenancy or another of your compartments as the value for the compartment ID
  (remember that the tenancy is simply the root compartment). See [Where to
  Get the Tenancy's OCID and User's OCID].

Options:
  -c, --compartment-id TEXT   The OCID of the parent compartment (remember that
                              the tenancy is simply the root compartment).
                              [required]
  --availability-domain TEXT  The name of the availibilityDomain. [required]
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file.
                              
                              Options can still be provided on the
                              command line. If an option exists in both the JSON
                              document and the command line then the command
                              line specified value will be used
  -?, -h, --help              Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group --help
Usage: oci iam group [OPTIONS] COMMAND [ARGS]...

  A collection of users who all need the same type of access to a particular
  set of resources or compartment. For conceptual information about groups and
  other IAM Service components, see [Overview of the IAM Service].

  If you're federating with an identity provider (IdP), you need to create
  mappings between the groups defined in the IdP and groups you define in the
  IAM service. For more information, see [Identity Providers and Federation].
  Also see [IdentityProvider] and [IdpGroupMapping].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  add-user     Adds the specified user to the specified...
  create       Creates a new group in your tenancy.
  delete       Deletes the specified group.
  get          Gets the specified group's information.
  list         Lists the groups in your tenancy.
  list-users   Lists the users in the specified group.
  remove-user  Removes a user from a group.
  update       Updates the specified group.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group add-user --help
Usage: oci iam group add-user [OPTIONS]

  Adds the specified user to the specified group.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --group-id TEXT   The OCID of the group. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group create --help
Usage: oci iam group create [OPTIONS]

  Creates a new group in your tenancy.

  You must specify your tenancy's OCID as the compartment ID in the request
  object (remember that the tenancy is simply the root compartment). Notice
  that IAM resources (users, groups, compartments, and some policies) reside
  within the tenancy itself, unlike cloud resources such as compute instances,
  which typically reside within compartments inside the tenancy. For
  information about OCIDs, see [Resource Identifiers].

  You must also specify a *name* for the group, which must be unique across
  all groups in your tenancy and cannot be changed. You can use this name or
  the OCID when writing policies that apply to the group. For more information
  about policies, see [How Policies Work].

  You must also specify a *description* for the group (although it can be an
  empty string). It does not have to be unique, and you can change it anytime
  with [UpdateGroup].

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

  After creating the group, you need to put users in it and write policies for
  it. See [AddUserToGroup] and [CreatePolicy].

Options:
  -c, --compartment-id TEXT       The OCID of the tenancy containing the group.
                                  If not provided, this parameter will use the
                                  tenancy from the config file.
  --name TEXT                     The name you assign to the group during
                                  creation. The name must be unique across all
                                  groups in the tenancy and cannot be changed.
                                  [required]
  --description TEXT              The description you assign to the group during
                                  creation. Does not have to be unique, and it's
                                  changeable. [required]
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group delete --help
Usage: oci iam group delete [OPTIONS]

  Deletes the specified group. The group must be empty.

Options:
  --group-id TEXT                 The OCID of the group. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group get --help
Usage: oci iam group get [OPTIONS]

  Gets the specified group's information.

  This operation does not return a list of all the users in the group. To do
  that, use [ListUserGroupMemberships] and provide the group's OCID as a query
  parameter in the request.

Options:
  --group-id TEXT   The OCID of the group. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group list --help
Usage: oci iam group list [OPTIONS]

  Lists the groups in your tenancy. You must specify your tenancy's OCID as
  the value for the compartment ID (remember that the tenancy is simply the
  root compartment). See [Where to Get the Tenancy's OCID and User's OCID].

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group list-users --help
Usage: oci iam group list-users [OPTIONS]

  Lists the users in the specified group. You must specify your tenancy's OCID
  as the value for the compartment ID (remember that the tenancy is simply the
  root compartment). See [Where to Get the Tenancy's OCID and User's OCID].

Options:
  -c, --compartment-id TEXT  The OCID of the compartment (remember that the
                             tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --group-id TEXT            The OCID of the user. [required]
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group remove-user --help
Usage: oci iam group remove-user [OPTIONS]

  Removes a user from a group.

Options:
  -c, --compartment-id TEXT  The OCID of the compartment (remember that the
                             tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --user-id TEXT             The OCID of the user. [required]
  --group-id TEXT            The OCID of the group. [required]
  --force                    Perform removal without prompting for confirmation.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam group update --help
Usage: oci iam group update [OPTIONS]

  Updates the specified group.

Options:
  --group-id TEXT                 The OCID of the group. [required]
  --description TEXT              The description you assign to the group. Does
                                  not have to be unique, and it's changeable.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy --help
Usage: oci iam policy [OPTIONS] COMMAND [ARGS]...

  A document that specifies the type of access a group has to the resources in
  a compartment. For information about policies and other IAM Service
  components, see [Overview of the IAM Service]. If you're new to policies,
  see [Getting Started with Policies].

  The word "policy" is used by people in different ways:

    * An individual statement written in the policy language   * A collection
    of statements in a single, named "policy" document (which has an Oracle
    Cloud ID (OCID) assigned to it)   * The overall body of policies your
    organization uses to control access to resources

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator.

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new policy in the specified...
  delete  Deletes the specified policy.
  get     Gets the specified policy's information.
  list    Lists the policies in the specified...
  update  Updates the specified policy.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy create --help
Usage: oci iam policy create [OPTIONS]

  Creates a new policy in the specified compartment (either the tenancy or
  another of your compartments). If you're new to policies, see [Getting
  Started with Policies].

  You must specify a *name* for the policy, which must be unique across all
  policies in your tenancy and cannot be changed.

  You must also specify a *description* for the policy (although it can be an
  empty string). It does not have to be unique, and you can change it anytime
  with [UpdatePolicy].

  You must specify one or more policy statements in the statements array. For
  information about writing policies, see [How Policies Work] and [Common
  Policies].

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

  New policies take effect typically within 10 seconds.

Options:
  -c, --compartment-id TEXT       The OCID of the compartment containing the
                                  policy (either the tenancy or another
                                  compartment). [required]
  --name TEXT                     The name you assign to the policy during
                                  creation. The name must be unique across all
                                  policies in the tenancy and cannot be changed.
                                  [required]
  --statements COMPLEX TYPE       An array of policy statements written in the
                                  policy language. See [How Policies Work] and
                                  [Common Policies].
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
                                  [required] This must be provided in JSON
                                  format. See API reference for additional help.
                                  Example: '["statement 1","statement 2"]'
  --description TEXT              The description you assign to the policy
                                  during creation. Does not have to be unique,
                                  and it's changeable. [required]
  --version-date TEXT             The version of the policy. If null or set to
                                  an empty string, when a request comes in for
                                  authorization, the policy will be evaluated
                                  according to the current behavior of the
                                  services at that moment. If set to a
                                  particular date (YYYY-MM-DD), the policy will
                                  be evaluated according to the behavior of the
                                  services on that date.
                                  
                                  The following
                                  datetime formats are supported:
                                  
                                  UTC with
                                  milliseconds
                                  ***********************
                                  Format:
                                  YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy delete --help
Usage: oci iam policy delete [OPTIONS]

  Deletes the specified policy. The deletion takes effect typically within 10
  seconds.

Options:
  --policy-id TEXT                The OCID of the policy. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy get --help
Usage: oci iam policy get [OPTIONS]

  Gets the specified policy's information.

Options:
  --policy-id TEXT  The OCID of the policy. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy list --help
Usage: oci iam policy list [OPTIONS]

  Lists the policies in the specified compartment (either the tenancy or
  another of your compartments). See [Where to Get the Tenancy's OCID and
  User's OCID].

  To determine which policies apply to a particular group or compartment, you
  must view the individual statements inside all your policies. There isn't a
  way to automatically obtain that information via the API.

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment).
                             [required]
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam policy update --help
Usage: oci iam policy update [OPTIONS]

  Updates the specified policy. You can update the description or the policy
  statements themselves.

  Policy changes take effect typically within 10 seconds.

Options:
  --policy-id TEXT              The OCID of the policy. [required]
  --description TEXT            The description you assign to the policy. Does
                                not have to be unique, and it's changeable.
  --statements TEXT             A JSON array of policy statements written in the
                                policy language. See [How Policies Work] and
                                [Common Policies]. Example: '["statement
                                1","statement 2"]' (The single quotes are
                                required.)
  --version-date TEXT           The version of the policy. If set to an empty
                                string, when a request comes in for
                                authorization, the policy will be evaluated
                                according to the current behavior of the
                                services at that moment. If set to a particular
                                date (YYYY-MM-DD), the policy will be evaluated
                                according to the behavior of the services on
                                that date.
  --if-match TEXT               For optimistic concurrency control. In the PUT
                                or DELETE call for a resource, set the `if-
                                match` parameter to the value of the etag from a
                                previous GET or POST response for that resource.
                                The resource will be updated or deleted only if
                                the etag you provide matches the resource's
                                current etag value.
  --force                       Perform update without prompting for
                                confirmation.
  --freeform-tags COMPLEX TYPE  Simple key-value pair that is applied without
                                any predefined name, type or scope. Exists for
                                cross-compatibility only. Example: `{"bar-key":
                                "value"}`
                                This is a complex type whose value
                                must be valid JSON. The value can be provided as
                                a string on the command line or passed in as a
                                file using
                                the file://path/to/file syntax.
                                
                                The
                                --generate-param-json-input option can be used
                                to generate an example of the JSON which must be
                                provided. We recommend storing this example
                                in a
                                file, modifying it as needed and then passing it
                                back in via the file:// syntax.
  --defined-tags COMPLEX TYPE   Usage of predefined tag keys. These predefined
                                keys are scoped to namespaces. Example: `{"foo-
                                namespace": {"bar-key": "foo-value"}}`
                                This is a
                                complex type whose value must be valid JSON. The
                                value can be provided as a string on the command
                                line or passed in as a file using
                                the
                                file://path/to/file syntax.
                                
                                The --generate-
                                param-json-input option can be used to generate
                                an example of the JSON which must be provided.
                                We recommend storing this example
                                in a file,
                                modifying it as needed and then passing it back
                                in via the file:// syntax.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file.
                                
                                Options can still be provided on
                                the command line. If an option exists in both
                                the JSON document and the command line then the
                                command line specified value will be used
  -?, -h, --help                Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam region --help
Usage: oci iam region [OPTIONS] COMMAND [ARGS]...

  A localized geographic area, such as Phoenix, AZ. Oracle Cloud
  Infrastructure is hosted in regions and Availability Domains. A region is
  composed of several Availability Domains. An Availability Domain is one or
  more data centers located within a region. For more information, see
  [Regions and Availability Domains].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  list  Lists all the regions offered by Oracle Cloud...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam region list --help
Usage: oci iam region list [OPTIONS]

  Lists all the regions offered by Oracle Cloud Infrastructure.

Options:
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam region-subscription --help
Usage: oci iam region-subscription [OPTIONS] COMMAND [ARGS]...

  An object that represents your tenancy's access to a particular region
  (i.e., a subscription), the status of that access, and whether that region
  is the home region. For more information, see [Managing Regions].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a subscription to a region for a...
  list    Lists the region subscriptions for the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam region-subscription create --help
Usage: oci iam region-subscription create [OPTIONS]

  Creates a subscription to a region for a tenancy.

Options:
  --region-key TEXT  The regions's key.
                     
                     Allowed values are: - `PHX` - `IAD` -
                     `FRA` - `LHR`
                     
                     Example: `PHX` [required]
  --tenancy-id TEXT  The OCID of the tenancy. [required]
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file.
                     
                     Options can still be provided on the command line.
                     If an option exists in both the JSON document and the
                     command line then the command line specified value will be
                     used
  -?, -h, --help     Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam region-subscription list --help
Usage: oci iam region-subscription list [OPTIONS]

  Lists the region subscriptions for the specified tenancy.

Options:
  --tenancy-id TEXT  The OCID of the tenancy. If not provided, this parameter
                     will use the tenancy from the config file.
  --from-json TEXT   Provide input to this command as a JSON document from a
                     file.
                     
                     Options can still be provided on the command line.
                     If an option exists in both the JSON document and the
                     command line then the command line specified value will be
                     used
  -?, -h, --help     Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam smtp-credential --help
Usage: oci iam smtp-credential [OPTIONS] COMMAND [ARGS]...

  Simple Mail Transfer Protocol (SMTP) credentials are needed to send email
  through Email Delivery. The SMTP credentials are used for SMTP
  authentication with the service. The credentials never expire. A user can
  have up to 2 SMTP credentials at a time.

  **Note:** The credential set is always an Oracle-generated SMTP user name
  and password pair; you cannot designate the SMTP user name or the SMTP
  password.

  For more information, see [Managing User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  Creates a new SMTP credential for the...
  delete  Deletes the specified SMTP credential for the...
  list    Lists the SMTP credentials for the specified...
  update  Updates the specified SMTP credential's...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam smtp-credential create --help
Usage: oci iam smtp-credential create [OPTIONS]

  Creates a new SMTP credential for the specified user. An SMTP credential has
  an SMTP user name and an SMTP password. You must specify a *description* for
  the SMTP credential (although it can be an empty string). It does not have
  to be unique, and you can change it anytime with [UpdateSmtpCredential].

Options:
  --description TEXT  The description you assign to the SMTP credentials during
                      creation. Does not have to be unique, and it's changeable.
                      [required]
  --user-id TEXT      The OCID of the user. [required]
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file.
                      
                      Options can still be provided on the command line.
                      If an option exists in both the JSON document and the
                      command line then the command line specified value will be
                      used
  -?, -h, --help      Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam smtp-credential delete --help
Usage: oci iam smtp-credential delete [OPTIONS]

  Deletes the specified SMTP credential for the specified user.

Options:
  --user-id TEXT             The OCID of the user. [required]
  --smtp-credential-id TEXT  The OCID of the SMTP credential. [required]
  --if-match TEXT            For optimistic concurrency control. In the PUT or
                             DELETE call for a resource, set the `if-match`
                             parameter to the value of the etag from a previous
                             GET or POST response for that resource.  The
                             resource will be updated or deleted only if the
                             etag you provide matches the resource's current
                             etag value.
  --force                    Perform deletion without prompting for
                             confirmation.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam smtp-credential list --help
Usage: oci iam smtp-credential list [OPTIONS]

  Lists the SMTP credentials for the specified user. The returned object
  contains the credential's OCID, the SMTP user name but not the SMTP
  password. The SMTP password is returned only upon creation.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam smtp-credential update --help
Usage: oci iam smtp-credential update [OPTIONS]

  Updates the specified SMTP credential's description.

Options:
  --user-id TEXT             The OCID of the user. [required]
  --smtp-credential-id TEXT  The OCID of the SMTP credential. [required]
  --description TEXT         The description you assign to the SMTP credential.
                             Does not have to be unique, and it's changeable.
  --if-match TEXT            For optimistic concurrency control. In the PUT or
                             DELETE call for a resource, set the `if-match`
                             parameter to the value of the etag from a previous
                             GET or POST response for that resource.  The
                             resource will be updated or deleted only if the
                             etag you provide matches the resource's current
                             etag value.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag --help
Usage: oci iam tag [OPTIONS] COMMAND [ARGS]...

  A tag definition that belongs to a specific tag namespace.  "Defined tags"
  must be set up in your tenancy before you can apply them to resources. For
  more information, see [Managing Tags and Tag Namespaces].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create              Create new tag in a given tagNamespace
  get                 Gets the specified tags information
  list                List tags in a given tagNamespace
  list-cost-tracking  Lists all the tags enabled for cost-tracking...
  reactivate          Reactivate tag so it can be used
  retire              Retire tag and related rules
  update              Updates the the specified tag

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag create --help
Usage: oci iam tag create [OPTIONS]

  Creates a new tag in the specified tag namespace.

  You must specify either the OCID or the name of the tag namespace that will
  contain this tag definition.

  You must also specify a *name* for the tag, which must be unique across all
  tags in the tag namespace and cannot be changed. The name can contain any
  ASCII character except the space (_) or period (.) characters. Names are
  case insensitive. That means, for example, "myTag" and "mytag" are not
  allowed in the same namespace. If you specify a name that's already in use
  in the tag namespace, a 409 error is returned.

  You must also specify a *description* for the tag. It does not have to be
  unique, and you can change it with [UpdateTag].

Options:
  --tag-namespace-id TEXT       The OCID of the tag namespace. [required]
  --name TEXT                   The name you assign to the tag during creation.
                                The name must be unique within the tag namespace
                                and cannot be changed. [required]
  --description TEXT            The description you assign to the tag during
                                creation. [required]
  --freeform-tags COMPLEX TYPE  Free-form tags for this resource. Each tag is a
                                simple key-value pair with no predefined name,
                                type, or namespace. For more information, see
                                [Resource Tags]. Example: `{"Department":
                                "Finance"}`
                                This is a complex type whose value
                                must be valid JSON. The value can be provided as
                                a string on the command line or passed in as a
                                file using
                                the file://path/to/file syntax.
                                
                                The
                                --generate-param-json-input option can be used
                                to generate an example of the JSON which must be
                                provided. We recommend storing this example
                                in a
                                file, modifying it as needed and then passing it
                                back in via the file:// syntax.
  --defined-tags COMPLEX TYPE   Defined tags for this resource. Each key is
                                predefined and scoped to a namespace. For more
                                information, see [Resource Tags]. Example:
                                `{"Operations": {"CostCenter": "42"}}`
                                This is a
                                complex type whose value must be valid JSON. The
                                value can be provided as a string on the command
                                line or passed in as a file using
                                the
                                file://path/to/file syntax.
                                
                                The --generate-
                                param-json-input option can be used to generate
                                an example of the JSON which must be provided.
                                We recommend storing this example
                                in a file,
                                modifying it as needed and then passing it back
                                in via the file:// syntax.
  --is-cost-tracking BOOLEAN    Indicates whether the tag is enabled for cost
                                tracking.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file.
                                
                                Options can still be provided on
                                the command line. If an option exists in both
                                the JSON document and the command line then the
                                command line specified value will be used
  -?, -h, --help                Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag get --help
Usage: oci iam tag get [OPTIONS]

  Gets the specified tag's information.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --tag-name TEXT          The name of the tag. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag list --help
Usage: oci iam tag list [OPTIONS]

  Lists the tag definitions in the specified tag namespace.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --page TEXT              The value of the `opc-next-page` response header from
                           the previous "List" call.
  --limit INTEGER          The maximum number of items to return in a paginated
                           "List" call.
  --all                    Fetches all pages of results. If you provide this
                           option, then you cannot provide the --limit option.
  --page-size INTEGER      When fetching results, the number of results to fetch
                           per call. Only valid when used with --all or --limit,
                           and ignored otherwise.
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag list-cost-tracking --help
Usage: oci iam tag list-cost-tracking [OPTIONS]

  Lists all the tags enabled for cost-tracking in the specified tenancy. For
  information about cost-tracking tags, see [Using Cost-tracking Tags].

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment).
                             [required]
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag reactivate --help
Usage: oci iam tag reactivate [OPTIONS]

  Reactivate tag so it can be used

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --tag-name TEXT          The name of the tag. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag retire --help
Usage: oci iam tag retire [OPTIONS]

  Retires a tag so that it cannot be used to tag resources. Retiring a tag
  will also retire the related rules. You can not create a tag with the same
  name as a retired tag. Tags must be unique within their tag namespace but
  can be repeated across namespaces. You cannot add a tag with the same name
  as a retired tag in the same tag namespace.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --tag-name TEXT          The name of the tag. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag update --help
Usage: oci iam tag update [OPTIONS]

  Updates the the specified tag

Options:
  --tag-namespace-id TEXT       The OCID of the tag namespace. [required]
  --tag-name TEXT               The name of the tag. [required]
  --description TEXT            The description you assign to the tag during
                                creation.
  --freeform-tags COMPLEX TYPE  Free-form tags for this resource. Each tag is a
                                simple key-value pair with no predefined name,
                                type, or namespace. For more information, see
                                [Resource Tags]. Example: `{"Department":
                                "Finance"}`
                                This is a complex type whose value
                                must be valid JSON. The value can be provided as
                                a string on the command line or passed in as a
                                file using
                                the file://path/to/file syntax.
                                
                                The
                                --generate-param-json-input option can be used
                                to generate an example of the JSON which must be
                                provided. We recommend storing this example
                                in a
                                file, modifying it as needed and then passing it
                                back in via the file:// syntax.
  --defined-tags COMPLEX TYPE   Defined tags for this resource. Each key is
                                predefined and scoped to a namespace. For more
                                information, see [Resource Tags]. Example:
                                `{"Operations": {"CostCenter": "42"}}`
                                This is a
                                complex type whose value must be valid JSON. The
                                value can be provided as a string on the command
                                line or passed in as a file using
                                the
                                file://path/to/file syntax.
                                
                                The --generate-
                                param-json-input option can be used to generate
                                an example of the JSON which must be provided.
                                We recommend storing this example
                                in a file,
                                modifying it as needed and then passing it back
                                in via the file:// syntax.
  --is-cost-tracking BOOLEAN    Indicates whether the tag is enabled for cost
                                tracking.
  --force                       Perform update without prompting for
                                confirmation.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file.
                                
                                Options can still be provided on
                                the command line. If an option exists in both
                                the JSON document and the command line then the
                                command line specified value will be used
  -?, -h, --help                Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace --help
Usage: oci iam tag-namespace [OPTIONS] COMMAND [ARGS]...

  A managed container for defined tags. A tag namespace is unique in a
  tenancy. A tag namespace can't be deleted. For more information, see
  [Managing Tags and Tag Namespaces].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create      Create new tagNamespace in a compartment
  get         Get a tagNamespaces information
  list        List the tagNamespaces in a compartment
  reactivate  Reactivate namespace (only)
  retire      Retire namespace and its tags and rules
  update      Updates the specified tagNamespace

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace create --help
Usage: oci iam tag-namespace create [OPTIONS]

  Creates a new tag namespace in the specified compartment.

  You must specify the compartment ID in the request object (remember that the
  tenancy is simply the root compartment).

  You must also specify a *name* for the namespace, which must be unique
  across all namespaces in your tenancy and cannot be changed. The name can
  contain any ASCII character except the space (_) or period (.). Names are
  case insensitive. That means, for example, "myNamespace" and "mynamespace"
  are not allowed in the same tenancy. Once you created a namespace, you
  cannot change the name. If you specify a name that's already in use in the
  tenancy, a 409 error is returned.

  You must also specify a *description* for the namespace. It does not have to
  be unique, and you can change it with [UpdateTagNamespace].

  Tag namespaces cannot be deleted, but they can be retired. See [Retiring Key
  Definitions and Namespace Definitions] for more information.

Options:
  -c, --compartment-id TEXT     The OCID of the tenancy containing the tag
                                namespace. [required]
  --name TEXT                   The name you assign to the tag namespace during
                                creation. It must be unique across all tag
                                namespaces in the tenancy and cannot be changed.
                                [required]
  --description TEXT            The description you assign to the tag namespace
                                during creation. [required]
  --freeform-tags COMPLEX TYPE  Free-form tags for this resource. Each tag is a
                                simple key-value pair with no predefined name,
                                type, or namespace. For more information, see
                                [Resource Tags]. Example: `{"Department":
                                "Finance"}`
                                This is a complex type whose value
                                must be valid JSON. The value can be provided as
                                a string on the command line or passed in as a
                                file using
                                the file://path/to/file syntax.
                                
                                The
                                --generate-param-json-input option can be used
                                to generate an example of the JSON which must be
                                provided. We recommend storing this example
                                in a
                                file, modifying it as needed and then passing it
                                back in via the file:// syntax.
  --defined-tags COMPLEX TYPE   Defined tags for this resource. Each key is
                                predefined and scoped to a namespace. For more
                                information, see [Resource Tags]. Example:
                                `{"Operations": {"CostCenter": "42"}}`
                                This is a
                                complex type whose value must be valid JSON. The
                                value can be provided as a string on the command
                                line or passed in as a file using
                                the
                                file://path/to/file syntax.
                                
                                The --generate-
                                param-json-input option can be used to generate
                                an example of the JSON which must be provided.
                                We recommend storing this example
                                in a file,
                                modifying it as needed and then passing it back
                                in via the file:// syntax.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file.
                                
                                Options can still be provided on
                                the command line. If an option exists in both
                                the JSON document and the command line then the
                                command line specified value will be used
  -?, -h, --help                Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace get --help
Usage: oci iam tag-namespace get [OPTIONS]

  Gets the specified tag namespace's information.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace list --help
Usage: oci iam tag-namespace list [OPTIONS]

  Lists the tag namespaces in the specified compartment.

Options:
  -c, --compartment-id TEXT       The OCID of the parent compartment (remember
                                  that the tenancy is simply the root
                                  compartment). [required]
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous "List" call.
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated "List" call.
  --include-subcompartments BOOLEAN
                                  An optional boolean parameter indicating
                                  whether to retrieve all tag namespaces in
                                  subcompartments. If this parameter is not
                                  specified, only the tag namespaces defined in
                                  the specified compartment are retrieved.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace reactivate --help
Usage: oci iam tag-namespace reactivate [OPTIONS]

  Reactivates a namespace. Reactivating a namespace will not reactivate any
  tag definition that is retired when the namespace was retired. They will
  have to be individually reactivated *after* the namespace is reactivated.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace retire --help
Usage: oci iam tag-namespace retire [OPTIONS]

  Retire the namespace, all the contained tags and the related rules.
  Reactivating a namespace  will not reactivate any tag definition that is
  retired when the namespace was retired. They will have to be individually
  reactivated *after* the namespace is reactivated. You can't add a namespace
  with the same name as a retired namespace in the same tenant.

Options:
  --tag-namespace-id TEXT  The OCID of the tag namespace. [required]
  --from-json TEXT         Provide input to this command as a JSON document from
                           a file.
                           
                           Options can still be provided on the command
                           line. If an option exists in both the JSON document
                           and the command line then the command line specified
                           value will be used
  -?, -h, --help           Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam tag-namespace update --help
Usage: oci iam tag-namespace update [OPTIONS]

  Updates the specified tagNamespace

Options:
  --tag-namespace-id TEXT       The OCID of the tag namespace. [required]
  --description TEXT            The description you assign to the tag namespace.
  --freeform-tags COMPLEX TYPE  Free-form tags for this resource. Each tag is a
                                simple key-value pair with no predefined name,
                                type, or namespace. For more information, see
                                [Resource Tags]. Example: `{"Department":
                                "Finance"}`
                                This is a complex type whose value
                                must be valid JSON. The value can be provided as
                                a string on the command line or passed in as a
                                file using
                                the file://path/to/file syntax.
                                
                                The
                                --generate-param-json-input option can be used
                                to generate an example of the JSON which must be
                                provided. We recommend storing this example
                                in a
                                file, modifying it as needed and then passing it
                                back in via the file:// syntax.
  --defined-tags COMPLEX TYPE   Defined tags for this resource. Each key is
                                predefined and scoped to a namespace. For more
                                information, see [Resource Tags]. Example:
                                `{"Operations": {"CostCenter": "42"}}`
                                This is a
                                complex type whose value must be valid JSON. The
                                value can be provided as a string on the command
                                line or passed in as a file using
                                the
                                file://path/to/file syntax.
                                
                                The --generate-
                                param-json-input option can be used to generate
                                an example of the JSON which must be provided.
                                We recommend storing this example
                                in a file,
                                modifying it as needed and then passing it back
                                in via the file:// syntax.
  --force                       Perform update without prompting for
                                confirmation.
  --from-json TEXT              Provide input to this command as a JSON document
                                from a file.
                                
                                Options can still be provided on
                                the command line. If an option exists in both
                                the JSON document and the command line then the
                                command line specified value will be used
  -?, -h, --help                Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user --help
Usage: oci iam user [OPTIONS] COMMAND [ARGS]...

  An individual employee or system that needs to manage or use your company's
  Oracle Cloud Infrastructure resources. Users might need to launch instances,
  manage remote disks, work with your cloud network, etc. Users have one or
  more IAM Service credentials ([ApiKey], [UIPassword], [SwiftPassword] and
  [AuthToken]). For more information, see [User Credentials]). End users of
  your application are not typically IAM Service users. For conceptual
  information about users and other IAM Service components, see [Overview of
  the IAM Service].

  These users are created directly within the Oracle Cloud Infrastructure
  system, via the IAM service. They are different from *federated users*, who
  authenticate themselves to the Oracle Cloud Infrastructure Console via an
  identity provider. For more information, see [Identity Providers and
  Federation].

  To use any of the API operations, you must be authorized in an IAM policy.
  If you're not authorized, talk to an administrator. If you're an
  administrator who needs to write policies to give users access, see [Getting
  Started with Policies].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  api-key            A PEM-format RSA credential for securing...
  create             Creates a new user in your tenancy.
  delete             Deletes the specified user.
  get                Gets the specified user's information.
  list               Lists the users in your tenancy.
  list-groups        Lists the groups for which the specified user...
  swift-password     **Deprecated.
  ui-password        A text password that enables a user to sign...
  update             Updates the description of the specified...
  update-user-state  Updates the state of the specified user.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user api-key --help
Usage: oci iam user api-key [OPTIONS] COMMAND [ARGS]...

  A PEM-format RSA credential for securing requests to the Oracle Cloud
  Infrastructure REST API. Also known as an *API signing key*. Specifically,
  this is the public key from the key pair. The private key remains with the
  user calling the API. For information about generating a key pair in the
  required PEM format, see [Required Keys and OCIDs].

  **Important:** This is **not** the SSH key for accessing compute instances.

  Each user can have a maximum of three API signing keys.

  For more information about user credentials, see [User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  delete  Deletes the specified API signing key for the...
  list    Lists the API signing keys for the specified...
  upload  Uploads an API signing key for the specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user api-key delete --help
Usage: oci iam user api-key delete [OPTIONS]

  Deletes the specified API signing key for the specified user.

  Every user has permission to use this operation to delete a key for *their
  own user ID*. An administrator in your organization does not need to write a
  policy to give users this ability. To compare, administrators who have
  permission to the tenancy can use this operation to delete a key for any
  user, including themselves.

Options:
  --user-id TEXT      The OCID of the user. [required]
  --fingerprint TEXT  The key's fingerprint. [required]
  --if-match TEXT     For optimistic concurrency control. In the PUT or DELETE
                      call for a resource, set the `if-match` parameter to the
                      value of the etag from a previous GET or POST response for
                      that resource.  The resource will be updated or deleted
                      only if the etag you provide matches the resource's
                      current etag value.
  --force             Perform deletion without prompting for confirmation.
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file.
                      
                      Options can still be provided on the command line.
                      If an option exists in both the JSON document and the
                      command line then the command line specified value will be
                      used
  -?, -h, --help      Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user api-key list --help
Usage: oci iam user api-key list [OPTIONS]

  Lists the API signing keys for the specified user. A user can have a maximum
  of three keys.

  Every user has permission to use this API call for *their own user ID*.  An
  administrator in your organization does not need to write a policy to give
  users this ability.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user api-key upload --help
Usage: oci iam user api-key upload [OPTIONS]

  Uploads an API signing key for the specified user.

  Every user has permission to use this operation to upload a key for *their
  own user ID*. An administrator in your organization does not need to write a
  policy to give users this ability. To compare, administrators who have
  permission to the tenancy can use this operation to upload a key for any
  user, including themselves.

  **Important:** Even though you have permission to upload an API key, you
  might not yet have permission to do much else. If you try calling an
  operation unrelated to your own credential management (e.g., `ListUsers`,
  `LaunchInstance`) and receive an "unauthorized" error, check with an
  administrator to confirm which IAM Service group(s) you're in and what
  access you have. Also confirm you're working in the correct compartment.

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

Options:
  --user-id TEXT       The OCID of the user. [required]
  --key TEXT           The public key.  Must be an RSA key in PEM format. Either
                       this option or --key-file must be specified
  --key-file FILENAME  A file containing the public key.  Must be an RSA key in
                       PEM format. Either this option or --key must be specified
  --from-json TEXT     Provide input to this command as a JSON document from a
                       file.
                       
                       Options can still be provided on the command line.
                       If an option exists in both the JSON document and the
                       command line then the command line specified value will
                       be used
  -?, -h, --help       Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user create --help
Usage: oci iam user create [OPTIONS]

  Creates a new user in your tenancy. For conceptual information about users,
  your tenancy, and other IAM Service components, see [Overview of the IAM
  Service].

  You must specify your tenancy's OCID as the compartment ID in the request
  object (remember that the tenancy is simply the root compartment). Notice
  that IAM resources (users, groups, compartments, and some policies) reside
  within the tenancy itself, unlike cloud resources such as compute instances,
  which typically reside within compartments inside the tenancy. For
  information about OCIDs, see [Resource Identifiers].

  You must also specify a *name* for the user, which must be unique across all
  users in your tenancy and cannot be changed. Allowed characters: No spaces.
  Only letters, numerals, hyphens, periods, underscores, +, and @. If you
  specify a name that's already in use, you'll get a 409 error. This name will
  be the user's login to the Console. You might want to pick a name that your
  company's own identity system (e.g., Active Directory, LDAP, etc.) already
  uses. If you delete a user and then create a new user with the same name,
  they'll be considered different users because they have different OCIDs.

  You must also specify a *description* for the user (although it can be an
  empty string). It does not have to be unique, and you can change it anytime
  with [UpdateUser]. You can use the field to provide the user's full name, a
  description, a nickname, or other information to generally identify the
  user.

  After you send your request, the new object's `lifecycleState` will
  temporarily be CREATING. Before using the object, first make sure its
  `lifecycleState` has changed to ACTIVE.

  A new user has no permissions until you place the user in one or more groups
  (see [AddUserToGroup]). If the user needs to access the Console, you need to
  provide the user a password (see [CreateOrResetUIPassword]). If the user
  needs to access the Oracle Cloud Infrastructure REST API, you need to upload
  a public API signing key for that user (see [Required Keys and OCIDs] and
  also [UploadApiKey]).

  **Important:** Make sure to inform the new user which compartment(s) they
  have access to.

Options:
  -c, --compartment-id TEXT       The OCID of the tenancy containing the user.
                                  If not provided, this parameter will use the
                                  tenancy from the config file.
  --name TEXT                     The name you assign to the user during
                                  creation. This is the user's login for the
                                  Console. The name must be unique across all
                                  users in the tenancy and cannot be changed.
                                  [required]
  --description TEXT              The description you assign to the user during
                                  creation. Does not have to be unique, and it's
                                  changeable. [required]
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user delete --help
Usage: oci iam user delete [OPTIONS]

  Deletes the specified user. The user must not be in any groups.

Options:
  --user-id TEXT                  The OCID of the user. [required]
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user get --help
Usage: oci iam user get [OPTIONS]

  Gets the specified user's information.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user list --help
Usage: oci iam user list [OPTIONS]

  Lists the users in your tenancy. You must specify your tenancy's OCID as the
  value for the compartment ID (remember that the tenancy is simply the root
  compartment). See [Where to Get the Tenancy's OCID and User's OCID].

Options:
  -c, --compartment-id TEXT  The OCID of the parent compartment (remember that
                             the tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user list-groups --help
Usage: oci iam user list-groups [OPTIONS]

  Lists the groups for which the specified user is a member. You must specify
  your tenancy's OCID as the value for the compartment ID (remember that the
  tenancy is simply the root compartment). See [Where to Get the Tenancy's
  OCID and User's OCID].

Options:
  -c, --compartment-id TEXT  The OCID of the compartment (remember that the
                             tenancy is simply the root compartment). If not
                             provided, this parameter will use the tenancy from
                             the config file.
  --user-id TEXT             The OCID of the user. [required]
  --page TEXT                The value of the `opc-next-page` response header
                             from the previous "List" call.
  --limit INTEGER            The maximum number of items to return in a
                             paginated "List" call.
  --all                      Fetches all pages of results. If you provide this
                             option, then you cannot provide the --limit option.
  --page-size INTEGER        When fetching results, the number of results to
                             fetch per call. Only valid when used with --all or
                             --limit, and ignored otherwise.
  --from-json TEXT           Provide input to this command as a JSON document
                             from a file.
                             
                             Options can still be provided on the
                             command line. If an option exists in both the JSON
                             document and the command line then the command line
                             specified value will be used
  -?, -h, --help             Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user swift-password --help
Usage: oci iam user swift-password [OPTIONS] COMMAND [ARGS]...

  **Deprecated. Use [AuthToken] instead.**

  Swift is the OpenStack object storage service. A `SwiftPassword` is an
  Oracle-provided password for using a Swift client with the Object Storage
  Service. This password is associated with the user's Console login. Swift
  passwords never expire. A user can have up to two Swift passwords at a time.

  **Note:** The password is always an Oracle-generated string; you can't
  change it to a string of your choice.

  For more information, see [Managing User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create  **Deprecated.
  delete  **Deprecated.
  list    **Deprecated.
  update  **Deprecated.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user swift-password create --help
Usage: oci iam user swift-password create [OPTIONS]

  **Deprecated. Use [CreateAuthToken] instead.**

  Creates a new Swift password for the specified user. For information about
  what Swift passwords are for, see [Managing User Credentials].

  You must specify a *description* for the Swift password (although it can be
  an empty string). It does not have to be unique, and you can change it
  anytime with [UpdateSwiftPassword].

  Every user has permission to create a Swift password for *their own user
  ID*. An administrator in your organization does not need to write a policy
  to give users this ability. To compare, administrators who have permission
  to the tenancy can use this operation to create a Swift password for any
  user, including themselves.

Options:
  --description TEXT  The description you assign to the Swift password during
                      creation. Does not have to be unique, and it's changeable.
                      [required]
  --user-id TEXT      The OCID of the user. [required]
  --from-json TEXT    Provide input to this command as a JSON document from a
                      file.
                      
                      Options can still be provided on the command line.
                      If an option exists in both the JSON document and the
                      command line then the command line specified value will be
                      used
  -?, -h, --help      Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user swift-password delete --help
Usage: oci iam user swift-password delete [OPTIONS]

  **Deprecated. Use [DeleteAuthToken] instead.**

  Deletes the specified Swift password for the specified user.

Options:
  --user-id TEXT            The OCID of the user. [required]
  --swift-password-id TEXT  The OCID of the Swift password. [required]
  --if-match TEXT           For optimistic concurrency control. In the PUT or
                            DELETE call for a resource, set the `if-match`
                            parameter to the value of the etag from a previous
                            GET or POST response for that resource.  The
                            resource will be updated or deleted only if the etag
                            you provide matches the resource's current etag
                            value.
  --force                   Perform deletion without prompting for confirmation.
  --from-json TEXT          Provide input to this command as a JSON document
                            from a file.
                            
                            Options can still be provided on the
                            command line. If an option exists in both the JSON
                            document and the command line then the command line
                            specified value will be used
  -?, -h, --help            Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user swift-password list --help
Usage: oci iam user swift-password list [OPTIONS]

  **Deprecated. Use [ListAuthTokens] instead.**

  Lists the Swift passwords for the specified user. The returned object
  contains the password's OCID, but not the password itself. The actual
  password is returned only upon creation.

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user swift-password update --help
Usage: oci iam user swift-password update [OPTIONS]

  **Deprecated. Use [UpdateAuthToken] instead.**

  Updates the specified Swift password's description.

Options:
  --user-id TEXT            The OCID of the user. [required]
  --swift-password-id TEXT  The OCID of the Swift password. [required]
  --description TEXT        The description you assign to the Swift password.
                            Does not have to be unique, and it's changeable.
  --if-match TEXT           For optimistic concurrency control. In the PUT or
                            DELETE call for a resource, set the `if-match`
                            parameter to the value of the etag from a previous
                            GET or POST response for that resource.  The
                            resource will be updated or deleted only if the etag
                            you provide matches the resource's current etag
                            value.
  --from-json TEXT          Provide input to this command as a JSON document
                            from a file.
                            
                            Options can still be provided on the
                            command line. If an option exists in both the JSON
                            document and the command line then the command line
                            specified value will be used
  -?, -h, --help            Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user ui-password --help
Usage: oci iam user ui-password [OPTIONS] COMMAND [ARGS]...

  A text password that enables a user to sign in to the Console, the user
  interface for interacting with Oracle Cloud Infrastructure.

  For more information about user credentials, see [User Credentials].

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  create-or-reset  Creates a new Console one-time password for...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user ui-password create-or-reset --help
Usage: oci iam user ui-password create-or-reset [OPTIONS]

  Creates a new Console one-time password for the specified user. For more
  information about user credentials, see [User Credentials].

  Use this operation after creating a new user, or if a user forgets their
  password. The new one-time password is returned to you in the response, and
  you must securely deliver it to the user. They'll be prompted to change this
  password the next time they sign in to the Console. If they don't change it
  within 7 days, the password will expire and you'll need to create a new one-
  time password for the user.

  **Note:** The user's Console login is the unique name you specified when you
  created the user (see [CreateUser]).

Options:
  --user-id TEXT    The OCID of the user. [required]
  --from-json TEXT  Provide input to this command as a JSON document from a
                    file.
                    
                    Options can still be provided on the command line. If
                    an option exists in both the JSON document and the command
                    line then the command line specified value will be used
  -?, -h, --help    Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user update --help
Usage: oci iam user update [OPTIONS]

  Updates the description of the specified user.

Options:
  --user-id TEXT                  The OCID of the user. [required]
  --description TEXT              The description you assign to the user. Does
                                  not have to be unique, and it's changeable.
  --freeform-tags COMPLEX TYPE    Free-form tags for this resource. Each tag is
                                  a simple key-value pair with no predefined
                                  name, type, or namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Department": "Finance"}`
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags]. Example:
                                  `{"Operations": {"CostCenter": "42"}}`
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam user update-user-state --help
Usage: oci iam user update-user-state [OPTIONS]

  Updates the state of the specified user.

Options:
  --user-id TEXT                  The OCID of the user. [required]
  --blocked BOOLEAN               Update state to blocked or unblocked. Only
                                  "false" is supported (for changing the state
                                  to unblocked).
  --if-match TEXT                 For optimistic concurrency control. In the PUT
                                  or DELETE call for a resource, set the `if-
                                  match` parameter to the value of the etag from
                                  a previous GET or POST response for that
                                  resource.  The resource will be updated or
                                  deleted only if the etag you provide matches
                                  the resource's current etag value.
  --wait-for-state [CREATING|ACTIVE|INACTIVE|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file.
                                  
                                  Options can still be
                                  provided on the command line. If an option
                                  exists in both the JSON document and the
                                  command line then the command line specified
                                  value will be used
  -?, -h, --help                  Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam work-request --help
Usage: oci iam work-request [OPTIONS] COMMAND [ARGS]...

  The asynchronous API request does not take effect immediately. This request
  spawns an asynchronous workflow to fulfill the request. WorkRequest objects
  provide visibility for in-progress workflows.

Options:
  -?, -h, --help  Show this message and exit.

Commands:
  get   Gets details on a specified work request.
  list  Lists the work requests in compartment.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam work-request get --help
Usage: oci iam work-request get [OPTIONS]

  Gets details on a specified work request. The workRequestID is returned in
  the opc-workrequest-id header for any asynchronous operation in the Identity
  and Access Management service.

Options:
  --work-request-id TEXT  The OCID of the work request. [required]
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file.
                          
                          Options can still be provided on the command
                          line. If an option exists in both the JSON document
                          and the command line then the command line specified
                          value will be used
  -?, -h, --help          Show this message and exit.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci iam work-request list --help
Usage: oci iam work-request list [OPTIONS]

  Lists the work requests in compartment.

Options:
  -c, --compartment-id TEXT   The OCID of the parent compartment (remember that
                              the tenancy is simply the root compartment).
                              [required]
  --page TEXT                 The value of the `opc-next-page` response header
                              from the previous "List" call.
  --limit INTEGER             The maximum number of items to return in a
                              paginated "List" call.
  --resource-identifier TEXT  The identifier of the resource the work request
                              affects.
  --all                       Fetches all pages of results. If you provide this
                              option, then you cannot provide the --limit
                              option.
  --page-size INTEGER         When fetching results, the number of results to
                              fetch per call. Only valid when used with --all or
                              --limit, and ignored otherwise.
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file.
                              
                              Options can still be provided on the
                              command line. If an option exists in both the JSON
                              document and the command line then the command
                              line specified value will be used
  -?, -h, --help              Show this message and exit.

