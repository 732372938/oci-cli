CLI command reference is now available at https://docs.cloud.oracle.com/iaas/tools/oci-cli/latest/oci_cli_docs/.
This file contains all the help for the 'waas' command. 
This file is generated by running scripts/generate_command_summary.py, which dumps the output of --help for every command.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas --help
Usage: oci waas [OPTIONS] COMMAND [ARGS]...

  OCI Web Application Acceleration and Security Services

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  access-rule                   A content access rule.
  address-rate-limiting         The IP rate limiting configuration.
  captcha                       The settings of the CAPTCHA challenge.
  certificate                   The details of the SSL certificate.
  device-fingerprint-challenge  The device fingerprint challenge settings.
  edge-subnet                   The details about an edge node subnet.
  good-bot                      The good bot settings.
  human-interaction-challenge   The human interaction challenge settings.
  js-challenge                  The JavaScript challenge settings.
  policy-config                 The configuration details for the WAAS...
  protection-rule               The protection rule settings.
  protection-settings           The settings used for protection rules.
  recommendation                A recommended protection rule for a web...
  threat-feed                   The settings of the threat intelligence feed.
  waas-policy                   The details of a Web Application Acceleration...
  waf-blocked-request
  waf-config                    The Web Application Firewall configuration...
  waf-log                       A list of Web Application Firewall log...
  waf-request                   A time series of request counts handled by...
  waf-traffic-datum             A time series of traffic data for the Web...
  whitelist                     An array of IP addresses that bypass the Web...
  work-request                  Many of the API requests you use to create...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas access-rule --help
Usage: oci waas access-rule [OPTIONS] COMMAND [ARGS]...

  A content access rule. An access rule specifies an action to take if a set
  of criteria is matched by a request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list    Gets the currently configured access rules...
  update  Updates the list of access rules in the Web...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas access-rule list --help
Usage: oci waas access-rule list [OPTIONS]

  Gets the currently configured access rules for the Web Application Firewall
  configration of a specified WAAS policy. The order of the access rules is
  important. The rules will be checked in the order they are specified and the
  first matching rule will be used.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --limit INTEGER        The maximum number of items to return in a paginated
                         call. In unspecified, defaults to `10`.
  --page TEXT            The value of the `opc-next-page` response header from
                         the previous paginated call.
  --all                  Fetches all pages of results. If you provide this
                         option, then you cannot provide the --limit option.
  --page-size INTEGER    When fetching results, the number of results to fetch
                         per call. Only valid when used with --all or --limit,
                         and ignored otherwise.
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas access-rule update --help
Usage: oci waas access-rule update [OPTIONS]

  Updates the list of access rules in the Web Application Firewall
  configuration for a specified WAAS policy. Access rules allow explicit
  actions to be defined and executed for requests that meet various
  conditions. A rule action can be set to allow, detect, or block requests.
  The detect setting allows the request to pass through the Web Application
  Firewall and is tagged with a `DETECT` flag in the Web Application
  Firewall's log. This operation can create, delete, update, and/or reorder
  access rules depending on the structure of the request body. Updating an
  existing access rule can be accomplished by changing the properties of the
  access rule object with a non-empty `key` property in the list. Reordering
  of access rules can be accomplished by changing the order of the access
  rules in the list when updating. Creating an access rule can be accomplished
  by adding a new access rule object to the list without a `key` property. A
  `key` will be generated for the new access rule upon update. Deleting an
  access rule can be accomplished by removing the existing access rule object
  from the list. Any existing access rule with a `key` that is not present in
  the list of access rules sent in the request will be deleted.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --access-rules COMPLEX TYPE     This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas address-rate-limiting --help
Usage: oci waas address-rate-limiting [OPTIONS] COMMAND [ARGS]...

  The IP rate limiting configuration. Defines the amount of allowed requests
  from a unique IP address and the resulting block response code when that
  threshold is exceeded.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get-waf     Gets the address rate limiting settings of...
  update-waf  Updates the address rate limiting settings in...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas address-rate-limiting get-waf --help
Usage: oci waas address-rate-limiting get-waf [OPTIONS]

  Gets the address rate limiting settings of the Web Application Firewall
  configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas address-rate-limiting update-waf --help
Usage: oci waas address-rate-limiting update-waf [OPTIONS]

  Updates the address rate limiting settings in the Web Application Firewall
  configuration for a policy. Rate limiting allows you to configure a
  threshold for the number of requests from a unique IP address for the given
  period. You can also define the response code for the requests from the same
  address that exceed the threshold.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --is-enabled BOOLEAN            Enables or disables the address rate limiting
                                  Web Application Firewall feature. [required]
  --allowed-rate-per-address INTEGER
                                  The number of allowed requests per second from
                                  one IP address. If unspecified, defaults to
                                  `1`.
  --max-delayed-count-per-address INTEGER
                                  The maximum number of requests allowed to be
                                  queued before subsequent requests are dropped.
                                  If unspecified, defaults to `10`.
  --block-response-code INTEGER   The response status code returned when a
                                  request is blocked. If unspecified, defaults
                                  to `503`.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas captcha --help
Usage: oci waas captcha [OPTIONS] COMMAND [ARGS]...

  The settings of the CAPTCHA challenge. If a specific URL should be accessed
  only by a human, a CAPTCHA challenge can be placed at the URL to protect the
  web application from bots.

  *Warning:* Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list    Gets the list of currently configured CAPTCHA...
  update  Updates the list of CAPTCHA challenges in the...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas captcha list --help
Usage: oci waas captcha list [OPTIONS]

  Gets the list of currently configured CAPTCHA challenges in the Web
  Application Firewall configuration of a WAAS policy.

  The order of the CAPTCHA challenges is important. The URL for each CAPTCHA
  will be checked in the order they are created.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --limit INTEGER        The maximum number of items to return in a paginated
                         call. In unspecified, defaults to `10`.
  --page TEXT            The value of the `opc-next-page` response header from
                         the previous paginated call.
  --all                  Fetches all pages of results. If you provide this
                         option, then you cannot provide the --limit option.
  --page-size INTEGER    When fetching results, the number of results to fetch
                         per call. Only valid when used with --all or --limit,
                         and ignored otherwise.
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas captcha update --help
Usage: oci waas captcha update [OPTIONS]

  Updates the list of CAPTCHA challenges in the Web Application Firewall
  configuration for a WAAS policy. This operation can create, update, or
  delete CAPTCHAs depending on the structure of the request body. Updating an
  existing CAPTCHA can be accomplished by changing the properties of the
  CAPTCHA object with a non-empty `key` property in the list. Creating a
  CAPTCHA can be accomplished by adding a new CAPTCHA object to the list
  without a `key` property. A `key` will be generated for the new CAPTCHA upon
  update. Deleting a CAPTCHA can be accomplished by removing the existing
  CAPTCHA object from the list. Any existing CAPTCHA with a `key` that is not
  present in the list of CAPTCHAs sent in the request will be deleted.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --captchas COMPLEX TYPE         A list of CAPTCHA details.
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
                                  [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate --help
Usage: oci waas certificate [OPTIONS] COMMAND [ARGS]...

  The details of the SSL certificate. **Warning:** Oracle recommends that you
  avoid using any confidential information when you supply string values using
  the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Allows an SSL certificate to be added to a...
  delete  Deletes an SSL certificate from the WAAS...
  get     Gets the details of an SSL certificate.
  list    Gets a list of SSL certificates that can be...
  update  It is not possible to update a certificate,...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate create --help
Usage: oci waas certificate create [OPTIONS]

  Allows an SSL certificate to be added to a WAAS policy. The Web Application
  Firewall terminates SSL connections to inspect requests in runtime, and then
  re-encrypts requests before sending them to the origin for fulfillment.

  For more information, see [WAF Settings].

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment in which to
                                  create the SSL certificate. [required]
  --certificate-data TEXT         The data of the SSL certificate. [required]
  --private-key-data TEXT         The private key of the SSL certificate.
                                  [required]
  --display-name TEXT             A user-friendly name for the SSL certificate.
                                  The name can be changed and does not need to
                                  be unique.
  --is-trust-verification-disabled BOOLEAN
                                  Set to true if the SSL certificate is self-
                                  signed.
  --freeform-tags COMPLEX TYPE    A simple key-value pair without any defined
                                  schema.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     A key-value pair with a defined schema that
                                  restricts the values of tags. These predefined
                                  keys are scoped to namespaces.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [CREATING|ACTIVE|FAILED|UPDATING|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate delete --help
Usage: oci waas certificate delete [OPTIONS]

  Deletes an SSL certificate from the WAAS service.

Options:
  --certificate-id TEXT           The [OCID] of the SSL certificate used in the
                                  WAAS policy. This number is generated when the
                                  certificate is added to the policy. [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|FAILED|UPDATING|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate get --help
Usage: oci waas certificate get [OPTIONS]

  Gets the details of an SSL certificate.

Options:
  --certificate-id TEXT  The [OCID] of the SSL certificate used in the WAAS
                         policy. This number is generated when the certificate
                         is added to the policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate list --help
Usage: oci waas certificate list [OPTIONS]

  Gets a list of SSL certificates that can be used in a WAAS policy.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. This number is
                                  generated when the compartment is created.
                                  [required]
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --sort-by [id|compartmentId|displayName|notValidAfter|timeCreated]
                                  The value by which certificate summaries are
                                  sorted in a paginated 'List' call. If
                                  unspecified, defaults to `timeCreated`.
  --sort-order [ASC|DESC]         The value of the sorting direction of
                                  resources in a paginated 'List' call. If
                                  unspecified, defaults to `DESC`.
  --id TEXT                       Filter certificates using a list of
                                  certificates OCIDs.
  --display-name TEXT             Filter certificates using a list of display
                                  names.
  --lifecycle-state TEXT          Filter certificates using a list of lifecycle
                                  states.
  --time-created-greater-than-or-equal-to DATETIME
                                  A filter that matches certificates created on
                                  or after the specified date-time.
                                  
                                  The
                                  following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-created-less-than DATETIME
                                  A filter that matches certificates created
                                  before the specified date-time.
                                  
                                  The
                                  following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas certificate update --help
Usage: oci waas certificate update [OPTIONS]

  It is not possible to update a certificate, only create and delete.
  Therefore, this operation can only update the display name, freeform tags,
  and defined tags of a certificate.

Options:
  --certificate-id TEXT           The [OCID] of the SSL certificate used in the
                                  WAAS policy. This number is generated when the
                                  certificate is added to the policy. [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --display-name TEXT             A user-friendly name for the SSL certificate.
                                  The name can be changed and does not need to
                                  be unique.
  --freeform-tags COMPLEX TYPE    A simple key-value pair without any defined
                                  schema.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     A key-value pair with a defined schema that
                                  restricts the values of tags. These predefined
                                  keys are scoped to namespaces.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [CREATING|ACTIVE|FAILED|UPDATING|DELETING|DELETED]
                                  This operation creates, modifies or deletes a
                                  resource that has a defined lifecycle state.
                                  Specify this option to perform the action and
                                  then wait until the resource reaches a given
                                  lifecycle state. If timeout is reached, a
                                  return code of 2 is returned. For any other
                                  error, a return code of 1 is returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the resource to
                                  reach the lifecycle state defined by --wait-
                                  for-state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the resource to see if it has reached
                                  the lifecycle state defined by --wait-for-
                                  state. Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas device-fingerprint-challenge --help
Usage: oci waas device-fingerprint-challenge [OPTIONS] COMMAND [ARGS]...

  The device fingerprint challenge settings. The device fingerprint challenge
  generates hashed signatures of both virtual and real browsers to identify
  and block malicious bots.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the device fingerprint challenge...
  update  Updates the Device Fingerprint Challenge...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas device-fingerprint-challenge get --help
Usage: oci waas device-fingerprint-challenge get [OPTIONS]

  Gets the device fingerprint challenge settings in the Web Application
  Firewall configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas device-fingerprint-challenge update --help
Usage: oci waas device-fingerprint-challenge update [OPTIONS]

  Updates the Device Fingerprint Challenge (DFC) settings in the Web
  Application Firewall configuration for a policy. The DFC generates a hashed
  signature of both virtual and real browsers based on 50+ attributes. These
  proprietary signatures are then leveraged for real-time correlation to
  identify and block malicious bots.

  The signature is based on a library of attributes detected via JavaScript
  listeners; the attributes include OS, screen resolution, fonts, UserAgent,
  IP address, etc. We are constantly making improvements and considering new
  libraries to include in our DFC build. We can also exclude attributes from
  the signature as needed.

  DFC collects attributes to generate a hashed signature about a client – if a
  fingerprint is not possible, then it will result in a block or alert action.
  Actions can be enforced across multiple devices if they share they have the
  same fingerprint.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --is-enabled BOOLEAN            Enables or disables the device fingerprint
                                  challenge Web Application Firewall feature.
                                  [required]
  --action [DETECT|BLOCK]         The action to take on requests from detected
                                  bots. If unspecified, defaults to `DETECT`.
  --failure-threshold INTEGER     The number of failed requests allowed before
                                  taking action. If unspecified, defaults to
                                  `10`.
  --action-expiration-in-seconds INTEGER
                                  The number of seconds between challenges for
                                  the same IP address. If unspecified, defaults
                                  to `60`.
  --failure-threshold-expiration-in-seconds INTEGER
                                  The number of seconds before the failure
                                  threshold resets. If unspecified, defaults to
                                  `60`.
  --max-address-count INTEGER     The maximum number of IP addresses permitted
                                  with the same device fingerprint. If
                                  unspecified, defaults to `20`.
  --max-address-count-expiration-in-seconds INTEGER
                                  The number of seconds before the maximum
                                  addresses count resets. If unspecified,
                                  defaults to `60`.
  --challenge-settings COMPLEX TYPE
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas edge-subnet --help
Usage: oci waas edge-subnet [OPTIONS] COMMAND [ARGS]...

  The details about an edge node subnet.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Return the list of the tenant's edge node...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas edge-subnet list --help
Usage: oci waas edge-subnet list [OPTIONS]

  Return the list of the tenant's edge node subnets. Use these CIDR blocks to
  restrict incoming traffic to your origin. These subnets are owned by OCI and
  forward traffic to customer origins. They are not associated with specific
  regions or compartments.

Options:
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --sort-by [cidr|region|timeModified]
                                  The value by which edge node subnets are
                                  sorted in a paginated 'List' call. If
                                  unspecified, defaults to `timeModified`.
  --sort-order [ASC|DESC]         The value of the sorting direction of
                                  resources in a paginated 'List' call. If
                                  unspecified, defaults to `DESC`.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas good-bot --help
Usage: oci waas good-bot [OPTIONS] COMMAND [ARGS]...

  The good bot settings. Good bots provides a list of bots which are managed
  by known providers.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list    Gets the list of good bots defined in the Web...
  update  Updates the list of good bots in the Web...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas good-bot list --help
Usage: oci waas good-bot list [OPTIONS]

  Gets the list of good bots defined in the Web Application Firewall
  configuration for a WAAS policy.

  The list is sorted ascending by `key`.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --limit INTEGER        The maximum number of items to return in a paginated
                         call. In unspecified, defaults to `10`.
  --page TEXT            The value of the `opc-next-page` response header from
                         the previous paginated call.
  --all                  Fetches all pages of results. If you provide this
                         option, then you cannot provide the --limit option.
  --page-size INTEGER    When fetching results, the number of results to fetch
                         per call. Only valid when used with --all or --limit,
                         and ignored otherwise.
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas good-bot update --help
Usage: oci waas good-bot update [OPTIONS]

  Updates the list of good bots in the Web Application Firewall configuration
  for a policy. Only the fields specified in the request body will be updated,
  all other configuration properties will remain unchanged.

  Good bots allows you to manage access for bots from known providers, such as
  Google or Baidu. For more information about good bots, please see [Bot
  Management].

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --good-bots COMPLEX TYPE        This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas human-interaction-challenge --help
Usage: oci waas human-interaction-challenge [OPTIONS] COMMAND [ARGS]...

  The human interaction challenge settings. The human interaction challenge
  checks various event listeners in the user's browser to determine if there
  is a human user making a request.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the human interaction challenge settings...
  update  Updates the Human Interaction Challenge (HIC)...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas human-interaction-challenge get --help
Usage: oci waas human-interaction-challenge get [OPTIONS]

  Gets the human interaction challenge settings in the Web Application
  Firewall configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas human-interaction-challenge update --help
Usage: oci waas human-interaction-challenge update [OPTIONS]

  Updates the Human Interaction Challenge (HIC) settings in the Web
  Application Firewall configuration for a WAAS policy. HIC is a
  countermeasure that allows the proxy to check the user's browser for various
  behaviors that distinguish a human presence from a bot.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --is-enabled BOOLEAN            Enables or disables the human interaction
                                  challenge Web Application Firewall feature.
                                  [required]
  --action [DETECT|BLOCK]         The action to take against requests from
                                  detected bots. If unspecified, defaults to
                                  `DETECT`.
  --failure-threshold INTEGER     The number of failed requests before taking
                                  action. If unspecified, defaults to `10`.
  --action-expiration-in-seconds INTEGER
                                  The number of seconds between challenges for
                                  the same IP address. If unspecified, defaults
                                  to `60`.
  --failure-threshold-expiration-in-seconds INTEGER
                                  The number of seconds before the failure
                                  threshold resets. If unspecified, defaults to
                                  `60`.
  --interaction-threshold INTEGER
                                  The number of interactions required to pass
                                  the challenge. If unspecified, defaults to
                                  `3`.
  --recording-period-in-seconds INTEGER
                                  The number of seconds to record the
                                  interactions from the user. If unspecified,
                                  defaults to `15`.
  --set-http-header COMPLEX TYPE  Adds an additional HTTP header to requests
                                  that fail the challenge before being passed to
                                  the origin. Only applicable when the `action`
                                  is set to `DETECT`.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --challenge-settings COMPLEX TYPE
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas js-challenge --help
Usage: oci waas js-challenge [OPTIONS] COMMAND [ARGS]...

  The JavaScript challenge settings. Javascript Challenge is the function to
  filter abnormal or malicious bots and allow access to real clients.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the JavaScript challenge settings in the...
  update  Updates the JavaScript challenge settings in...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas js-challenge get --help
Usage: oci waas js-challenge get [OPTIONS]

  Gets the JavaScript challenge settings in the Web Application Firewall
  configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas js-challenge update --help
Usage: oci waas js-challenge update [OPTIONS]

  Updates the JavaScript challenge settings in the Web Application Firewall
  configuration for a WAAS policy. JavaScript Challenge validates that the
  client can accept JavaScript with a binary decision. For more information,
  see [Bot Management].

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --is-enabled BOOLEAN            Enables or disables the JavaScript challenge
                                  Web Application Firewall feature. [required]
  --action [DETECT|BLOCK]         The action to take against requests from
                                  detected bots. If unspecified, defaults to
                                  `DETECT`.
  --failure-threshold INTEGER     The number of failed requests before taking
                                  action. If unspecified, defaults to `10`.
  --action-expiration-in-seconds INTEGER
                                  The number of seconds between challenges from
                                  the same IP address. If unspecified, defaults
                                  to `60`.
  --set-http-header COMPLEX TYPE  Adds an additional HTTP header to requests
                                  that fail the challenge before being passed to
                                  the origin. Only applicable when the `action`
                                  is set to `DETECT`.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --challenge-settings COMPLEX TYPE
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas policy-config --help
Usage: oci waas policy-config [OPTIONS] COMMAND [ARGS]...

  The configuration details for the WAAS policy.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the configuration of a WAAS policy.
  update  Updates the configuration for a WAAS policy.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas policy-config get --help
Usage: oci waas policy-config get [OPTIONS]

  Gets the configuration of a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas policy-config update --help
Usage: oci waas policy-config update [OPTIONS]

  Updates the configuration for a WAAS policy. Only the fields specified in
  the request body will be updated; all other properties will remain
  unchanged.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --certificate-id TEXT           The OCID of the SSL certificate to use if
                                  HTTPS is supported.
  --is-https-enabled BOOLEAN      Enable or disable HTTPS support. If true, a
                                  `certificateId` is required. If unspecified,
                                  defaults to `false`.
  --is-https-forced BOOLEAN       Force HTTP to HTTPS redirection. If
                                  unspecified, defaults to `false`.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-rule --help
Usage: oci waas protection-rule [OPTIONS] COMMAND [ARGS]...

  The protection rule settings. Protection rules can allow, block, or trigger
  an alert if a request meets the parameters of an applied rule.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the details of a protection rule in the...
  list    Gets the list of protection rules in the Web...
  update  Updates the action for each specified...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-rule get --help
Usage: oci waas protection-rule get [OPTIONS]

  Gets the details of a protection rule in the Web Application Firewall
  configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT       The [OCID] of the WAAS policy. [required]
  --protection-rule-key TEXT  The protection rule key. [required]
  --from-json TEXT            Provide input to this command as a JSON document
                              from a file using the file://path-to/file syntax.
                              The --generate-full-command-json-input option can
                              be used to generate a sample json file to be used
                              with this command option. The key names are pre-
                              populated and match the command option names
                              (converted to camelCase format, e.g. compartment-
                              id --> compartmentId), while the values of the
                              keys need to be populated by the user before using
                              the sample file as an input to this command. For
                              any command option that accepts multiple values,
                              the value of the key can be a JSON array.
                              
                              Options
                              can still be provided on the command line. If an
                              option exists in both the JSON document and the
                              command line then the command line specified value
                              will be used.
                              
                              For examples on usage of this
                              option, please see our "using CLI with advanced
                              JSON options" link: https://docs.cloud.oracle.com/
                              iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSON
                              Options
  -?, -h, --help              For detailed help on any of these individual
                              commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-rule list --help
Usage: oci waas protection-rule list [OPTIONS]

  Gets the list of protection rules in the Web Application Firewall
  configuration for a WAAS policy, including currently defined rules and
  recommended rules. The list is sorted ascending by `key`.

Options:
  --waas-policy-id TEXT        The [OCID] of the WAAS policy. [required]
  --limit INTEGER              The maximum number of items to return in a
                               paginated call. In unspecified, defaults to `10`.
  --page TEXT                  The value of the `opc-next-page` response header
                               from the previous paginated call.
  --mod-security-rule-id TEXT  Filter rules using a list of ModSecurity rule
                               IDs.
  --action [OFF|DETECT|BLOCK]  Filter rules using a list of actions.
  --all                        Fetches all pages of results. If you provide this
                               option, then you cannot provide the --limit
                               option.
  --page-size INTEGER          When fetching results, the number of results to
                               fetch per call. Only valid when used with --all
                               or --limit, and ignored otherwise.
  --from-json TEXT             Provide input to this command as a JSON document
                               from a file using the file://path-to/file syntax.
                               The --generate-full-command-json-input option can
                               be used to generate a sample json file to be used
                               with this command option. The key names are pre-
                               populated and match the command option names
                               (converted to camelCase format, e.g. compartment-
                               id --> compartmentId), while the values of the
                               keys need to be populated by the user before
                               using the sample file as an input to this
                               command. For any command option that accepts
                               multiple values, the value of the key can be a
                               JSON array.
                               
                               Options can still be provided on the
                               command line. If an option exists in both the
                               JSON document and the command line then the
                               command line specified value will be used.
                               
                               For
                               examples on usage of this option, please see our
                               "using CLI with advanced JSON options" link: http
                               s://docs.cloud.oracle.com/iaas/Content/API/SDKDoc
                               s/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help               For detailed help on any of these individual
                               commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-rule update --help
Usage: oci waas protection-rule update [OPTIONS]

  Updates the action for each specified protection rule. Requests can either
  be allowed, blocked, or trigger an alert if they meet the parameters of an
  applied rule. For more information on protection rules, see [WAF Protection
  Rules]. This operation can update or disable protection rules depending on
  the structure of the request body. Updating an existing protection rule can
  be accomplished by changing the properties of the protection rule object
  with a non-empty `key` property in the list.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --protection-rules COMPLEX TYPE
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-settings --help
Usage: oci waas protection-settings [OPTIONS] COMMAND [ARGS]...

  The settings used for protection rules.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the protection settings in the Web...
  update  Updates the protection settings in the Web...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-settings get --help
Usage: oci waas protection-settings get [OPTIONS]

  Gets the protection settings in the Web Application Firewall configuration
  for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas protection-settings update --help
Usage: oci waas protection-settings update [OPTIONS]

  Updates the protection settings in the Web Application Firewall
  configuration for a WAAS policy. Protection settings allow you define what
  action is taken when a request is blocked by the Web Application Firewall,
  such as returning a response code or block page. Only the fields specified
  in the request body will be updated; all other fields will remain unchanged.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --block-action [SHOW_ERROR_PAGE|SET_RESPONSE_CODE]
                                  If `action` is set to `BLOCK`, this specifies
                                  how the traffic is blocked when detected as
                                  malicious by a protection rule. If
                                  unspecified, defaults to `SET_RESPONSE_CODE`.
  --block-response-code INTEGER   The response code returned when `action` is
                                  set to `BLOCK`, `blockAction` is set to
                                  `SET_RESPONSE_CODE`, and the traffic is
                                  detected as malicious by a protection rule. If
                                  unspecified, defaults to `403`.
  --block-error-page-message TEXT
                                  The message to show on the error page when
                                  `action` is set to `BLOCK`, `blockAction` is
                                  set to `SHOW_ERROR_PAGE`, and the traffic is
                                  detected as malicious by a protection rule. If
                                  unspecified, defaults to 'Access to the
                                  website is blocked.'
  --block-error-page-code TEXT    The error code to show on the error page when
                                  `action` is set to `BLOCK`, `blockAction` is
                                  set to `SHOW_ERROR_PAGE`, and the traffic is
                                  detected as malicious by a protection rule. If
                                  unspecified, defaults to `403`.
  --block-error-page-description TEXT
                                  The description text to show on the error page
                                  when `action` is set to `BLOCK`, `blockAction`
                                  is set to `SHOW_ERROR_PAGE`, and the traffic
                                  is detected as malicious by a protection rule.
                                  If unspecified, defaults to `Access blocked by
                                  website owner. Please contact support.`
  --max-argument-count INTEGER    The maximum number of arguments allowed to be
                                  passed to your application before an action is
                                  taken. If unspecified, defaults to `255`.
  --max-name-length-per-argument INTEGER
                                  The maximum length allowed for each argument
                                  name, in characters. If unspecified, defaults
                                  to `400`.
  --max-total-name-length-of-arguments INTEGER
                                  The maximum length allowed for the sum of all
                                  argument names, in characters. If unspecified,
                                  defaults to `64000`.
  --recommendations-period-in-days INTEGER
                                  The length of time to analyze traffic traffic,
                                  in days. After the analysis period,
                                  `WafRecommendations` will be populated. If
                                  unspecified, defaults to `10`.
                                  
                                  Use `GET /waas
                                  Policies/{waasPolicyId}/wafRecommendations` to
                                  view WAF recommendations.
  --is-response-inspected BOOLEAN
                                  Inspects the response body of origin
                                  responses. Can be used to detect leakage of
                                  sensitive data. If unspecified, defaults to
                                  `false`.
                                  
                                  **Note:** Only origin responses with
                                  a Content-Type matching a value in
                                  `mediaTypes` will be inspected.
  --max-response-size-in-ki-b INTEGER
                                  The maximum response size to be fully
                                  inspected, in binary kilobytes (KiB). Anything
                                  over this limit will be partially inspected.
                                  If unspecified, defaults to `1024`.
  --allowed-http-methods [OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|PROPFIND]
                                  The list of allowed HTTP methods. If
                                  unspecified, default to `[OPTIONS, GET, HEAD,
                                  POST]`.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --media-types COMPLEX TYPE      The list of media types to allow for
                                  inspection, if `isResponseInspected` is
                                  enabled. Only responses with MIME types in
                                  this list will be inspected. If unspecified,
                                  defaults to `[`text/html`, `text/plain`,
                                  `text/xml`]`.
                                  
                                      Supported MIME types
                                  include:
                                  
                                      - text/html     - text/plain
                                  - text/asp     - text/css     - text/x-script
                                  - application/json     - text/webviewhtml
                                  - text/x-java-source     -
                                  application/x-javascript     -
                                  application/javascript     -
                                  application/ecmascript     - text/javascript
                                  - text/ecmascript     - text/x-script.perl
                                  - text/x-script.phyton     - application/plain
                                  - application/xml     - text/xml
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas recommendation --help
Usage: oci waas recommendation [OPTIONS] COMMAND [ARGS]...

  A recommended protection rule for a web application. This recommendation can
  be accepted to apply it to the Web Application Firewall configuration for
  this policy.

  Use the `POST
  /waasPolicies/{waasPolicyId}/actions/acceptWafConfigRecommendations` method
  to accept recommended protection rules.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  accept  Accepts a list of recommended Web Application...
  list    Gets the list of recommended Web Application...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas recommendation accept --help
Usage: oci waas recommendation accept [OPTIONS]

  Accepts a list of recommended Web Application Firewall protection rules. Web
  Application Firewall protection rule recommendations are sets of rules
  generated by observed traffic patterns through the Web Application Firewall
  and are meant to optimize the Web Application Firewall's security profile.
  Only the rules specified in the request body will be updated; all other
  rules will remain unchanged.

  Use the `GET /waasPolicies/{waasPolicyId}/wafConfig/recommendations` method
  to view a list of recommended Web Application Firewall protection rules. For
  more information, see [WAF Protection Rules].

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --protection-rule-keys COMPLEX TYPE
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas recommendation list --help
Usage: oci waas recommendation list [OPTIONS]

  Gets the list of recommended Web Application Firewall protection rules.

  Use the `POST
  /waasPolicies/{waasPolicyId}/actions/acceptWafConfigRecommendations` method
  to accept recommended Web Application Firewall protection rules. For more
  information, see [WAF Protection Rules]. The list is sorted ascending by
  `key`.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --recommended-action [DETECT|BLOCK]
                                  A filter that matches recommended protection
                                  rules based on the selected action. If
                                  unspecified, rules with any action type are
                                  returned.
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas threat-feed --help
Usage: oci waas threat-feed [OPTIONS] COMMAND [ARGS]...

  The settings of the threat intelligence feed. You can block requests from IP
  addresses based on their reputations with various commercial and open source
  threat feeds.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list    Gets the list of available web application...
  update  Updates the action to take when a request's...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas threat-feed list --help
Usage: oci waas threat-feed list [OPTIONS]

  Gets the list of available web application threat intelligence feeds and the
  actions set for each feed. The list is sorted ascending by `key`.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --limit INTEGER        The maximum number of items to return in a paginated
                         call. In unspecified, defaults to `10`.
  --page TEXT            The value of the `opc-next-page` response header from
                         the previous paginated call.
  --all                  Fetches all pages of results. If you provide this
                         option, then you cannot provide the --limit option.
  --page-size INTEGER    When fetching results, the number of results to fetch
                         per call. Only valid when used with --all or --limit,
                         and ignored otherwise.
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas threat-feed update --help
Usage: oci waas threat-feed update [OPTIONS]

  Updates the action to take when a request's IP address matches an address in
  the specified threat intelligence feed. Threat intelligence feeds are
  compiled lists of IP addresses with malicious reputations based on internet
  intelligence. Only the threat feeds specified in the request body will be
  updated; all other threat feeds will remain unchanged.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --threat-feeds COMPLEX TYPE     A list of threat feeds for which to update the
                                  actions.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy --help
Usage: oci waas waas-policy [OPTIONS] COMMAND [ARGS]...

  The details of a Web Application Acceleration and Security (WAAS) policy. A
  policy describes how the WAAS service should operate for the configured web
  application.

  **Warning:** Oracle recommends that you avoid using any confidential
  information when you supply string values using the API.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  create  Creates a new Web Application Acceleration...
  delete  Deletes a policy.
  get     Gets the details of a WAAS policy.
  list    Gets a list of WAAS policies.
  update  Updates the details of a WAAS policy,...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy create --help
Usage: oci waas waas-policy create [OPTIONS]

  Creates a new Web Application Acceleration and Security (WAAS) policy in the
  specified compartment. A WAAS policy must be established before creating Web
  Application Firewall (WAF) rules. To use WAF rules, your web application's
  origin servers must defined in the `WaasPolicy` schema.

  A domain name must be specified when creating a WAAS policy. The domain name
  should be different from the origins specified in your `WaasPolicy`. Once
  domain name is entered and stored, it is unchangeable.

  Use the record data returned in the `cname` field of the `WaasPolicy` object
  to create a CNAME record in your DNS configuration that will direct your
  domain's traffic through the WAF.

  For the purposes of access control, you must provide the OCID of the
  compartment where you want the service to reside. For information about
  access control and compartments, see [Overview of the IAM Service].

  You must specify a display name and domain for the WAAS policy. The display
  name does not have to be unique and can be changed. The domain name should
  be different from every origin specified in `WaasPolicy`.

  All Oracle Cloud Infrastructure resources, including WAAS policies, receive
  a unique, Oracle-assigned ID called an Oracle Cloud Identifier (OCID). When
  a resource is created, you can find its OCID in the response. You can also
  retrieve a resource's OCID by using a list API operation for that resource
  type, or by viewing the resource in the Console. Fore more information, see
  [Resource Identifiers].

  **Note:** After sending the POST request, the new object's state will
  temporarily be `CREATING`. Ensure that the resource's state has changed to
  `ACTIVE` before use.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment in which to
                                  create the WAAS policy. [required]
  --domain TEXT                   The web application domain that the WAAS
                                  policy protects. [required]
  --display-name TEXT             A user-friendly name for the WAAS policy. The
                                  name is can be changed and does not need to be
                                  unique.
  --additional-domains COMPLEX TYPE
                                  An array of additional domains for the
                                  specified web application.
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --origins COMPLEX TYPE          A map of host to origin for the web
                                  application. The key should be a customer
                                  friendly name for the host, ex. primary,
                                  secondary, etc.
                                  
                                  This option is a JSON
                                  dictionary of type dict(str, Origin).  For
                                  documentation on Origin please see our API
                                  reference: https://docs.cloud.oracle.com/api/#
                                  /en/waas/20181116/datatypes/Origin.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --policy-config COMPLEX TYPE    This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --waf-config COMPLEX TYPE       This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --freeform-tags COMPLEX TYPE    A simple key-value pair without any defined
                                  schema.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     A key-value pair with a defined schema that
                                  restricts the values of tags. These predefined
                                  keys are scoped to namespaces.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy delete --help
Usage: oci waas waas-policy delete [OPTIONS]

  Deletes a policy.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform deletion without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy get --help
Usage: oci waas waas-policy get [OPTIONS]

  Gets the details of a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy list --help
Usage: oci waas waas-policy list [OPTIONS]

  Gets a list of WAAS policies.

Options:
  -c, --compartment-id TEXT       The [OCID] of the compartment. This number is
                                  generated when the compartment is created.
                                  [required]
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --sort-by [id|displayName|timeCreated]
                                  The value by which policies are sorted in a
                                  paginated 'List' call.  If unspecified,
                                  defaults to `timeCreated`.
  --sort-order [ASC|DESC]         The value of the sorting direction of
                                  resources in a paginated 'List' call. If
                                  unspecified, defaults to `DESC`.
  --id TEXT                       Filter policies using a list of policy OCIDs.
  --display-name TEXT             Filter policies using a list of display names.
  --lifecycle-state TEXT          Filter policies using a list of lifecycle
                                  states.
  --time-created-greater-than-or-equal-to DATETIME
                                  A filter that matches policies created on or
                                  after the specified date and time.
                                  
                                  The
                                  following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-created-less-than DATETIME
                                  A filter that matches policies created before
                                  the specified date-time.
                                  
                                  The following
                                  datetime formats are supported:
                                  
                                  UTC with
                                  milliseconds
                                  ***********************
                                  Format:
                                  YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waas-policy update --help
Usage: oci waas waas-policy update [OPTIONS]

  Updates the details of a WAAS policy, including origins and tags. Only the
  fields specified in the request body will be updated; all other properties
  will remain unchanged. To update platform provided resources such as
  `GoodBots`, `ProtectionRules`, and `ThreatFeeds` first retrieve the list of
  available resources with the related list operation such as `GetThreatFeeds`
  or `GetProtectionRules`. The returned list will contain objects with `key`
  properties that can be used to update the resource during the
  `UpdateWaasPolicy` request.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --display-name TEXT             A user-friendly name for the WAAS policy. The
                                  name is can be changed and does not need to be
                                  unique.
  --additional-domains COMPLEX TYPE
                                  An array of additional domains protected by
                                  this WAAS policy.
                                  This is a complex type whose
                                  value must be valid JSON. The value can be
                                  provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --origins COMPLEX TYPE          A map of host to origin for the web
                                  application. The key should be a customer
                                  friendly name for the host, ex. primary,
                                  secondary, etc.
                                  
                                  This option is a JSON
                                  dictionary of type dict(str, Origin).  For
                                  documentation on Origin please see our API
                                  reference: https://docs.cloud.oracle.com/api/#
                                  /en/waas/20181116/datatypes/Origin.
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --policy-config COMPLEX TYPE    This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --waf-config COMPLEX TYPE       This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --freeform-tags COMPLEX TYPE    A simple key-value pair without any defined
                                  schema.
                                  This is a complex type whose value
                                  must be valid JSON. The value can be provided
                                  as a string on the command line or passed in
                                  as a file using
                                  the file://path/to/file
                                  syntax.
                                  
                                  The --generate-param-json-input
                                  option can be used to generate an example of
                                  the JSON which must be provided. We recommend
                                  storing this example
                                  in a file, modifying it
                                  as needed and then passing it back in via the
                                  file:// syntax.
  --defined-tags COMPLEX TYPE     Defined tags for this resource. Each key is
                                  predefined and scoped to a namespace. For more
                                  information, see [Resource Tags].
                                  This is a
                                  complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-blocked-request --help
Usage: oci waas waf-blocked-request [OPTIONS] COMMAND [ARGS]...

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Gets the number of blocked requests by a Web...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-blocked-request list --help
Usage: oci waas waf-blocked-request list [OPTIONS]

  Gets the number of blocked requests by a Web Application Firewall feature in
  five minute blocks, in ascending order by `timeObserved`.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --time-observed-greater-than-or-equal-to DATETIME
                                  A filter that limits returned events to those
                                  occurring on or after a date and time,
                                  specified in RFC 3339 format. If unspecified,
                                  defaults to 30 minutes before receipt of the
                                  request.
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-observed-less-than DATETIME
                                  A filter that limits returned events to those
                                  occurring before a date and time, specified in
                                  RFC 3339 format.
                                  
                                  The following datetime
                                  formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --waf-feature [PROTECTION_RULES|JS_CHALLENGE|ACCESS_RULES|THREAT_FEEDS|HUMAN_INTERACTION_CHALLENGE|DEVICE_FINGERPRINT_CHALLENGE|CAPTCHA|ADDRESS_RATE_LIMITING]
                                  Filter stats by the Web Application Firewall
                                  feature that triggered the block action. If
                                  unspecified, data for all WAF features will be
                                  returned.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-config --help
Usage: oci waas waf-config [OPTIONS] COMMAND [ARGS]...

  The Web Application Firewall configuration for the WAAS policy.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  get     Gets the Web Application Firewall...
  update  Updates the Web Application Firewall...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-config get --help
Usage: oci waas waf-config get [OPTIONS]

  Gets the Web Application Firewall configuration details for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-config update --help
Usage: oci waas waf-config update [OPTIONS]

  Updates the Web Application Firewall configuration for a specified WAAS
  policy.

  To update platform provided resources such as `GoodBots`, `ProtectionRules`,
  and `ThreatFeeds` first retrieve the list of available resources with the
  related list operation such as `GetThreatFeeds` or `GetProtectionRules`.

  The returned list will contain objects with `key` properties that can be
  used to update the resource during the `UpdateWafConfig` request.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --access-rules COMPLEX TYPE     The access rules applied to the Web
                                  Application Firewall. Used for defining custom
                                  access policies with the combination of
                                  `ALLOW`, `DETECT`, and `BLOCK` rules, based on
                                  different criteria.
                                  
                                  This option is a JSON
                                  list with items of type AccessRule.  For
                                  documentation on AccessRule please see our API
                                  reference: https://docs.cloud.oracle.com/api/#
                                  /en/waas/20181116/datatypes/AccessRule.
                                  This
                                  is a complex type whose value must be valid
                                  JSON. The value can be provided as a string on
                                  the command line or passed in as a file using
                                  the file://path/to/file syntax.
                                  
                                  The
                                  --generate-param-json-input option can be used
                                  to generate an example of the JSON which must
                                  be provided. We recommend storing this example
                                  in a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --address-rate-limiting COMPLEX TYPE
                                  The IP address rate limiting settings used to
                                  limit the number of requests from an address.
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --captchas COMPLEX TYPE         A list of CAPTCHA challenge settings. These
                                  are used to challenge requests with a CAPTCHA
                                  to block bots.
                                  
                                  This option is a JSON list
                                  with items of type Captcha.  For documentation
                                  on Captcha please see our API reference: https
                                  ://docs.cloud.oracle.com/api/#/en/waas/2018111
                                  6/datatypes/Captcha.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --device-fingerprint-challenge COMPLEX TYPE
                                  The device fingerprint challenge settings.
                                  Used to detect unique devices based on the
                                  device fingerprint information collected in
                                  order to block bots.
                                  This is a complex type
                                  whose value must be valid JSON. The value can
                                  be provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --good-bots COMPLEX TYPE        A list of bots allowed to access the web
                                  application.
                                  
                                  This option is a JSON list with
                                  items of type GoodBot.  For documentation on
                                  GoodBot please see our API reference: https://
                                  docs.cloud.oracle.com/api/#/en/waas/20181116/d
                                  atatypes/GoodBot.
                                  This is a complex type whose
                                  value must be valid JSON. The value can be
                                  provided as a string on the command line or
                                  passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --human-interaction-challenge COMPLEX TYPE
                                  The human interaction challenge settings. Used
                                  to look for natural human interactions such as
                                  mouse movements, time on site, and page
                                  scrolling to identify bots.
                                  This is a complex
                                  type whose value must be valid JSON. The value
                                  can be provided as a string on the command
                                  line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --js-challenge COMPLEX TYPE     The JavaScript challenge settings. Used to
                                  challenge requests with a JavaScript challenge
                                  and take the action if a browser has no
                                  JavaScript support in order to block bots.
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --origin TEXT                   The key in the map of origins referencing the
                                  origin used for the Web Application Firewall.
                                  The origin must already be included in
                                  `Origins`. Required when creating the
                                  `WafConfig` resource, but not on update.
  --protection-rules COMPLEX TYPE
                                  A list of the protection rules and their
                                  details.
                                  
                                  This option is a JSON list with
                                  items of type ProtectionRule.  For
                                  documentation on ProtectionRule please see our
                                  API reference: https://docs.cloud.oracle.com/a
                                  pi/#/en/waas/20181116/datatypes/ProtectionRule
                                  .
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --protection-settings COMPLEX TYPE
                                  The settings to apply to protection rules.
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --threat-feeds COMPLEX TYPE     A list of threat intelligence feeds and the
                                  actions to apply to known malicious traffic
                                  based on internet intelligence.
                                  
                                  This option
                                  is a JSON list with items of type ThreatFeed.
                                  For documentation on ThreatFeed please see our
                                  API reference: https://docs.cloud.oracle.com/a
                                  pi/#/en/waas/20181116/datatypes/ThreatFeed.
                                  This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
  --whitelists COMPLEX TYPE       A list of IP addresses that bypass the Web
                                  Application Firewall.
                                  
                                  This option is a JSON
                                  list with items of type Whitelist.  For
                                  documentation on Whitelist please see our API
                                  reference: https://docs.cloud.oracle.com/api/#
                                  /en/waas/20181116/datatypes/Whitelist.
                                  This is
                                  a complex type whose value must be valid JSON.
                                  The value can be provided as a string on the
                                  command line or passed in as a file using
                                  the
                                  file://path/to/file syntax.
                                  
                                  The --generate-
                                  param-json-input option can be used to
                                  generate an example of the JSON which must be
                                  provided. We recommend storing this example
                                  in
                                  a file, modifying it as needed and then
                                  passing it back in via the file:// syntax.
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --force                         Perform update without prompting for
                                  confirmation.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-log --help
Usage: oci waas waf-log [OPTIONS] COMMAND [ARGS]...

  A list of Web Application Firewall log entries. Each entry is a JSON object
  whose fields vary based on log type. Logs record what rules and
  countermeasures are triggered by requests and are used as a basis to move
  request handling into block mode.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Gets structured Web Application Firewall...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-log list --help
Usage: oci waas waf-log list [OPTIONS]

  Gets structured Web Application Firewall event logs for a WAAS policy. The
  list is sorted by the `timeObserved` starting from the oldest recorded event
  (ascending).

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `20`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --time-observed-greater-than-or-equal-to DATETIME
                                  A filter that matches log entries where the
                                  observed event occurred on or after a date and
                                  time specified in RFC 3339 format. If
                                  unspecified, defaults to two hours before
                                  receipt of the request.
                                  
                                  The following
                                  datetime formats are supported:
                                  
                                  UTC with
                                  milliseconds
                                  ***********************
                                  Format:
                                  YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-observed-less-than DATETIME
                                  A filter that matches log entries where the
                                  observed event occurred before a date and
                                  time, specified in RFC 3339 format.
                                  
                                  The
                                  following datetime formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --text-contains TEXT            A full text search for logs.
  --access-rule-key TEXT          Filters logs by access rule key.
  --action [BLOCK|DETECT|BYPASS|LOG|REDIRECTED]
                                  Filters logs by Web Application Firewall
                                  action.
  --client-address TEXT           Filters logs by client IP address.
  --country-code TEXT             Filters logs by country code. Country codes
                                  are in ISO 3166-1 alpha-2 format. For a list
                                  of codes, see [ISO's website].
  --country-name TEXT             Filter logs by country name.
  --fingerprint TEXT              Filter logs by device fingerprint.
  --http-method [OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT]
                                  Filter logs by HTTP method.
  --incident-key TEXT             Filter logs by incident key.
  --log-type [ACCESS|PROTECTION_RULES|JS_CHALLENGE|CAPTCHA|ACCESS_RULES|THREAT_FEEDS|HUMAN_INTERACTION_CHALLENGE|DEVICE_FINGERPRINT_CHALLENGE|ADDRESS_RATE_LIMITING]
                                  Filter by log type.
  --origin-address TEXT           Filter by origin IP address.
  --referrer TEXT                 Filter by referrer.
  --request-url TEXT              Filter by request URL.
  --response-code TEXT            Filter by response code.
  --threat-feed-key TEXT          Filter by threat feed key.
  --user-agent TEXT               Filter by user agent.
  --protection-rule-key TEXT      Filter by protection rule key.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-request --help
Usage: oci waas waf-request [OPTIONS] COMMAND [ARGS]...

  A time series of request counts handled by the Web Application Firewall,
  including blocked requests.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list  Gets the number of requests managed by a Web...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-request list --help
Usage: oci waas waf-request list [OPTIONS]

  Gets the number of requests managed by a Web Application Firewall over a
  specified period of time, including blocked requests. Sorted by
  `timeObserved` with oldest requests first (ascending).

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --time-observed-greater-than-or-equal-to DATETIME
                                  A filter that limits returned events to those
                                  occurring on or after a date and time,
                                  specified in RFC 3339 format. If unspecified,
                                  defaults to 30 minutes before receipt of the
                                  request.
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-observed-less-than DATETIME
                                  A filter that limits returned events to those
                                  occurring before a date and time, specified in
                                  RFC 3339 format.
                                  
                                  The following datetime
                                  formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-traffic-datum --help
Usage: oci waas waf-traffic-datum [OPTIONS] COMMAND [ARGS]...

  A time series of traffic data for the  Web Application Firewall configured
  for a policy.

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list-waf-traffic  Gets the Web Application Firewall traffic...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas waf-traffic-datum list-waf-traffic --help
Usage: oci waas waf-traffic-datum list-waf-traffic [OPTIONS]

  Gets the Web Application Firewall traffic data for a WAAS policy. Sorted by
  `timeObserved` with oldest data points first (ascending).

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --time-observed-greater-than-or-equal-to DATETIME
                                  A filter that limits returned events to those
                                  occurring on or after a date and time,
                                  specified in RFC 3339 format. If unspecified,
                                  defaults to 30 minutes before receipt of the
                                  request.
                                  
                                  The following datetime formats are
                                  supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --time-observed-less-than DATETIME
                                  A filter that limits returned events to those
                                  occurring before a date and time, specified in
                                  RFC 3339 format.
                                  
                                  The following datetime
                                  formats are supported:
                                  
                                  UTC with milliseconds
                                  ***********************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ss.sssTZD
                                  Example:
                                  2017-09-15T20:30:00.123Z
                                  
                                  UTC without
                                  milliseconds
                                  **************************
                                  Format: YYYY-MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T20:30:00Z
                                  
                                  UTC with minute
                                  precision
                                  **************************
                                  Format:
                                  YYYY-MM-DDTHH:mmTZD
                                  Example: 2017-09-15T20:30Z
                                  
                                  Timezone with milliseconds
                                  ***************************
                                  Format: YYYY-MM-
                                  DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00.456-08:00,
                                  2017-09-15T12:30:00.456-0800
                                  
                                  Timezone
                                  without milliseconds
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mm:ssTZD
                                  Example:
                                  2017-09-15T12:30:00-08:00,
                                  2017-09-15T12:30:00-0800
                                  
                                  Timezone with
                                  minute precision
                                  *******************************
                                  Format: YYYY-
                                  MM-DDTHH:mmTZD
                                  Example:
                                  2017-09-15T12:30-08:00,
                                  2017-09-15T12:30-0800
                                  
                                  Short date and time
                                  ********************
                                  The
                                  timezone for this date and time will be taken
                                  as UTC (Needs to be surrounded by single or
                                  double quotes)
                                  Format: 'YYYY-MM-DD HH:mm' or
                                  "YYYY-MM-DD HH:mm"
                                  Example: '2017-09-15 17:25'
                                  
                                  Date Only
                                  *********
                                  This date will be taken
                                  as midnight UTC of that day
                                  Format: YYYY-MM-DD
                                  Example: 2017-09-15
                                  
                                  Epoch seconds
                                  **************
                                  Example: 1412195400
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas whitelist --help
Usage: oci waas whitelist [OPTIONS] COMMAND [ARGS]...

  An array of IP addresses that bypass the Web Application Firewall. Supports
  both single IP addresses or subnet masks (CIDR notation).

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  list    Gets the list of whitelists defined in the...
  update  Updates the list of IP addresses that bypass...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas whitelist list --help
Usage: oci waas whitelist list [OPTIONS]

  Gets the list of whitelists defined in the Web Application Firewall
  configuration for a WAAS policy.

Options:
  --waas-policy-id TEXT  The [OCID] of the WAAS policy. [required]
  --limit INTEGER        The maximum number of items to return in a paginated
                         call. In unspecified, defaults to `10`.
  --page TEXT            The value of the `opc-next-page` response header from
                         the previous paginated call.
  --all                  Fetches all pages of results. If you provide this
                         option, then you cannot provide the --limit option.
  --page-size INTEGER    When fetching results, the number of results to fetch
                         per call. Only valid when used with --all or --limit,
                         and ignored otherwise.
  --from-json TEXT       Provide input to this command as a JSON document from a
                         file using the file://path-to/file syntax.
                         
                         The
                         --generate-full-command-json-input option can be used
                         to generate a sample json file to be used with this
                         command option. The key names are pre-populated and
                         match the command option names (converted to camelCase
                         format, e.g. compartment-id --> compartmentId), while
                         the values of the keys need to be populated by the user
                         before using the sample file as an input to this
                         command. For any command option that accepts multiple
                         values, the value of the key can be a JSON array.
                         Options can still be provided on the command line. If
                         an option exists in both the JSON document and the
                         command line then the command line specified value will
                         be used.
                         
                         For examples on usage of this option, please
                         see our "using CLI with advanced JSON options" link: ht
                         tps://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cl
                         iusing.htm#AdvancedJSONOptions
  -?, -h, --help         For detailed help on any of these individual commands,
                         enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas whitelist update --help
Usage: oci waas whitelist update [OPTIONS]

  Updates the list of IP addresses that bypass the Web Application Firewall
  for a WAAS policy. Supports both single IP addresses or subnet masks (CIDR
  notation). This operation can create, delete, update, and/or reorder
  whitelists depending on the structure of the request body. Updating an
  existing whitelist can be accomplished by changing the properties of the
  whitelist object with a non-empty `key` property in the list. Reordering of
  whitelists can be accomplished by changing the order of the whitelists in
  the list when updating. Creating a whitelist can be accomplished by adding a
  new whitelist object to the list without a `key` property. A `key` will be
  generated for the new whitelist upon update. Deleting a whitelist can be
  accomplished by removing the existing whitelist object from the list. Any
  existing whitelist with a `key` that is not present in the list of
  whitelists sent in the request will be deleted.

Options:
  --waas-policy-id TEXT           The [OCID] of the WAAS policy. [required]
  --whitelists COMPLEX TYPE       This is a complex type whose value must be
                                  valid JSON. The value can be provided as a
                                  string on the command line or passed in as a
                                  file using
                                  the file://path/to/file syntax.
                                  The --generate-param-json-input option can be
                                  used to generate an example of the JSON which
                                  must be provided. We recommend storing this
                                  example
                                  in a file, modifying it as needed and
                                  then passing it back in via the file://
                                  syntax.
                                   [required]
  --if-match TEXT                 For optimistic concurrency control. In the
                                  `PUT` or `DELETE` call for a resource, set the
                                  `if-match` parameter to the value of the etag
                                  from a previous `GET` or `POST` response for
                                  that resource. The resource will be updated or
                                  deleted only if the etag provided matches the
                                  resource's current etag value.
  --wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
                                  This operation asynchronously creates,
                                  modifies or deletes a resource and uses a work
                                  request to track the progress of the
                                  operation. Specify this option to perform the
                                  action and then wait until the work request
                                  reaches a certain state. If timeout is
                                  reached, a return code of 2 is returned. For
                                  any other error, a return code of 1 is
                                  returned.
  --max-wait-seconds INTEGER      The maximum time to wait for the work request
                                  to reach the state defined by --wait-for-
                                  state. Defaults to 1200 seconds.
  --wait-interval-seconds INTEGER
                                  Check every --wait-interval-seconds to see
                                  whether the work request to see if it has
                                  reached the state defined by --wait-for-state.
                                  Defaults to 30 seconds.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas work-request --help
Usage: oci waas work-request [OPTIONS] COMMAND [ARGS]...

  Many of the API requests you use to create and configure WAAS policies do
  not take effect immediately. In these cases, the request spawns an
  asynchronous work flow to fulfill the request. `WorkRequest` objects provide
  visibility for in-progress work flows. For more information about work
  requests, see [Viewing the State of a Work Request].

Options:
  -?, -h, --help  For detailed help on any of these individual commands, enter
                  <command> --help.

Commands:
  cancel  Cancels a specified work request.
  get     Gets the details of a specified work request.
  list    Gets a list of subnets (CIDR notation) from...

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas work-request cancel --help
Usage: oci waas work-request cancel [OPTIONS]

  Cancels a specified work request.

Options:
  --work-request-id TEXT  The [OCID] of the work request. This number is
                          generated when work request is created. [required]
  --if-match TEXT         For optimistic concurrency control. In the `PUT` or
                          `DELETE` call for a resource, set the `if-match`
                          parameter to the value of the etag from a previous
                          `GET` or `POST` response for that resource. The
                          resource will be updated or deleted only if the etag
                          provided matches the resource's current etag value.
  --force                 Perform deletion without prompting for confirmation.
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas work-request get --help
Usage: oci waas work-request get [OPTIONS]

  Gets the details of a specified work request.

Options:
  --work-request-id TEXT  The [OCID] of the work request. This number is
                          generated when work request is created. [required]
  --from-json TEXT        Provide input to this command as a JSON document from
                          a file using the file://path-to/file syntax.
                          
                          The
                          --generate-full-command-json-input option can be used
                          to generate a sample json file to be used with this
                          command option. The key names are pre-populated and
                          match the command option names (converted to camelCase
                          format, e.g. compartment-id --> compartmentId), while
                          the values of the keys need to be populated by the
                          user before using the sample file as an input to this
                          command. For any command option that accepts multiple
                          values, the value of the key can be a JSON array.
                          Options can still be provided on the command line. If
                          an option exists in both the JSON document and the
                          command line then the command line specified value
                          will be used.
                          
                          For examples on usage of this option,
                          please see our "using CLI with advanced JSON options"
                          link: https://docs.cloud.oracle.com/iaas/Content/API/S
                          DKDocs/cliusing.htm#AdvancedJSONOptions
  -?, -h, --help          For detailed help on any of these individual commands,
                          enter <command> --help.

++++++++++++++++++++++++++++++++++++++++++++++
$ oci waas work-request list --help
Usage: oci waas work-request list [OPTIONS]

  Gets a list of subnets (CIDR notation) from which the WAAS EDGE may make
  requests. The subnets are owned by OCI and forward traffic to your origins.
  Allow traffic from these subnets to your origins. They are not associated
  with specific regions or compartments.

Options:
  --waas-policy-id TEXT           The [OCID] of the policy. [required]
  -c, --compartment-id TEXT       The [OCID] of the compartment. This number is
                                  generated when the compartment is created.
                                  [required]
  --limit INTEGER                 The maximum number of items to return in a
                                  paginated call. In unspecified, defaults to
                                  `10`.
  --page TEXT                     The value of the `opc-next-page` response
                                  header from the previous paginated call.
  --sort-by [id|status|timeAccepted|timeStarted|timeFinished|operationType]
                                  The value by which work requests are sorted in
                                  a paginated 'List' call. If unspecified,
                                  defaults to `timeAccepted`.
  --sort-order [ASC|DESC]         The value of the sorting direction of
                                  resources in a paginated 'List' call. If
                                  unspecified, defaults to `DESC`.
  --all                           Fetches all pages of results. If you provide
                                  this option, then you cannot provide the
                                  --limit option.
  --page-size INTEGER             When fetching results, the number of results
                                  to fetch per call. Only valid when used with
                                  --all or --limit, and ignored otherwise.
  --from-json TEXT                Provide input to this command as a JSON
                                  document from a file using the file://path-
                                  to/file syntax.
                                  
                                  The --generate-full-command-
                                  json-input option can be used to generate a
                                  sample json file to be used with this command
                                  option. The key names are pre-populated and
                                  match the command option names (converted to
                                  camelCase format, e.g. compartment-id -->
                                  compartmentId), while the values of the keys
                                  need to be populated by the user before using
                                  the sample file as an input to this command.
                                  For any command option that accepts multiple
                                  values, the value of the key can be a JSON
                                  array.
                                  
                                  Options can still be provided on the
                                  command line. If an option exists in both the
                                  JSON document and the command line then the
                                  command line specified value will be used.
                                  For examples on usage of this option, please
                                  see our "using CLI with advanced JSON options"
                                  link: https://docs.cloud.oracle.com/iaas/Conte
                                  nt/API/SDKDocs/cliusing.htm#AdvancedJSONOption
                                  s
  -?, -h, --help                  For detailed help on any of these individual
                                  commands, enter <command> --help.

